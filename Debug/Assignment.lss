
Assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  000020a0  00002134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000037b  0080013e  0080013e  00002172  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002172  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00002210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000027a1  00000000  00000000  00002480  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000107a  00000000  00000000  00004c21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001979  00000000  00000000  00005c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000790  00000000  00000000  00007614  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b77  00000000  00000000  00007da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b2b  00000000  00000000  0000891b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  0000a446  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a1 00 	jmp	0x142	; 0x142 <__ctors_end>
       4:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
       8:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
       c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      10:	0c 94 09 01 	jmp	0x212	; 0x212 <__vector_4>
      14:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      18:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      1c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      20:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      24:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      28:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      2c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      30:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      34:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      38:	0c 94 49 0c 	jmp	0x1892	; 0x1892 <__vector_14>
      3c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      40:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      44:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      48:	0c 94 54 0b 	jmp	0x16a8	; 0x16a8 <__vector_18>
      4c:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <__vector_19>
      50:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      54:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      58:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      5c:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      60:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>
      64:	0c 94 be 00 	jmp	0x17c	; 0x17c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	20 20       	and	r2, r0
	...

0000006b <__c.2045>:
      6b:	52 45 56 45 52 53 49 00                             REVERSI.

00000073 <__c.2040>:
      73:	2b 2d 2d 2b 2d 2d 2b 2d 2d 2b 2d 2d 2b 2d 2d 2b     +--+--+--+--+--+
      83:	2d 2d 2b 2d 2d 2b 2d 2d 2b 00                       --+--+--+.

0000008d <__c.2035>:
      8d:	7c 20 20 7c 20 20 7c 20 20 7c 20 20 7c 20 20 7c     |  |  |  |  |  |
      9d:	20 20 7c 20 20 7c 20 20 7c 00                         |  |  |.

000000a7 <__c.2033>:
      a7:	2b 2d 2d 2b 2d 2d 2b 2d 2d 2b 2d 2d 2b 2d 2d 2b     +--+--+--+--+--+
      b7:	2d 2d 2b 2d 2d 2b 2d 2d 2b 00                       --+--+--+.

000000c1 <__c.2261>:
      c1:	50 72 65 73 73 20 61 20 62 75 74 74 6f 6e 20 74     Press a button t
      d1:	6f 20 73 74 61 72 74 20 61 67 61 69 6e 00           o start again.

000000df <__c.2259>:
      df:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000e9 <__c.2238>:
      e9:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 70 72     CSSE2010/7201 pr
      f9:	6f 6a 65 63 74 20 62 79 20 3c 44 6f 6e 67 68 61     oject by <Dongha
     109:	6f 20 59 61 6e 67 20 34 35 39 33 30 30 33 32 3e     o Yang 45930032>
	...

0000011a <__c.2236>:
     11a:	52 65 76 65 72 73 69 00                             Reversi.

00000122 <__c.2054>:
     122:	1b 5b 3f 32 35 6c 00                                .[?25l.

00000129 <__c.2050>:
     129:	1b 5b 25 64 6d 00                                   .[%dm.

0000012f <__c.2040>:
     12f:	1b 5b 32 4a 00                                      .[2J.

00000134 <__c.2030>:
     134:	1b 5b 30 6d 00                                      .[0m.

00000139 <__c.2025>:
     139:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

00000142 <__ctors_end>:
     142:	11 24       	eor	r1, r1
     144:	1f be       	out	0x3f, r1	; 63
     146:	cf ef       	ldi	r28, 0xFF	; 255
     148:	d8 e0       	ldi	r29, 0x08	; 8
     14a:	de bf       	out	0x3e, r29	; 62
     14c:	cd bf       	out	0x3d, r28	; 61

0000014e <__do_copy_data>:
     14e:	11 e0       	ldi	r17, 0x01	; 1
     150:	a0 e0       	ldi	r26, 0x00	; 0
     152:	b1 e0       	ldi	r27, 0x01	; 1
     154:	e0 ea       	ldi	r30, 0xA0	; 160
     156:	f0 e2       	ldi	r31, 0x20	; 32
     158:	02 c0       	rjmp	.+4      	; 0x15e <__do_copy_data+0x10>
     15a:	05 90       	lpm	r0, Z+
     15c:	0d 92       	st	X+, r0
     15e:	ae 33       	cpi	r26, 0x3E	; 62
     160:	b1 07       	cpc	r27, r17
     162:	d9 f7       	brne	.-10     	; 0x15a <__do_copy_data+0xc>

00000164 <__do_clear_bss>:
     164:	24 e0       	ldi	r18, 0x04	; 4
     166:	ae e3       	ldi	r26, 0x3E	; 62
     168:	b1 e0       	ldi	r27, 0x01	; 1
     16a:	01 c0       	rjmp	.+2      	; 0x16e <.do_clear_bss_start>

0000016c <.do_clear_bss_loop>:
     16c:	1d 92       	st	X+, r1

0000016e <.do_clear_bss_start>:
     16e:	a9 3b       	cpi	r26, 0xB9	; 185
     170:	b2 07       	cpc	r27, r18
     172:	e1 f7       	brne	.-8      	; 0x16c <.do_clear_bss_loop>
     174:	0e 94 9e 09 	call	0x133c	; 0x133c <main>
     178:	0c 94 4e 10 	jmp	0x209c	; 0x209c <_exit>

0000017c <__bad_interrupt>:
     17c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000180 <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT10 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 82)
	PCICR |= (1<<PCIE1);
     180:	e8 e6       	ldi	r30, 0x68	; 104
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	80 81       	ld	r24, Z
     186:	82 60       	ori	r24, 0x02	; 2
     188:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 82)
	PCIFR |= (1<<PCIF1);
     18a:	8b b3       	in	r24, 0x1b	; 27
     18c:	82 60       	ori	r24, 0x02	; 2
     18e:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 83)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10);	
     190:	ec e6       	ldi	r30, 0x6C	; 108
     192:	f0 e0       	ldi	r31, 0x00	; 0
     194:	80 81       	ld	r24, Z
     196:	87 60       	ori	r24, 0x07	; 7
     198:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     19a:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <queue_length>
	
	// Set the last button pressed time for all pins to be zero
	// This is not the current time as that would enforce an ordering
	// on the hardware initialisation (i.e that the timer would have
	// to be set up first)
	for (uint8_t pin = 0; pin<=2; pin++) {
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	0d c0       	rjmp	.+26     	; 0x1bc <init_button_interrupts+0x3c>
		last_button_time[pin] = 0;
     1a2:	e8 2f       	mov	r30, r24
     1a4:	f0 e0       	ldi	r31, 0x00	; 0
     1a6:	ee 0f       	add	r30, r30
     1a8:	ff 1f       	adc	r31, r31
     1aa:	ee 0f       	add	r30, r30
     1ac:	ff 1f       	adc	r31, r31
     1ae:	e2 5c       	subi	r30, 0xC2	; 194
     1b0:	fe 4f       	sbci	r31, 0xFE	; 254
     1b2:	10 82       	st	Z, r1
     1b4:	11 82       	std	Z+1, r1	; 0x01
     1b6:	12 82       	std	Z+2, r1	; 0x02
     1b8:	13 82       	std	Z+3, r1	; 0x03
	
	// Set the last button pressed time for all pins to be zero
	// This is not the current time as that would enforce an ordering
	// on the hardware initialisation (i.e that the timer would have
	// to be set up first)
	for (uint8_t pin = 0; pin<=2; pin++) {
     1ba:	8f 5f       	subi	r24, 0xFF	; 255
     1bc:	83 30       	cpi	r24, 0x03	; 3
     1be:	88 f3       	brcs	.-30     	; 0x1a2 <init_button_interrupts+0x22>
		last_button_time[pin] = 0;
	}
}
     1c0:	08 95       	ret

000001c2 <button_pushed>:

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
	if(queue_length > 0) {
     1c2:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <queue_length>
     1c6:	18 16       	cp	r1, r24
     1c8:	14 f5       	brge	.+68     	; 0x20e <button_pushed+0x4c>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     1ca:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     1ce:	6f b7       	in	r22, 0x3f	; 63
		cli();
     1d0:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     1d2:	91 e0       	ldi	r25, 0x01	; 1
     1d4:	09 c0       	rjmp	.+18     	; 0x1e8 <button_pushed+0x26>
			button_queue[i-1] = button_queue[i];
     1d6:	f9 01       	movw	r30, r18
     1d8:	e5 5b       	subi	r30, 0xB5	; 181
     1da:	fe 4f       	sbci	r31, 0xFE	; 254
     1dc:	40 81       	ld	r20, Z
     1de:	f9 01       	movw	r30, r18
     1e0:	e6 5b       	subi	r30, 0xB6	; 182
     1e2:	fe 4f       	sbci	r31, 0xFE	; 254
     1e4:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     1e6:	9f 5f       	subi	r25, 0xFF	; 255
     1e8:	29 2f       	mov	r18, r25
     1ea:	30 e0       	ldi	r19, 0x00	; 0
     1ec:	40 91 4a 01 	lds	r20, 0x014A	; 0x80014a <queue_length>
     1f0:	04 2e       	mov	r0, r20
     1f2:	00 0c       	add	r0, r0
     1f4:	55 0b       	sbc	r21, r21
     1f6:	24 17       	cp	r18, r20
     1f8:	35 07       	cpc	r19, r21
     1fa:	6c f3       	brlt	.-38     	; 0x1d6 <button_pushed+0x14>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     1fc:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <queue_length>
     200:	91 50       	subi	r25, 0x01	; 1
     202:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <queue_length>
		
		if(interrupts_were_enabled) {
     206:	66 23       	and	r22, r22
     208:	1c f4       	brge	.+6      	; 0x210 <button_pushed+0x4e>
			// Turn them back on again
			sei();
     20a:	78 94       	sei
     20c:	08 95       	ret
		last_button_time[pin] = 0;
	}
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     20e:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     210:	08 95       	ret

00000212 <__vector_4>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     212:	1f 92       	push	r1
     214:	0f 92       	push	r0
     216:	0f b6       	in	r0, 0x3f	; 63
     218:	0f 92       	push	r0
     21a:	11 24       	eor	r1, r1
     21c:	cf 92       	push	r12
     21e:	df 92       	push	r13
     220:	ef 92       	push	r14
     222:	ff 92       	push	r15
     224:	0f 93       	push	r16
     226:	1f 93       	push	r17
     228:	2f 93       	push	r18
     22a:	3f 93       	push	r19
     22c:	4f 93       	push	r20
     22e:	5f 93       	push	r21
     230:	6f 93       	push	r22
     232:	7f 93       	push	r23
     234:	8f 93       	push	r24
     236:	9f 93       	push	r25
     238:	af 93       	push	r26
     23a:	bf 93       	push	r27
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	ef 93       	push	r30
     242:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINC & 0x07;
     244:	d6 b1       	in	r29, 0x06	; 6
     246:	d7 70       	andi	r29, 0x07	; 7
	
	uint32_t press_time = get_current_time();
     248:	0e 94 01 0c 	call	0x1802	; 0x1802 <get_current_time>
     24c:	6b 01       	movw	r12, r22
     24e:	7c 01       	movw	r14, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any buttons which have changed have their debounce reference time updated
	// Any button pushes are added to the queue of button pushes (if
	// there is space). A button press is a transition from 0 in the 
	// last_button_state bit to a 1 in the button_state.
	for(uint8_t pin=0; pin<=2; pin++) {
     250:	c0 e0       	ldi	r28, 0x00	; 0
     252:	66 c0       	rjmp	.+204    	; 0x320 <__vector_4+0x10e>
		if (button_state & (1<<pin) && !(last_button_state & (1<<pin))) {
     254:	0c 2f       	mov	r16, r28
     256:	10 e0       	ldi	r17, 0x00	; 0
     258:	8d 2f       	mov	r24, r29
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	0c 2e       	mov	r0, r28
     25e:	02 c0       	rjmp	.+4      	; 0x264 <__vector_4+0x52>
     260:	95 95       	asr	r25
     262:	87 95       	ror	r24
     264:	0a 94       	dec	r0
     266:	e2 f7       	brpl	.-8      	; 0x260 <__vector_4+0x4e>
     268:	9c 01       	movw	r18, r24
     26a:	21 70       	andi	r18, 0x01	; 1
     26c:	33 27       	eor	r19, r19
     26e:	80 ff       	sbrs	r24, 0
     270:	3c c0       	rjmp	.+120    	; 0x2ea <__vector_4+0xd8>
     272:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <last_button_state>
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	0c 2e       	mov	r0, r28
     27a:	02 c0       	rjmp	.+4      	; 0x280 <__vector_4+0x6e>
     27c:	95 95       	asr	r25
     27e:	87 95       	ror	r24
     280:	0a 94       	dec	r0
     282:	e2 f7       	brpl	.-8      	; 0x27c <__vector_4+0x6a>
     284:	80 fd       	sbrc	r24, 0
     286:	31 c0       	rjmp	.+98     	; 0x2ea <__vector_4+0xd8>
			// This is a transition from 0 to 1 on this pin
			if (queue_length < BUTTON_QUEUE_SIZE && 
     288:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <queue_length>
     28c:	84 30       	cpi	r24, 0x04	; 4
     28e:	fc f4       	brge	.+62     	; 0x2ce <__vector_4+0xbc>
					press_time >= last_button_time[pin] + DEBOUNCE_TIME) {
     290:	f8 01       	movw	r30, r16
     292:	ee 0f       	add	r30, r30
     294:	ff 1f       	adc	r31, r31
     296:	ee 0f       	add	r30, r30
     298:	ff 1f       	adc	r31, r31
     29a:	e2 5c       	subi	r30, 0xC2	; 194
     29c:	fe 4f       	sbci	r31, 0xFE	; 254
     29e:	80 81       	ld	r24, Z
     2a0:	91 81       	ldd	r25, Z+1	; 0x01
     2a2:	a2 81       	ldd	r26, Z+2	; 0x02
     2a4:	b3 81       	ldd	r27, Z+3	; 0x03
     2a6:	4e 96       	adiw	r24, 0x1e	; 30
     2a8:	a1 1d       	adc	r26, r1
     2aa:	b1 1d       	adc	r27, r1
	// there is space). A button press is a transition from 0 in the 
	// last_button_state bit to a 1 in the button_state.
	for(uint8_t pin=0; pin<=2; pin++) {
		if (button_state & (1<<pin) && !(last_button_state & (1<<pin))) {
			// This is a transition from 0 to 1 on this pin
			if (queue_length < BUTTON_QUEUE_SIZE && 
     2ac:	c8 16       	cp	r12, r24
     2ae:	d9 06       	cpc	r13, r25
     2b0:	ea 06       	cpc	r14, r26
     2b2:	fb 06       	cpc	r15, r27
     2b4:	60 f0       	brcs	.+24     	; 0x2ce <__vector_4+0xbc>
					press_time >= last_button_time[pin] + DEBOUNCE_TIME) {
				// Add the button push to the queue (and update the
				// length of the queue
				button_queue[queue_length++] = pin;	
     2b6:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <queue_length>
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	8e 0f       	add	r24, r30
     2be:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <queue_length>
     2c2:	0e 2e       	mov	r0, r30
     2c4:	00 0c       	add	r0, r0
     2c6:	ff 0b       	sbc	r31, r31
     2c8:	e5 5b       	subi	r30, 0xB5	; 181
     2ca:	fe 4f       	sbci	r31, 0xFE	; 254
     2cc:	c0 83       	st	Z, r28
			}
			// Any button press, even if it is not added to the queue should
			// be registered for debouncing
			last_button_time[pin] = get_current_time();
     2ce:	0e 94 01 0c 	call	0x1802	; 0x1802 <get_current_time>
     2d2:	00 0f       	add	r16, r16
     2d4:	11 1f       	adc	r17, r17
     2d6:	00 0f       	add	r16, r16
     2d8:	11 1f       	adc	r17, r17
     2da:	f8 01       	movw	r30, r16
     2dc:	e2 5c       	subi	r30, 0xC2	; 194
     2de:	fe 4f       	sbci	r31, 0xFE	; 254
     2e0:	60 83       	st	Z, r22
     2e2:	71 83       	std	Z+1, r23	; 0x01
     2e4:	82 83       	std	Z+2, r24	; 0x02
     2e6:	93 83       	std	Z+3, r25	; 0x03
     2e8:	1a c0       	rjmp	.+52     	; 0x31e <__vector_4+0x10c>
		} else if (!(button_state & (1<<pin)) && last_button_state & (1<<pin)) {
     2ea:	23 2b       	or	r18, r19
     2ec:	c1 f4       	brne	.+48     	; 0x31e <__vector_4+0x10c>
     2ee:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <last_button_state>
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	00 2e       	mov	r0, r16
     2f6:	02 c0       	rjmp	.+4      	; 0x2fc <__vector_4+0xea>
     2f8:	95 95       	asr	r25
     2fa:	87 95       	ror	r24
     2fc:	0a 94       	dec	r0
     2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <__vector_4+0xe6>
     300:	80 ff       	sbrs	r24, 0
     302:	0d c0       	rjmp	.+26     	; 0x31e <__vector_4+0x10c>
			// This is a transition from 1 to 0 on this pin.
			// Update the debounce timer anyway because it can bounce on release
			last_button_time[pin] = get_current_time();
     304:	0e 94 01 0c 	call	0x1802	; 0x1802 <get_current_time>
     308:	00 0f       	add	r16, r16
     30a:	11 1f       	adc	r17, r17
     30c:	00 0f       	add	r16, r16
     30e:	11 1f       	adc	r17, r17
     310:	f8 01       	movw	r30, r16
     312:	e2 5c       	subi	r30, 0xC2	; 194
     314:	fe 4f       	sbci	r31, 0xFE	; 254
     316:	60 83       	st	Z, r22
     318:	71 83       	std	Z+1, r23	; 0x01
     31a:	82 83       	std	Z+2, r24	; 0x02
     31c:	93 83       	std	Z+3, r25	; 0x03
	// Iterate over all the buttons and see which ones have changed.
	// Any buttons which have changed have their debounce reference time updated
	// Any button pushes are added to the queue of button pushes (if
	// there is space). A button press is a transition from 0 in the 
	// last_button_state bit to a 1 in the button_state.
	for(uint8_t pin=0; pin<=2; pin++) {
     31e:	cf 5f       	subi	r28, 0xFF	; 255
     320:	c3 30       	cpi	r28, 0x03	; 3
     322:	08 f4       	brcc	.+2      	; 0x326 <__vector_4+0x114>
     324:	97 cf       	rjmp	.-210    	; 0x254 <__vector_4+0x42>
			last_button_time[pin] = get_current_time();
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     326:	d0 93 4f 01 	sts	0x014F, r29	; 0x80014f <last_button_state>
     32a:	ff 91       	pop	r31
     32c:	ef 91       	pop	r30
     32e:	df 91       	pop	r29
     330:	cf 91       	pop	r28
     332:	bf 91       	pop	r27
     334:	af 91       	pop	r26
     336:	9f 91       	pop	r25
     338:	8f 91       	pop	r24
     33a:	7f 91       	pop	r23
     33c:	6f 91       	pop	r22
     33e:	5f 91       	pop	r21
     340:	4f 91       	pop	r20
     342:	3f 91       	pop	r19
     344:	2f 91       	pop	r18
     346:	1f 91       	pop	r17
     348:	0f 91       	pop	r16
     34a:	ff 90       	pop	r15
     34c:	ef 90       	pop	r14
     34e:	df 90       	pop	r13
     350:	cf 90       	pop	r12
     352:	0f 90       	pop	r0
     354:	0f be       	out	0x3f, r0	; 63
     356:	0f 90       	pop	r0
     358:	1f 90       	pop	r1
     35a:	18 95       	reti

0000035c <initialise_display>:
#include <avr/pgmspace.h>

#include "display.h"
#include "terminalio.h"

void initialise_display(void) {
     35c:	1f 93       	push	r17
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
	// first turn off the cursor
	hide_cursor();
     362:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <hide_cursor>

	// next build an empty board
	set_display_attribute(FG_YELLOW);
     366:	81 e2       	ldi	r24, 0x21	; 33
     368:	0e 94 ca 0b 	call	0x1794	; 0x1794 <set_display_attribute>
	for (uint8_t row = 0; row < HEIGHT; row++) {
     36c:	10 e0       	ldi	r17, 0x00	; 0
     36e:	25 c0       	rjmp	.+74     	; 0x3ba <initialise_display+0x5e>
		move_terminal_cursor(TERMINAL_BOARD_X, TERMINAL_BOARD_Y+2*row);
     370:	c1 2f       	mov	r28, r17
     372:	d0 e0       	ldi	r29, 0x00	; 0
     374:	be 01       	movw	r22, r28
     376:	66 0f       	add	r22, r22
     378:	77 1f       	adc	r23, r23
     37a:	6b 5f       	subi	r22, 0xFB	; 251
     37c:	7f 4f       	sbci	r23, 0xFF	; 255
     37e:	8d e2       	ldi	r24, 0x2D	; 45
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	0e 94 a7 0b 	call	0x174e	; 0x174e <move_terminal_cursor>
		printf_P(PSTR("+--+--+--+--+--+--+--+--+"));
     386:	87 ea       	ldi	r24, 0xA7	; 167
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	9f 93       	push	r25
     38c:	8f 93       	push	r24
     38e:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <printf_P>
		move_terminal_cursor(TERMINAL_BOARD_X, TERMINAL_BOARD_Y+2*row+1);
     392:	be 01       	movw	r22, r28
     394:	6d 5f       	subi	r22, 0xFD	; 253
     396:	7f 4f       	sbci	r23, 0xFF	; 255
     398:	66 0f       	add	r22, r22
     39a:	77 1f       	adc	r23, r23
     39c:	8d e2       	ldi	r24, 0x2D	; 45
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	0e 94 a7 0b 	call	0x174e	; 0x174e <move_terminal_cursor>
		printf_P(PSTR("|  |  |  |  |  |  |  |  |"));
     3a4:	8d e8       	ldi	r24, 0x8D	; 141
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	9f 93       	push	r25
     3aa:	8f 93       	push	r24
     3ac:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <printf_P>
	// first turn off the cursor
	hide_cursor();

	// next build an empty board
	set_display_attribute(FG_YELLOW);
	for (uint8_t row = 0; row < HEIGHT; row++) {
     3b0:	1f 5f       	subi	r17, 0xFF	; 255
     3b2:	0f 90       	pop	r0
     3b4:	0f 90       	pop	r0
     3b6:	0f 90       	pop	r0
     3b8:	0f 90       	pop	r0
     3ba:	18 30       	cpi	r17, 0x08	; 8
     3bc:	c8 f2       	brcs	.-78     	; 0x370 <initialise_display+0x14>
		move_terminal_cursor(TERMINAL_BOARD_X, TERMINAL_BOARD_Y+2*row);
		printf_P(PSTR("+--+--+--+--+--+--+--+--+"));
		move_terminal_cursor(TERMINAL_BOARD_X, TERMINAL_BOARD_Y+2*row+1);
		printf_P(PSTR("|  |  |  |  |  |  |  |  |"));
	}
	move_terminal_cursor(TERMINAL_BOARD_X, TERMINAL_BOARD_Y+2*HEIGHT);
     3be:	65 e1       	ldi	r22, 0x15	; 21
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	8d e2       	ldi	r24, 0x2D	; 45
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	0e 94 a7 0b 	call	0x174e	; 0x174e <move_terminal_cursor>
	printf_P(PSTR("+--+--+--+--+--+--+--+--+"));
     3ca:	83 e7       	ldi	r24, 0x73	; 115
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	9f 93       	push	r25
     3d0:	8f 93       	push	r24
     3d2:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <printf_P>

	// clear the colour settings so we don't print other things in yellow
	normal_display_mode();
     3d6:	0e 94 b8 0b 	call	0x1770	; 0x1770 <normal_display_mode>
}
     3da:	0f 90       	pop	r0
     3dc:	0f 90       	pop	r0
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	1f 91       	pop	r17
     3e4:	08 95       	ret

000003e6 <start_display>:

void start_display(void) {
	move_terminal_cursor(TERMINAL_BOARD_X, TERMINAL_BOARD_Y);
     3e6:	65 e0       	ldi	r22, 0x05	; 5
     3e8:	70 e0       	ldi	r23, 0x00	; 0
     3ea:	8d e2       	ldi	r24, 0x2D	; 45
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	0e 94 a7 0b 	call	0x174e	; 0x174e <move_terminal_cursor>
	set_display_attribute(FG_GREEN);
     3f2:	80 e2       	ldi	r24, 0x20	; 32
     3f4:	0e 94 ca 0b 	call	0x1794	; 0x1794 <set_display_attribute>
	printf_P(PSTR("REVERSI"));
     3f8:	8b e6       	ldi	r24, 0x6B	; 107
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	9f 93       	push	r25
     3fe:	8f 93       	push	r24
     400:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <printf_P>
}
     404:	0f 90       	pop	r0
     406:	0f 90       	pop	r0
     408:	08 95       	ret

0000040a <update_square_colour>:

void update_square_colour(uint8_t x, uint8_t y, uint8_t object) {
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	c8 2f       	mov	r28, r24
     410:	d6 2f       	mov	r29, r22
	// determine which colour corresponds to this object
	DisplayParameter backgroundColour;
	if (object == PLAYER_1) {
     412:	41 30       	cpi	r20, 0x01	; 1
     414:	41 f0       	breq	.+16     	; 0x426 <update_square_colour+0x1c>
		backgroundColour = TERMINAL_COLOUR_P1;
		} else if (object == PLAYER_2) {
     416:	42 30       	cpi	r20, 0x02	; 2
     418:	41 f0       	breq	.+16     	; 0x42a <update_square_colour+0x20>
		backgroundColour = TERMINAL_COLOUR_P2;
		} else if (object == CURSOR) {
     41a:	43 30       	cpi	r20, 0x03	; 3
     41c:	41 f0       	breq	.+16     	; 0x42e <update_square_colour+0x24>
		backgroundColour = TERMINAL_COLOUR_CURSOR;
		} else if (object == ILLEGAL_CURSOR) {
     41e:	44 30       	cpi	r20, 0x04	; 4
     420:	41 f4       	brne	.+16     	; 0x432 <update_square_colour+0x28>
		backgroundColour = TERMINAL_COLOUR_ILLEGAL_CURSOR;	
     422:	8c e2       	ldi	r24, 0x2C	; 44
     424:	07 c0       	rjmp	.+14     	; 0x434 <update_square_colour+0x2a>

void update_square_colour(uint8_t x, uint8_t y, uint8_t object) {
	// determine which colour corresponds to this object
	DisplayParameter backgroundColour;
	if (object == PLAYER_1) {
		backgroundColour = TERMINAL_COLOUR_P1;
     426:	89 e2       	ldi	r24, 0x29	; 41
     428:	05 c0       	rjmp	.+10     	; 0x434 <update_square_colour+0x2a>
		} else if (object == PLAYER_2) {
		backgroundColour = TERMINAL_COLOUR_P2;
     42a:	8a e2       	ldi	r24, 0x2A	; 42
     42c:	03 c0       	rjmp	.+6      	; 0x434 <update_square_colour+0x2a>
		} else if (object == CURSOR) {
		backgroundColour = TERMINAL_COLOUR_CURSOR;
     42e:	8b e2       	ldi	r24, 0x2B	; 43
     430:	01 c0       	rjmp	.+2      	; 0x434 <update_square_colour+0x2a>
		} else if (object == ILLEGAL_CURSOR) {
		backgroundColour = TERMINAL_COLOUR_ILLEGAL_CURSOR;	
		} else {
		// anything unexpected will be black
		backgroundColour = TERMINAL_COLOUR_EMPTY;
     432:	88 e2       	ldi	r24, 0x28	; 40
	}

	// set the background colour to be the determined colour
	// when we enter a space this will appear as a solid block
	set_display_attribute(backgroundColour);
     434:	0e 94 ca 0b 	call	0x1794	; 0x1794 <set_display_attribute>
	// update the square at the given location
	// note that two spaces form roughly a square so that is used instead of one space
	// also note that the terminal y values count from the top
	// but our referencing counts from the bottom, so the y position is inverted
	move_terminal_cursor(TERMINAL_BOARD_X + 1 + 3 * x,
	TERMINAL_BOARD_Y + 1 + 2 * (HEIGHT - y - 1));
     438:	6a e0       	ldi	r22, 0x0A	; 10
     43a:	70 e0       	ldi	r23, 0x00	; 0
     43c:	6d 1b       	sub	r22, r29
     43e:	71 09       	sbc	r23, r1

	// update the square at the given location
	// note that two spaces form roughly a square so that is used instead of one space
	// also note that the terminal y values count from the top
	// but our referencing counts from the bottom, so the y position is inverted
	move_terminal_cursor(TERMINAL_BOARD_X + 1 + 3 * x,
     440:	8c 2f       	mov	r24, r28
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	9c 01       	movw	r18, r24
     446:	22 0f       	add	r18, r18
     448:	33 1f       	adc	r19, r19
     44a:	82 0f       	add	r24, r18
     44c:	93 1f       	adc	r25, r19
     44e:	66 0f       	add	r22, r22
     450:	77 1f       	adc	r23, r23
     452:	8e 96       	adiw	r24, 0x2e	; 46
     454:	0e 94 a7 0b 	call	0x174e	; 0x174e <move_terminal_cursor>
	TERMINAL_BOARD_Y + 1 + 2 * (HEIGHT - y - 1));
	printf_P(PSTR("  ")); // print two spaces, since we set the background colour
     458:	88 e6       	ldi	r24, 0x68	; 104
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	9f 93       	push	r25
     45e:	8f 93       	push	r24
     460:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <printf_P>

	normal_display_mode(); // remove the display attribute
     464:	0e 94 b8 0b 	call	0x1770	; 0x1770 <normal_display_mode>
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	08 95       	ret

00000472 <initialise_board>:
uint8_t cursor_visible;
uint8_t current_player;
uint8_t valid_direction[WIDTH][HEIGHT][8];
uint8_t no_move_game_over = 0;

void initialise_board(void) {
     472:	cf 93       	push	r28
	
	// initialise the display we are using
	initialise_display();
     474:	0e 94 ae 01 	call	0x35c	; 0x35c <initialise_display>
	
	// initialise the board to be all empty
	for (uint8_t x = 0; x < WIDTH; x++) {
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	13 c0       	rjmp	.+38     	; 0x4a2 <initialise_board+0x30>
		for (uint8_t y = 0; y < HEIGHT; y++) {
			board[x][y] = EMPTY_SQUARE;
     47c:	e9 2f       	mov	r30, r25
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	ee 0f       	add	r30, r30
     482:	ff 1f       	adc	r31, r31
     484:	ee 0f       	add	r30, r30
     486:	ff 1f       	adc	r31, r31
     488:	ee 0f       	add	r30, r30
     48a:	ff 1f       	adc	r31, r31
     48c:	e6 5a       	subi	r30, 0xA6	; 166
     48e:	fe 4f       	sbci	r31, 0xFE	; 254
     490:	e8 0f       	add	r30, r24
     492:	f1 1d       	adc	r31, r1
     494:	10 82       	st	Z, r1
	// initialise the display we are using
	initialise_display();
	
	// initialise the board to be all empty
	for (uint8_t x = 0; x < WIDTH; x++) {
		for (uint8_t y = 0; y < HEIGHT; y++) {
     496:	8f 5f       	subi	r24, 0xFF	; 255
     498:	01 c0       	rjmp	.+2      	; 0x49c <initialise_board+0x2a>
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	88 30       	cpi	r24, 0x08	; 8
     49e:	70 f3       	brcs	.-36     	; 0x47c <initialise_board+0xa>
	
	// initialise the display we are using
	initialise_display();
	
	// initialise the board to be all empty
	for (uint8_t x = 0; x < WIDTH; x++) {
     4a0:	9f 5f       	subi	r25, 0xFF	; 255
     4a2:	98 30       	cpi	r25, 0x08	; 8
     4a4:	d0 f3       	brcs	.-12     	; 0x49a <initialise_board+0x28>
     4a6:	c0 e0       	ldi	r28, 0x00	; 0
     4a8:	1a c0       	rjmp	.+52     	; 0x4de <initialise_board+0x6c>
		}
	}
	
	// now load in the starting pieces for player 1
	for (uint8_t i = 0; i < START_PIECES; i++) {
		uint8_t x = p1_start_pieces[i][0];
     4aa:	ec 2f       	mov	r30, r28
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	ee 0f       	add	r30, r30
     4b0:	ff 1f       	adc	r31, r31
     4b2:	e4 5e       	subi	r30, 0xE4	; 228
     4b4:	fe 4f       	sbci	r31, 0xFE	; 254
     4b6:	80 81       	ld	r24, Z
		uint8_t y = p1_start_pieces[i][1];
     4b8:	61 81       	ldd	r22, Z+1	; 0x01
		board[x][y] = PLAYER_1; // place in array
     4ba:	e8 2f       	mov	r30, r24
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	ee 0f       	add	r30, r30
     4c0:	ff 1f       	adc	r31, r31
     4c2:	ee 0f       	add	r30, r30
     4c4:	ff 1f       	adc	r31, r31
     4c6:	ee 0f       	add	r30, r30
     4c8:	ff 1f       	adc	r31, r31
     4ca:	e6 5a       	subi	r30, 0xA6	; 166
     4cc:	fe 4f       	sbci	r31, 0xFE	; 254
     4ce:	e6 0f       	add	r30, r22
     4d0:	f1 1d       	adc	r31, r1
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	90 83       	st	Z, r25
		update_square_colour(x, y, PLAYER_1); // show on board
     4d6:	41 e0       	ldi	r20, 0x01	; 1
     4d8:	0e 94 05 02 	call	0x40a	; 0x40a <update_square_colour>
			board[x][y] = EMPTY_SQUARE;
		}
	}
	
	// now load in the starting pieces for player 1
	for (uint8_t i = 0; i < START_PIECES; i++) {
     4dc:	cf 5f       	subi	r28, 0xFF	; 255
     4de:	c2 30       	cpi	r28, 0x02	; 2
     4e0:	20 f3       	brcs	.-56     	; 0x4aa <initialise_board+0x38>
     4e2:	c0 e0       	ldi	r28, 0x00	; 0
     4e4:	1a c0       	rjmp	.+52     	; 0x51a <initialise_board+0xa8>
		update_square_colour(x, y, PLAYER_1); // show on board
	}
	
	// and for player 2
	for (uint8_t i = 0; i < START_PIECES; i++) {
		uint8_t x = p2_start_pieces[i][0];
     4e6:	ec 2f       	mov	r30, r28
     4e8:	f0 e0       	ldi	r31, 0x00	; 0
     4ea:	ee 0f       	add	r30, r30
     4ec:	ff 1f       	adc	r31, r31
     4ee:	e8 5e       	subi	r30, 0xE8	; 232
     4f0:	fe 4f       	sbci	r31, 0xFE	; 254
     4f2:	80 81       	ld	r24, Z
		uint8_t y = p2_start_pieces[i][1];
     4f4:	61 81       	ldd	r22, Z+1	; 0x01
		board[x][y] = PLAYER_2;
     4f6:	e8 2f       	mov	r30, r24
     4f8:	f0 e0       	ldi	r31, 0x00	; 0
     4fa:	ee 0f       	add	r30, r30
     4fc:	ff 1f       	adc	r31, r31
     4fe:	ee 0f       	add	r30, r30
     500:	ff 1f       	adc	r31, r31
     502:	ee 0f       	add	r30, r30
     504:	ff 1f       	adc	r31, r31
     506:	e6 5a       	subi	r30, 0xA6	; 166
     508:	fe 4f       	sbci	r31, 0xFE	; 254
     50a:	e6 0f       	add	r30, r22
     50c:	f1 1d       	adc	r31, r1
     50e:	92 e0       	ldi	r25, 0x02	; 2
     510:	90 83       	st	Z, r25
		update_square_colour(x, y, PLAYER_2);		
     512:	42 e0       	ldi	r20, 0x02	; 2
     514:	0e 94 05 02 	call	0x40a	; 0x40a <update_square_colour>
		board[x][y] = PLAYER_1; // place in array
		update_square_colour(x, y, PLAYER_1); // show on board
	}
	
	// and for player 2
	for (uint8_t i = 0; i < START_PIECES; i++) {
     518:	cf 5f       	subi	r28, 0xFF	; 255
     51a:	c2 30       	cpi	r28, 0x02	; 2
     51c:	20 f3       	brcs	.-56     	; 0x4e6 <initialise_board+0x74>
		board[x][y] = PLAYER_2;
		update_square_colour(x, y, PLAYER_2);		
	}
	
	// set the starting player
	current_player = PLAYER_1;
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <current_player>
	
	// also set where the cursor starts
	cursor_x = CURSOR_X_START;
     524:	85 e0       	ldi	r24, 0x05	; 5
     526:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <cursor_x>
	cursor_y = CURSOR_Y_START;
     52a:	83 e0       	ldi	r24, 0x03	; 3
     52c:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <cursor_y>
	cursor_visible = 0;
     530:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <cursor_visible>
	// the game start from player 1 with red piece
	DDRB |= (1 << DDB0) | (1 << DDB1);
     534:	84 b1       	in	r24, 0x04	; 4
     536:	83 60       	ori	r24, 0x03	; 3
     538:	84 b9       	out	0x04, r24	; 4
	PORTB |= 1 << PORTB0;
     53a:	85 b1       	in	r24, 0x05	; 5
     53c:	81 60       	ori	r24, 0x01	; 1
     53e:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1 << PORTB1);
     540:	85 b1       	in	r24, 0x05	; 5
     542:	8d 7f       	andi	r24, 0xFD	; 253
     544:	85 b9       	out	0x05, r24	; 5
}
     546:	cf 91       	pop	r28
     548:	08 95       	ret

0000054a <get_piece_at>:

uint8_t get_piece_at(uint8_t x, uint8_t y) {
	// check the bounds, anything outside the bounds
	// will be considered empty
	if (x < 0 || x >= WIDTH || y < 0 || y >= WIDTH) {
     54a:	88 30       	cpi	r24, 0x08	; 8
     54c:	80 f4       	brcc	.+32     	; 0x56e <get_piece_at+0x24>
     54e:	68 30       	cpi	r22, 0x08	; 8
     550:	80 f4       	brcc	.+32     	; 0x572 <get_piece_at+0x28>
		return EMPTY_SQUARE;
	} else {
		//if in the bounds, just index into the array
		return board[x][y];
     552:	e8 2f       	mov	r30, r24
     554:	f0 e0       	ldi	r31, 0x00	; 0
     556:	ee 0f       	add	r30, r30
     558:	ff 1f       	adc	r31, r31
     55a:	ee 0f       	add	r30, r30
     55c:	ff 1f       	adc	r31, r31
     55e:	ee 0f       	add	r30, r30
     560:	ff 1f       	adc	r31, r31
     562:	e6 5a       	subi	r30, 0xA6	; 166
     564:	fe 4f       	sbci	r31, 0xFE	; 254
     566:	e6 0f       	add	r30, r22
     568:	f1 1d       	adc	r31, r1
     56a:	80 81       	ld	r24, Z
     56c:	08 95       	ret

uint8_t get_piece_at(uint8_t x, uint8_t y) {
	// check the bounds, anything outside the bounds
	// will be considered empty
	if (x < 0 || x >= WIDTH || y < 0 || y >= WIDTH) {
		return EMPTY_SQUARE;
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	08 95       	ret
     572:	80 e0       	ldi	r24, 0x00	; 0
	} else {
		//if in the bounds, just index into the array
		return board[x][y];
	}
}
     574:	08 95       	ret

00000576 <distance>:
	 * 3: display the cursor at the new location
	 */
}

uint8_t distance(uint8_t x, uint8_t y, uint8_t xx, uint8_t yy) {
	uint8_t dx = abs(x - xx);
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	fc 01       	movw	r30, r24
     57a:	e4 1b       	sub	r30, r20
     57c:	f1 09       	sbc	r31, r1
     57e:	cf 01       	movw	r24, r30
     580:	22 f4       	brpl	.+8      	; 0x58a <distance+0x14>
     582:	88 27       	eor	r24, r24
     584:	99 27       	eor	r25, r25
     586:	8e 1b       	sub	r24, r30
     588:	9f 0b       	sbc	r25, r31
	uint8_t dy = abs(y - yy);
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	62 1b       	sub	r22, r18
     58e:	71 09       	sbc	r23, r1
     590:	9b 01       	movw	r18, r22
     592:	22 f4       	brpl	.+8      	; 0x59c <distance+0x26>
     594:	22 27       	eor	r18, r18
     596:	33 27       	eor	r19, r19
     598:	26 1b       	sub	r18, r22
     59a:	37 0b       	sbc	r19, r23
	if (dx > 0) {
     59c:	81 11       	cpse	r24, r1
     59e:	01 c0       	rjmp	.+2      	; 0x5a2 <distance+0x2c>
		return dx;
	} else {
		return dy;
     5a0:	82 2f       	mov	r24, r18
	}
}
     5a2:	08 95       	ret

000005a4 <check_valid_place>:

uint8_t check_valid_place(uint8_t x, uint8_t y) {
     5a4:	bf 92       	push	r11
     5a6:	cf 92       	push	r12
     5a8:	df 92       	push	r13
     5aa:	ef 92       	push	r14
     5ac:	ff 92       	push	r15
     5ae:	0f 93       	push	r16
     5b0:	1f 93       	push	r17
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	08 2f       	mov	r16, r24
     5b8:	f6 2e       	mov	r15, r22
	// if the direction is legal direction, 0 is illegal, 1 is legal
	uint8_t is_valid = 0;
	uint8_t next_player;
	if (current_player == PLAYER_1) {
     5ba:	e0 90 9a 01 	lds	r14, 0x019A	; 0x80019a <current_player>
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	e8 12       	cpse	r14, r24
     5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <check_valid_place+0x24>
		next_player = PLAYER_2;
     5c4:	c2 e0       	ldi	r28, 0x02	; 2
     5c6:	01 c0       	rjmp	.+2      	; 0x5ca <check_valid_place+0x26>
	} else {
		next_player = PLAYER_1;
     5c8:	c1 e0       	ldi	r28, 0x01	; 1
	}
	
	// check the up direction
	uint8_t x_up = x;
	uint8_t y_up = y + 1;
     5ca:	11 e0       	ldi	r17, 0x01	; 1
     5cc:	1f 0d       	add	r17, r15
     5ce:	d1 2f       	mov	r29, r17
	while (y_up <= 7 && get_piece_at(x_up, y_up) == next_player) {
     5d0:	01 c0       	rjmp	.+2      	; 0x5d4 <check_valid_place+0x30>
		y_up += 1;
     5d2:	df 5f       	subi	r29, 0xFF	; 255
	}
	
	// check the up direction
	uint8_t x_up = x;
	uint8_t y_up = y + 1;
	while (y_up <= 7 && get_piece_at(x_up, y_up) == next_player) {
     5d4:	d8 30       	cpi	r29, 0x08	; 8
     5d6:	30 f4       	brcc	.+12     	; 0x5e4 <check_valid_place+0x40>
     5d8:	6d 2f       	mov	r22, r29
     5da:	80 2f       	mov	r24, r16
     5dc:	0e 94 a5 02 	call	0x54a	; 0x54a <get_piece_at>
     5e0:	c8 17       	cp	r28, r24
     5e2:	b9 f3       	breq	.-18     	; 0x5d2 <check_valid_place+0x2e>
		y_up += 1;
	}
	if (y_up <= 7 && distance(x, y, x_up, y_up) > 1 && board[x_up][y_up] == current_player) {
     5e4:	d8 30       	cpi	r29, 0x08	; 8
     5e6:	70 f5       	brcc	.+92     	; 0x644 <check_valid_place+0xa0>
     5e8:	2d 2f       	mov	r18, r29
     5ea:	40 2f       	mov	r20, r16
     5ec:	6f 2d       	mov	r22, r15
     5ee:	80 2f       	mov	r24, r16
     5f0:	0e 94 bb 02 	call	0x576	; 0x576 <distance>
     5f4:	82 30       	cpi	r24, 0x02	; 2
     5f6:	40 f1       	brcs	.+80     	; 0x648 <check_valid_place+0xa4>
     5f8:	80 2f       	mov	r24, r16
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	fc 01       	movw	r30, r24
     5fe:	ee 0f       	add	r30, r30
     600:	ff 1f       	adc	r31, r31
     602:	ee 0f       	add	r30, r30
     604:	ff 1f       	adc	r31, r31
     606:	ee 0f       	add	r30, r30
     608:	ff 1f       	adc	r31, r31
     60a:	e6 5a       	subi	r30, 0xA6	; 166
     60c:	fe 4f       	sbci	r31, 0xFE	; 254
     60e:	ed 0f       	add	r30, r29
     610:	f1 1d       	adc	r31, r1
     612:	20 81       	ld	r18, Z
     614:	e2 12       	cpse	r14, r18
     616:	1a c0       	rjmp	.+52     	; 0x64c <check_valid_place+0xa8>
		valid_direction[x][y][0] = 1;
     618:	fc 01       	movw	r30, r24
     61a:	ee 0f       	add	r30, r30
     61c:	ff 1f       	adc	r31, r31
     61e:	ee 0f       	add	r30, r30
     620:	ff 1f       	adc	r31, r31
     622:	ee 0f       	add	r30, r30
     624:	ff 1f       	adc	r31, r31
     626:	ef 0d       	add	r30, r15
     628:	f1 1d       	adc	r31, r1
     62a:	ee 0f       	add	r30, r30
     62c:	ff 1f       	adc	r31, r31
     62e:	ee 0f       	add	r30, r30
     630:	ff 1f       	adc	r31, r31
     632:	ee 0f       	add	r30, r30
     634:	ff 1f       	adc	r31, r31
     636:	e4 56       	subi	r30, 0x64	; 100
     638:	fe 4f       	sbci	r31, 0xFE	; 254
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	80 83       	st	Z, r24
		is_valid = 1;
     63e:	dd 24       	eor	r13, r13
     640:	d3 94       	inc	r13
     642:	05 c0       	rjmp	.+10     	; 0x64e <check_valid_place+0xaa>
	}
}

uint8_t check_valid_place(uint8_t x, uint8_t y) {
	// if the direction is legal direction, 0 is illegal, 1 is legal
	uint8_t is_valid = 0;
     644:	d1 2c       	mov	r13, r1
     646:	03 c0       	rjmp	.+6      	; 0x64e <check_valid_place+0xaa>
     648:	d1 2c       	mov	r13, r1
     64a:	01 c0       	rjmp	.+2      	; 0x64e <check_valid_place+0xaa>
     64c:	d1 2c       	mov	r13, r1
		valid_direction[x][y][0] = 1;
		is_valid = 1;
	}
	
	// check the up-right direction
	uint8_t x_up_right = x + 1;
     64e:	d1 e0       	ldi	r29, 0x01	; 1
     650:	d0 0f       	add	r29, r16
	uint8_t y_up_right = y + 1;
     652:	b1 2e       	mov	r11, r17
		valid_direction[x][y][0] = 1;
		is_valid = 1;
	}
	
	// check the up-right direction
	uint8_t x_up_right = x + 1;
     654:	cd 2e       	mov	r12, r29
	uint8_t y_up_right = y + 1;
	while (x_up_right <= 7 && y_up_right <= 7 && get_piece_at(x_up_right, y_up_right) == next_player) {
     656:	02 c0       	rjmp	.+4      	; 0x65c <check_valid_place+0xb8>
		x_up_right += 1;
     658:	c3 94       	inc	r12
		y_up_right += 1;
     65a:	b3 94       	inc	r11
	}
	
	// check the up-right direction
	uint8_t x_up_right = x + 1;
	uint8_t y_up_right = y + 1;
	while (x_up_right <= 7 && y_up_right <= 7 && get_piece_at(x_up_right, y_up_right) == next_player) {
     65c:	87 e0       	ldi	r24, 0x07	; 7
     65e:	8c 15       	cp	r24, r12
     660:	40 f0       	brcs	.+16     	; 0x672 <check_valid_place+0xce>
     662:	8b 15       	cp	r24, r11
     664:	30 f0       	brcs	.+12     	; 0x672 <check_valid_place+0xce>
     666:	6b 2d       	mov	r22, r11
     668:	8c 2d       	mov	r24, r12
     66a:	0e 94 a5 02 	call	0x54a	; 0x54a <get_piece_at>
     66e:	c8 17       	cp	r28, r24
     670:	99 f3       	breq	.-26     	; 0x658 <check_valid_place+0xb4>
		x_up_right += 1;
		y_up_right += 1;
	}
	if (x_up_right <= 7 && y_up_right <= 7 && distance(x, y, x_up_right, y_up_right) > 1 && board[x_up_right][y_up_right] == current_player) {
     672:	87 e0       	ldi	r24, 0x07	; 7
     674:	8c 15       	cp	r24, r12
     676:	78 f1       	brcs	.+94     	; 0x6d6 <check_valid_place+0x132>
     678:	8b 15       	cp	r24, r11
     67a:	68 f1       	brcs	.+90     	; 0x6d6 <check_valid_place+0x132>
     67c:	2b 2d       	mov	r18, r11
     67e:	4c 2d       	mov	r20, r12
     680:	6f 2d       	mov	r22, r15
     682:	80 2f       	mov	r24, r16
     684:	0e 94 bb 02 	call	0x576	; 0x576 <distance>
     688:	82 30       	cpi	r24, 0x02	; 2
     68a:	28 f1       	brcs	.+74     	; 0x6d6 <check_valid_place+0x132>
     68c:	ec 2d       	mov	r30, r12
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	ee 0f       	add	r30, r30
     692:	ff 1f       	adc	r31, r31
     694:	ee 0f       	add	r30, r30
     696:	ff 1f       	adc	r31, r31
     698:	ee 0f       	add	r30, r30
     69a:	ff 1f       	adc	r31, r31
     69c:	e6 5a       	subi	r30, 0xA6	; 166
     69e:	fe 4f       	sbci	r31, 0xFE	; 254
     6a0:	eb 0d       	add	r30, r11
     6a2:	f1 1d       	adc	r31, r1
     6a4:	80 81       	ld	r24, Z
     6a6:	e8 12       	cpse	r14, r24
     6a8:	16 c0       	rjmp	.+44     	; 0x6d6 <check_valid_place+0x132>
		valid_direction[x][y][1] = 1;
     6aa:	e0 2f       	mov	r30, r16
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	ee 0f       	add	r30, r30
     6b0:	ff 1f       	adc	r31, r31
     6b2:	ee 0f       	add	r30, r30
     6b4:	ff 1f       	adc	r31, r31
     6b6:	ee 0f       	add	r30, r30
     6b8:	ff 1f       	adc	r31, r31
     6ba:	ef 0d       	add	r30, r15
     6bc:	f1 1d       	adc	r31, r1
     6be:	ee 0f       	add	r30, r30
     6c0:	ff 1f       	adc	r31, r31
     6c2:	ee 0f       	add	r30, r30
     6c4:	ff 1f       	adc	r31, r31
     6c6:	ee 0f       	add	r30, r30
     6c8:	ff 1f       	adc	r31, r31
     6ca:	e4 56       	subi	r30, 0x64	; 100
     6cc:	fe 4f       	sbci	r31, 0xFE	; 254
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	81 83       	std	Z+1, r24	; 0x01
		is_valid = 1;
     6d2:	dd 24       	eor	r13, r13
     6d4:	d3 94       	inc	r13
	}
	
	// check the right direction
	uint8_t x_right = x + 1;
     6d6:	cd 2e       	mov	r12, r29
	uint8_t y_right = y;
	while (x_right <= 7 && get_piece_at(x_right, y_right) == next_player) {
     6d8:	01 c0       	rjmp	.+2      	; 0x6dc <check_valid_place+0x138>
		x_right += 1;
     6da:	c3 94       	inc	r12
	}
	
	// check the right direction
	uint8_t x_right = x + 1;
	uint8_t y_right = y;
	while (x_right <= 7 && get_piece_at(x_right, y_right) == next_player) {
     6dc:	87 e0       	ldi	r24, 0x07	; 7
     6de:	8c 15       	cp	r24, r12
     6e0:	30 f0       	brcs	.+12     	; 0x6ee <check_valid_place+0x14a>
     6e2:	6f 2d       	mov	r22, r15
     6e4:	8c 2d       	mov	r24, r12
     6e6:	0e 94 a5 02 	call	0x54a	; 0x54a <get_piece_at>
     6ea:	c8 17       	cp	r28, r24
     6ec:	b1 f3       	breq	.-20     	; 0x6da <check_valid_place+0x136>
		x_right += 1;
	}
	if (x_right <= 7 && distance(x, y, x_right, y_right) > 1 && board[x_right][y_right] == current_player) {
     6ee:	87 e0       	ldi	r24, 0x07	; 7
     6f0:	8c 15       	cp	r24, r12
     6f2:	78 f1       	brcs	.+94     	; 0x752 <check_valid_place+0x1ae>
     6f4:	2f 2d       	mov	r18, r15
     6f6:	4c 2d       	mov	r20, r12
     6f8:	6f 2d       	mov	r22, r15
     6fa:	80 2f       	mov	r24, r16
     6fc:	0e 94 bb 02 	call	0x576	; 0x576 <distance>
     700:	82 30       	cpi	r24, 0x02	; 2
     702:	38 f1       	brcs	.+78     	; 0x752 <check_valid_place+0x1ae>
     704:	8f 2d       	mov	r24, r15
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	ec 2d       	mov	r30, r12
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	ee 0f       	add	r30, r30
     70e:	ff 1f       	adc	r31, r31
     710:	ee 0f       	add	r30, r30
     712:	ff 1f       	adc	r31, r31
     714:	ee 0f       	add	r30, r30
     716:	ff 1f       	adc	r31, r31
     718:	e6 5a       	subi	r30, 0xA6	; 166
     71a:	fe 4f       	sbci	r31, 0xFE	; 254
     71c:	e8 0f       	add	r30, r24
     71e:	f9 1f       	adc	r31, r25
     720:	20 81       	ld	r18, Z
     722:	e2 12       	cpse	r14, r18
     724:	16 c0       	rjmp	.+44     	; 0x752 <check_valid_place+0x1ae>
		valid_direction[x][y][2] = 1;
     726:	e0 2f       	mov	r30, r16
     728:	f0 e0       	ldi	r31, 0x00	; 0
     72a:	ee 0f       	add	r30, r30
     72c:	ff 1f       	adc	r31, r31
     72e:	ee 0f       	add	r30, r30
     730:	ff 1f       	adc	r31, r31
     732:	ee 0f       	add	r30, r30
     734:	ff 1f       	adc	r31, r31
     736:	e8 0f       	add	r30, r24
     738:	f9 1f       	adc	r31, r25
     73a:	ee 0f       	add	r30, r30
     73c:	ff 1f       	adc	r31, r31
     73e:	ee 0f       	add	r30, r30
     740:	ff 1f       	adc	r31, r31
     742:	ee 0f       	add	r30, r30
     744:	ff 1f       	adc	r31, r31
     746:	e4 56       	subi	r30, 0x64	; 100
     748:	fe 4f       	sbci	r31, 0xFE	; 254
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	82 83       	std	Z+2, r24	; 0x02
		is_valid = 1;
     74e:	dd 24       	eor	r13, r13
     750:	d3 94       	inc	r13
	}
	
	// check the down-right direction 
	uint8_t x_down_right = x + 1;
	uint8_t y_down_right = y - 1;
     752:	bb 24       	eor	r11, r11
     754:	ba 94       	dec	r11
     756:	bf 0c       	add	r11, r15
     758:	cb 2c       	mov	r12, r11
	while(x_down_right <= 7 && y_down_right >= 0 && get_piece_at(x_down_right, y_down_right) == next_player) {
     75a:	02 c0       	rjmp	.+4      	; 0x760 <check_valid_place+0x1bc>
		x_down_right += 1;
     75c:	df 5f       	subi	r29, 0xFF	; 255
		y_down_right -= 1;
     75e:	ca 94       	dec	r12
	}
	
	// check the down-right direction 
	uint8_t x_down_right = x + 1;
	uint8_t y_down_right = y - 1;
	while(x_down_right <= 7 && y_down_right >= 0 && get_piece_at(x_down_right, y_down_right) == next_player) {
     760:	d8 30       	cpi	r29, 0x08	; 8
     762:	30 f4       	brcc	.+12     	; 0x770 <check_valid_place+0x1cc>
     764:	6c 2d       	mov	r22, r12
     766:	8d 2f       	mov	r24, r29
     768:	0e 94 a5 02 	call	0x54a	; 0x54a <get_piece_at>
     76c:	c8 17       	cp	r28, r24
     76e:	b1 f3       	breq	.-20     	; 0x75c <check_valid_place+0x1b8>
		x_down_right += 1;
		y_down_right -= 1;
	}
	if (x_down_right <= 7 && y_down_right >= 0 && distance(x, y, x_down_right, y_down_right) > 1 && board[x_down_right][y_down_right] == current_player) {
     770:	d8 30       	cpi	r29, 0x08	; 8
     772:	68 f5       	brcc	.+90     	; 0x7ce <check_valid_place+0x22a>
     774:	2c 2d       	mov	r18, r12
     776:	4d 2f       	mov	r20, r29
     778:	6f 2d       	mov	r22, r15
     77a:	80 2f       	mov	r24, r16
     77c:	0e 94 bb 02 	call	0x576	; 0x576 <distance>
     780:	82 30       	cpi	r24, 0x02	; 2
     782:	28 f1       	brcs	.+74     	; 0x7ce <check_valid_place+0x22a>
     784:	ed 2f       	mov	r30, r29
     786:	f0 e0       	ldi	r31, 0x00	; 0
     788:	ee 0f       	add	r30, r30
     78a:	ff 1f       	adc	r31, r31
     78c:	ee 0f       	add	r30, r30
     78e:	ff 1f       	adc	r31, r31
     790:	ee 0f       	add	r30, r30
     792:	ff 1f       	adc	r31, r31
     794:	e6 5a       	subi	r30, 0xA6	; 166
     796:	fe 4f       	sbci	r31, 0xFE	; 254
     798:	ec 0d       	add	r30, r12
     79a:	f1 1d       	adc	r31, r1
     79c:	80 81       	ld	r24, Z
     79e:	e8 12       	cpse	r14, r24
     7a0:	16 c0       	rjmp	.+44     	; 0x7ce <check_valid_place+0x22a>
		valid_direction[x][y][3] = 1;
     7a2:	e0 2f       	mov	r30, r16
     7a4:	f0 e0       	ldi	r31, 0x00	; 0
     7a6:	ee 0f       	add	r30, r30
     7a8:	ff 1f       	adc	r31, r31
     7aa:	ee 0f       	add	r30, r30
     7ac:	ff 1f       	adc	r31, r31
     7ae:	ee 0f       	add	r30, r30
     7b0:	ff 1f       	adc	r31, r31
     7b2:	ef 0d       	add	r30, r15
     7b4:	f1 1d       	adc	r31, r1
     7b6:	ee 0f       	add	r30, r30
     7b8:	ff 1f       	adc	r31, r31
     7ba:	ee 0f       	add	r30, r30
     7bc:	ff 1f       	adc	r31, r31
     7be:	ee 0f       	add	r30, r30
     7c0:	ff 1f       	adc	r31, r31
     7c2:	e4 56       	subi	r30, 0x64	; 100
     7c4:	fe 4f       	sbci	r31, 0xFE	; 254
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	83 83       	std	Z+3, r24	; 0x03
		is_valid = 1;
     7ca:	dd 24       	eor	r13, r13
     7cc:	d3 94       	inc	r13
	}
	
	// check the down direction 
	uint8_t x_down = x;
	uint8_t y_down = y - 1;
     7ce:	db 2d       	mov	r29, r11
	while (y_down >= 0 && get_piece_at(x_down, y_down) == next_player) {
     7d0:	01 c0       	rjmp	.+2      	; 0x7d4 <check_valid_place+0x230>
		y_down -= 1;
     7d2:	d1 50       	subi	r29, 0x01	; 1
	}
	
	// check the down direction 
	uint8_t x_down = x;
	uint8_t y_down = y - 1;
	while (y_down >= 0 && get_piece_at(x_down, y_down) == next_player) {
     7d4:	6d 2f       	mov	r22, r29
     7d6:	80 2f       	mov	r24, r16
     7d8:	0e 94 a5 02 	call	0x54a	; 0x54a <get_piece_at>
     7dc:	c8 17       	cp	r28, r24
     7de:	c9 f3       	breq	.-14     	; 0x7d2 <check_valid_place+0x22e>
		y_down -= 1;
	}
	if (y_down >= 0 && distance(x, y, x_down, y_down) > 1 && board[x_down][y_down] == current_player) {
     7e0:	2d 2f       	mov	r18, r29
     7e2:	40 2f       	mov	r20, r16
     7e4:	6f 2d       	mov	r22, r15
     7e6:	80 2f       	mov	r24, r16
     7e8:	0e 94 bb 02 	call	0x576	; 0x576 <distance>
     7ec:	82 30       	cpi	r24, 0x02	; 2
     7ee:	28 f1       	brcs	.+74     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     7f0:	80 2f       	mov	r24, r16
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	fc 01       	movw	r30, r24
     7f6:	ee 0f       	add	r30, r30
     7f8:	ff 1f       	adc	r31, r31
     7fa:	ee 0f       	add	r30, r30
     7fc:	ff 1f       	adc	r31, r31
     7fe:	ee 0f       	add	r30, r30
     800:	ff 1f       	adc	r31, r31
     802:	e6 5a       	subi	r30, 0xA6	; 166
     804:	fe 4f       	sbci	r31, 0xFE	; 254
     806:	ed 0f       	add	r30, r29
     808:	f1 1d       	adc	r31, r1
     80a:	20 81       	ld	r18, Z
     80c:	e2 12       	cpse	r14, r18
     80e:	15 c0       	rjmp	.+42     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
		valid_direction[x][y][4] = 1;
     810:	fc 01       	movw	r30, r24
     812:	ee 0f       	add	r30, r30
     814:	ff 1f       	adc	r31, r31
     816:	ee 0f       	add	r30, r30
     818:	ff 1f       	adc	r31, r31
     81a:	ee 0f       	add	r30, r30
     81c:	ff 1f       	adc	r31, r31
     81e:	ef 0d       	add	r30, r15
     820:	f1 1d       	adc	r31, r1
     822:	ee 0f       	add	r30, r30
     824:	ff 1f       	adc	r31, r31
     826:	ee 0f       	add	r30, r30
     828:	ff 1f       	adc	r31, r31
     82a:	ee 0f       	add	r30, r30
     82c:	ff 1f       	adc	r31, r31
     82e:	e4 56       	subi	r30, 0x64	; 100
     830:	fe 4f       	sbci	r31, 0xFE	; 254
     832:	81 e0       	ldi	r24, 0x01	; 1
     834:	84 83       	std	Z+4, r24	; 0x04
		is_valid = 1;
     836:	dd 24       	eor	r13, r13
     838:	d3 94       	inc	r13
	}
	
	// check the down-left direction
	uint8_t x_down_left = x - 1;
     83a:	cc 24       	eor	r12, r12
     83c:	ca 94       	dec	r12
     83e:	c0 0e       	add	r12, r16
     840:	dc 2d       	mov	r29, r12
	uint8_t y_down_left = y - 1;
	while (x_down_left >= 0 && y_down_left >= 0 && get_piece_at(x_down_left, y_down_left) == next_player) {
     842:	02 c0       	rjmp	.+4      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
		x_down_left -= 1;
     844:	d1 50       	subi	r29, 0x01	; 1
		y_down_left -= 1;
     846:	ba 94       	dec	r11
	}
	
	// check the down-left direction
	uint8_t x_down_left = x - 1;
	uint8_t y_down_left = y - 1;
	while (x_down_left >= 0 && y_down_left >= 0 && get_piece_at(x_down_left, y_down_left) == next_player) {
     848:	6b 2d       	mov	r22, r11
     84a:	8d 2f       	mov	r24, r29
     84c:	0e 94 a5 02 	call	0x54a	; 0x54a <get_piece_at>
     850:	c8 17       	cp	r28, r24
     852:	c1 f3       	breq	.-16     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
		x_down_left -= 1;
		y_down_left -= 1;
	}
	if (x_down_left >= 0 && y_down_left >= 0 && distance(x, y, x_down_left, y_down_left) > 1 && board[x_down_left][y_down_left] == current_player) {
     854:	2b 2d       	mov	r18, r11
     856:	4d 2f       	mov	r20, r29
     858:	6f 2d       	mov	r22, r15
     85a:	80 2f       	mov	r24, r16
     85c:	0e 94 bb 02 	call	0x576	; 0x576 <distance>
     860:	82 30       	cpi	r24, 0x02	; 2
     862:	28 f1       	brcs	.+74     	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
     864:	ed 2f       	mov	r30, r29
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	ee 0f       	add	r30, r30
     86a:	ff 1f       	adc	r31, r31
     86c:	ee 0f       	add	r30, r30
     86e:	ff 1f       	adc	r31, r31
     870:	ee 0f       	add	r30, r30
     872:	ff 1f       	adc	r31, r31
     874:	e6 5a       	subi	r30, 0xA6	; 166
     876:	fe 4f       	sbci	r31, 0xFE	; 254
     878:	eb 0d       	add	r30, r11
     87a:	f1 1d       	adc	r31, r1
     87c:	80 81       	ld	r24, Z
     87e:	e8 12       	cpse	r14, r24
     880:	16 c0       	rjmp	.+44     	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
		valid_direction[x][y][5] = 1;
     882:	e0 2f       	mov	r30, r16
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	ee 0f       	add	r30, r30
     888:	ff 1f       	adc	r31, r31
     88a:	ee 0f       	add	r30, r30
     88c:	ff 1f       	adc	r31, r31
     88e:	ee 0f       	add	r30, r30
     890:	ff 1f       	adc	r31, r31
     892:	ef 0d       	add	r30, r15
     894:	f1 1d       	adc	r31, r1
     896:	ee 0f       	add	r30, r30
     898:	ff 1f       	adc	r31, r31
     89a:	ee 0f       	add	r30, r30
     89c:	ff 1f       	adc	r31, r31
     89e:	ee 0f       	add	r30, r30
     8a0:	ff 1f       	adc	r31, r31
     8a2:	e4 56       	subi	r30, 0x64	; 100
     8a4:	fe 4f       	sbci	r31, 0xFE	; 254
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	85 83       	std	Z+5, r24	; 0x05
		is_valid = 1;
     8aa:	dd 24       	eor	r13, r13
     8ac:	d3 94       	inc	r13
	}
	
	// check the left direction
	uint8_t x_left = x - 1;
     8ae:	dc 2d       	mov	r29, r12
	uint8_t y_left = y;
	while (x_left >= 0 && get_piece_at(x_left, y_left) == next_player) {
     8b0:	01 c0       	rjmp	.+2      	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
		x_left -= 1;
     8b2:	d1 50       	subi	r29, 0x01	; 1
	}
	
	// check the left direction
	uint8_t x_left = x - 1;
	uint8_t y_left = y;
	while (x_left >= 0 && get_piece_at(x_left, y_left) == next_player) {
     8b4:	6f 2d       	mov	r22, r15
     8b6:	8d 2f       	mov	r24, r29
     8b8:	0e 94 a5 02 	call	0x54a	; 0x54a <get_piece_at>
     8bc:	c8 17       	cp	r28, r24
     8be:	c9 f3       	breq	.-14     	; 0x8b2 <__DATA_REGION_LENGTH__+0xb2>
		x_left -= 1;
	}
	if (x_left >= 0 && distance(x, y, x_left, y_left) > 1 && board[x_left][y_left] == current_player) {
     8c0:	2f 2d       	mov	r18, r15
     8c2:	4d 2f       	mov	r20, r29
     8c4:	6f 2d       	mov	r22, r15
     8c6:	80 2f       	mov	r24, r16
     8c8:	0e 94 bb 02 	call	0x576	; 0x576 <distance>
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	50 f1       	brcs	.+84     	; 0x924 <__stack+0x25>
     8d0:	8f 2d       	mov	r24, r15
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	ed 2f       	mov	r30, r29
     8d6:	f0 e0       	ldi	r31, 0x00	; 0
     8d8:	ee 0f       	add	r30, r30
     8da:	ff 1f       	adc	r31, r31
     8dc:	ee 0f       	add	r30, r30
     8de:	ff 1f       	adc	r31, r31
     8e0:	ee 0f       	add	r30, r30
     8e2:	ff 1f       	adc	r31, r31
     8e4:	e6 5a       	subi	r30, 0xA6	; 166
     8e6:	fe 4f       	sbci	r31, 0xFE	; 254
     8e8:	e8 0f       	add	r30, r24
     8ea:	f9 1f       	adc	r31, r25
     8ec:	20 81       	ld	r18, Z
     8ee:	e2 12       	cpse	r14, r18
     8f0:	19 c0       	rjmp	.+50     	; 0x924 <__stack+0x25>
		valid_direction[x][y][6] = 1;
     8f2:	e0 2f       	mov	r30, r16
     8f4:	f0 e0       	ldi	r31, 0x00	; 0
     8f6:	ee 0f       	add	r30, r30
     8f8:	ff 1f       	adc	r31, r31
     8fa:	ee 0f       	add	r30, r30
     8fc:	ff 1f       	adc	r31, r31
     8fe:	ee 0f       	add	r30, r30
     900:	ff 1f       	adc	r31, r31
     902:	e8 0f       	add	r30, r24
     904:	f9 1f       	adc	r31, r25
     906:	ee 0f       	add	r30, r30
     908:	ff 1f       	adc	r31, r31
     90a:	ee 0f       	add	r30, r30
     90c:	ff 1f       	adc	r31, r31
     90e:	ee 0f       	add	r30, r30
     910:	ff 1f       	adc	r31, r31
     912:	e4 56       	subi	r30, 0x64	; 100
     914:	fe 4f       	sbci	r31, 0xFE	; 254
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	86 83       	std	Z+6, r24	; 0x06
		is_valid = 1;
     91a:	dd 24       	eor	r13, r13
     91c:	d3 94       	inc	r13
	}
	
	// check the up-left direction
	uint8_t x_up_left = x - 1;
	uint8_t y_up_left = y + 1;
	while (x_up_left >= 0 && y_up_left <= 7 && get_piece_at(x_up_left, y_up_left) == next_player) {
     91e:	02 c0       	rjmp	.+4      	; 0x924 <__stack+0x25>
		x_up_left -= 1;
     920:	ca 94       	dec	r12
		y_up_left += 1;
     922:	1f 5f       	subi	r17, 0xFF	; 255
	}
	
	// check the up-left direction
	uint8_t x_up_left = x - 1;
	uint8_t y_up_left = y + 1;
	while (x_up_left >= 0 && y_up_left <= 7 && get_piece_at(x_up_left, y_up_left) == next_player) {
     924:	18 30       	cpi	r17, 0x08	; 8
     926:	30 f4       	brcc	.+12     	; 0x934 <__stack+0x35>
     928:	61 2f       	mov	r22, r17
     92a:	8c 2d       	mov	r24, r12
     92c:	0e 94 a5 02 	call	0x54a	; 0x54a <get_piece_at>
     930:	c8 17       	cp	r28, r24
     932:	b1 f3       	breq	.-20     	; 0x920 <__stack+0x21>
		x_up_left -= 1;
		y_up_left += 1;
	}
	if (x_up_left >= 0 && y_up_left <= 7 && distance(x, y, x_up_left, y_up_left) > 1 && board[x_up_left][y_up_left] == current_player) {
     934:	18 30       	cpi	r17, 0x08	; 8
     936:	68 f5       	brcc	.+90     	; 0x992 <__stack+0x93>
     938:	21 2f       	mov	r18, r17
     93a:	4c 2d       	mov	r20, r12
     93c:	6f 2d       	mov	r22, r15
     93e:	80 2f       	mov	r24, r16
     940:	0e 94 bb 02 	call	0x576	; 0x576 <distance>
     944:	82 30       	cpi	r24, 0x02	; 2
     946:	28 f1       	brcs	.+74     	; 0x992 <__stack+0x93>
     948:	ec 2d       	mov	r30, r12
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	ee 0f       	add	r30, r30
     94e:	ff 1f       	adc	r31, r31
     950:	ee 0f       	add	r30, r30
     952:	ff 1f       	adc	r31, r31
     954:	ee 0f       	add	r30, r30
     956:	ff 1f       	adc	r31, r31
     958:	e6 5a       	subi	r30, 0xA6	; 166
     95a:	fe 4f       	sbci	r31, 0xFE	; 254
     95c:	e1 0f       	add	r30, r17
     95e:	f1 1d       	adc	r31, r1
     960:	80 81       	ld	r24, Z
     962:	e8 12       	cpse	r14, r24
     964:	16 c0       	rjmp	.+44     	; 0x992 <__stack+0x93>
		valid_direction[x][y][7] = 1;
     966:	e0 2f       	mov	r30, r16
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	ee 0f       	add	r30, r30
     96c:	ff 1f       	adc	r31, r31
     96e:	ee 0f       	add	r30, r30
     970:	ff 1f       	adc	r31, r31
     972:	ee 0f       	add	r30, r30
     974:	ff 1f       	adc	r31, r31
     976:	ef 0d       	add	r30, r15
     978:	f1 1d       	adc	r31, r1
     97a:	ee 0f       	add	r30, r30
     97c:	ff 1f       	adc	r31, r31
     97e:	ee 0f       	add	r30, r30
     980:	ff 1f       	adc	r31, r31
     982:	ee 0f       	add	r30, r30
     984:	ff 1f       	adc	r31, r31
     986:	e4 56       	subi	r30, 0x64	; 100
     988:	fe 4f       	sbci	r31, 0xFE	; 254
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	87 83       	std	Z+7, r24	; 0x07
		is_valid = 1;
     98e:	dd 24       	eor	r13, r13
     990:	d3 94       	inc	r13
	}
	return is_valid;
}
     992:	8d 2d       	mov	r24, r13
     994:	df 91       	pop	r29
     996:	cf 91       	pop	r28
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	cf 90       	pop	r12
     9a4:	bf 90       	pop	r11
     9a6:	08 95       	ret

000009a8 <flash_cursor>:
		//if in the bounds, just index into the array
		return board[x][y];
	}
}

void flash_cursor(void) {
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
	
	if (cursor_visible) {
     9ac:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <cursor_visible>
     9b0:	88 23       	and	r24, r24
     9b2:	71 f0       	breq	.+28     	; 0x9d0 <flash_cursor+0x28>
		// we need to flash the cursor off, it should be replaced by
		// the colour of the piece which is at that location
		uint8_t piece_at_cursor = get_piece_at(cursor_x, cursor_y);
     9b4:	d0 91 59 01 	lds	r29, 0x0159	; 0x800159 <cursor_y>
     9b8:	c0 91 9c 03 	lds	r28, 0x039C	; 0x80039c <cursor_x>
     9bc:	6d 2f       	mov	r22, r29
     9be:	8c 2f       	mov	r24, r28
     9c0:	0e 94 a5 02 	call	0x54a	; 0x54a <get_piece_at>
		update_square_colour(cursor_x, cursor_y, piece_at_cursor);
     9c4:	48 2f       	mov	r20, r24
     9c6:	6d 2f       	mov	r22, r29
     9c8:	8c 2f       	mov	r24, r28
     9ca:	0e 94 05 02 	call	0x40a	; 0x40a <update_square_colour>
     9ce:	17 c0       	rjmp	.+46     	; 0x9fe <flash_cursor+0x56>
		
	} else {
		// we need to flash the cursor on
		if (check_valid_place(cursor_x, cursor_y)) {
     9d0:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <cursor_y>
     9d4:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <cursor_x>
     9d8:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <check_valid_place>
     9dc:	88 23       	and	r24, r24
     9de:	41 f0       	breq	.+16     	; 0x9f0 <flash_cursor+0x48>
			update_square_colour(cursor_x, cursor_y, CURSOR);
     9e0:	43 e0       	ldi	r20, 0x03	; 3
     9e2:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <cursor_y>
     9e6:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <cursor_x>
     9ea:	0e 94 05 02 	call	0x40a	; 0x40a <update_square_colour>
     9ee:	07 c0       	rjmp	.+14     	; 0x9fe <flash_cursor+0x56>
		} else {
			update_square_colour(cursor_x, cursor_y, ILLEGAL_CURSOR);
     9f0:	44 e0       	ldi	r20, 0x04	; 4
     9f2:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <cursor_y>
     9f6:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <cursor_x>
     9fa:	0e 94 05 02 	call	0x40a	; 0x40a <update_square_colour>
		}
	}
	cursor_visible = 1 - cursor_visible; //alternate between 0 and 1
     9fe:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <cursor_visible>
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	89 1b       	sub	r24, r25
     a06:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <cursor_visible>
}
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	08 95       	ret

00000a10 <move_display_cursor>:

//check the header file game.h for a description of what this function should do
// (it may contain some hints as to how to move the pieces)
void move_display_cursor(uint8_t dx, uint8_t dy) {
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
     a14:	d8 2f       	mov	r29, r24
     a16:	c6 2f       	mov	r28, r22
	//YOUR CODE HERE
	// We need to flash the cursor off, it should be replaced by 
	// the colour of the piece which is at that location
	cursor_visible = 1;
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <cursor_visible>
	flash_cursor();
     a1e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <flash_cursor>
	// Update the position of the cursor
	cursor_x = (cursor_x + dx) % WIDTH;
     a22:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <cursor_x>
     a26:	8d 0f       	add	r24, r29
     a28:	87 70       	andi	r24, 0x07	; 7
     a2a:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <cursor_x>
	cursor_y = (cursor_y + dy) % HEIGHT;
     a2e:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <cursor_y>
     a32:	6c 0f       	add	r22, r28
     a34:	67 70       	andi	r22, 0x07	; 7
     a36:	60 93 59 01 	sts	0x0159, r22	; 0x800159 <cursor_y>
	// Display the cursor at the new location
	cursor_visible = 0;
     a3a:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <cursor_visible>
	flash_cursor();
     a3e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <flash_cursor>
	 *		(and replace it with whatever piece is at that location)
	 * 2: update the positional knowledge of the cursor, this will include
	 *		variables cursor_x, cursor_y and cursor_visible
	 * 3: display the cursor at the new location
	 */
}
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	08 95       	ret

00000a48 <flip_piece>:
		is_valid = 1;
	}
	return is_valid;
}

void flip_piece(uint8_t x, uint8_t y) {
     a48:	af 92       	push	r10
     a4a:	bf 92       	push	r11
     a4c:	cf 92       	push	r12
     a4e:	df 92       	push	r13
     a50:	ef 92       	push	r14
     a52:	ff 92       	push	r15
     a54:	0f 93       	push	r16
     a56:	1f 93       	push	r17
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	d8 2e       	mov	r13, r24
     a5e:	e6 2e       	mov	r14, r22
	uint8_t next_player_for_flip;
	if (current_player == PLAYER_1) {
     a60:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <current_player>
     a64:	81 30       	cpi	r24, 0x01	; 1
     a66:	21 f4       	brne	.+8      	; 0xa70 <flip_piece+0x28>
		next_player_for_flip = PLAYER_2;
     a68:	68 94       	set
     a6a:	ff 24       	eor	r15, r15
     a6c:	f1 f8       	bld	r15, 1
     a6e:	02 c0       	rjmp	.+4      	; 0xa74 <flip_piece+0x2c>
	} else {
		next_player_for_flip = PLAYER_1;
     a70:	ff 24       	eor	r15, r15
     a72:	f3 94       	inc	r15
	
	uint8_t x_for_flip;
	uint8_t y_for_flip;
	
	// flip up direction
	if (valid_direction[x][y][0]) {
     a74:	0d 2d       	mov	r16, r13
     a76:	10 e0       	ldi	r17, 0x00	; 0
     a78:	ce 2d       	mov	r28, r14
     a7a:	d0 e0       	ldi	r29, 0x00	; 0
     a7c:	f8 01       	movw	r30, r16
     a7e:	ee 0f       	add	r30, r30
     a80:	ff 1f       	adc	r31, r31
     a82:	ee 0f       	add	r30, r30
     a84:	ff 1f       	adc	r31, r31
     a86:	ee 0f       	add	r30, r30
     a88:	ff 1f       	adc	r31, r31
     a8a:	ec 0f       	add	r30, r28
     a8c:	fd 1f       	adc	r31, r29
     a8e:	ee 0f       	add	r30, r30
     a90:	ff 1f       	adc	r31, r31
     a92:	ee 0f       	add	r30, r30
     a94:	ff 1f       	adc	r31, r31
     a96:	ee 0f       	add	r30, r30
     a98:	ff 1f       	adc	r31, r31
     a9a:	e4 56       	subi	r30, 0x64	; 100
     a9c:	fe 4f       	sbci	r31, 0xFE	; 254
     a9e:	80 81       	ld	r24, Z
     aa0:	88 23       	and	r24, r24
     aa2:	81 f1       	breq	.+96     	; 0xb04 <flip_piece+0xbc>
		x_for_flip = x;
		y_for_flip = y + 1;
     aa4:	cc 24       	eor	r12, r12
     aa6:	c3 94       	inc	r12
     aa8:	ce 0c       	add	r12, r14
		while (board[x_for_flip][y_for_flip] == next_player_for_flip) {
     aaa:	1c c0       	rjmp	.+56     	; 0xae4 <flip_piece+0x9c>
			board[x_for_flip][y_for_flip] = current_player;
     aac:	40 91 9a 01 	lds	r20, 0x019A	; 0x80019a <current_player>
     ab0:	98 01       	movw	r18, r16
     ab2:	22 0f       	add	r18, r18
     ab4:	33 1f       	adc	r19, r19
     ab6:	22 0f       	add	r18, r18
     ab8:	33 1f       	adc	r19, r19
     aba:	22 0f       	add	r18, r18
     abc:	33 1f       	adc	r19, r19
     abe:	b9 01       	movw	r22, r18
     ac0:	66 5a       	subi	r22, 0xA6	; 166
     ac2:	7e 4f       	sbci	r23, 0xFE	; 254
     ac4:	5b 01       	movw	r10, r22
     ac6:	fb 01       	movw	r30, r22
     ac8:	e8 0f       	add	r30, r24
     aca:	f9 1f       	adc	r31, r25
     acc:	40 83       	st	Z, r20
			update_square_colour(x_for_flip, y_for_flip, board[x_for_flip][y_for_flip]);
     ace:	6c 2d       	mov	r22, r12
     ad0:	8d 2d       	mov	r24, r13
     ad2:	0e 94 05 02 	call	0x40a	; 0x40a <update_square_colour>
			flip_piece_score(board[x][y]);
     ad6:	f5 01       	movw	r30, r10
     ad8:	ec 0f       	add	r30, r28
     ada:	fd 1f       	adc	r31, r29
     adc:	80 81       	ld	r24, Z
     ade:	0e 94 37 0a 	call	0x146e	; 0x146e <flip_piece_score>
			y_for_flip++;
     ae2:	c3 94       	inc	r12
	
	// flip up direction
	if (valid_direction[x][y][0]) {
		x_for_flip = x;
		y_for_flip = y + 1;
		while (board[x_for_flip][y_for_flip] == next_player_for_flip) {
     ae4:	8c 2d       	mov	r24, r12
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	f8 01       	movw	r30, r16
     aea:	ee 0f       	add	r30, r30
     aec:	ff 1f       	adc	r31, r31
     aee:	ee 0f       	add	r30, r30
     af0:	ff 1f       	adc	r31, r31
     af2:	ee 0f       	add	r30, r30
     af4:	ff 1f       	adc	r31, r31
     af6:	e6 5a       	subi	r30, 0xA6	; 166
     af8:	fe 4f       	sbci	r31, 0xFE	; 254
     afa:	e8 0f       	add	r30, r24
     afc:	f9 1f       	adc	r31, r25
     afe:	20 81       	ld	r18, Z
     b00:	f2 16       	cp	r15, r18
     b02:	a1 f2       	breq	.-88     	; 0xaac <flip_piece+0x64>
			y_for_flip++;
		}
	}
	
	// flip the up-right
	if (valid_direction[x][y][1]) {
     b04:	f8 01       	movw	r30, r16
     b06:	ee 0f       	add	r30, r30
     b08:	ff 1f       	adc	r31, r31
     b0a:	ee 0f       	add	r30, r30
     b0c:	ff 1f       	adc	r31, r31
     b0e:	ee 0f       	add	r30, r30
     b10:	ff 1f       	adc	r31, r31
     b12:	ec 0f       	add	r30, r28
     b14:	fd 1f       	adc	r31, r29
     b16:	ee 0f       	add	r30, r30
     b18:	ff 1f       	adc	r31, r31
     b1a:	ee 0f       	add	r30, r30
     b1c:	ff 1f       	adc	r31, r31
     b1e:	ee 0f       	add	r30, r30
     b20:	ff 1f       	adc	r31, r31
     b22:	e4 56       	subi	r30, 0x64	; 100
     b24:	fe 4f       	sbci	r31, 0xFE	; 254
     b26:	81 81       	ldd	r24, Z+1	; 0x01
     b28:	88 23       	and	r24, r24
     b2a:	d9 f1       	breq	.+118    	; 0xba2 <flip_piece+0x15a>
		x_for_flip = x + 1;
     b2c:	bb 24       	eor	r11, r11
     b2e:	b3 94       	inc	r11
     b30:	bd 0c       	add	r11, r13
		y_for_flip = y + 1;
     b32:	cc 24       	eor	r12, r12
     b34:	c3 94       	inc	r12
     b36:	ce 0c       	add	r12, r14
		while (board[x_for_flip][y_for_flip] == next_player_for_flip) {
     b38:	22 c0       	rjmp	.+68     	; 0xb7e <flip_piece+0x136>
			board[x_for_flip][y_for_flip] = current_player;
     b3a:	40 91 9a 01 	lds	r20, 0x019A	; 0x80019a <current_player>
     b3e:	fc 01       	movw	r30, r24
     b40:	ee 0f       	add	r30, r30
     b42:	ff 1f       	adc	r31, r31
     b44:	ee 0f       	add	r30, r30
     b46:	ff 1f       	adc	r31, r31
     b48:	ee 0f       	add	r30, r30
     b4a:	ff 1f       	adc	r31, r31
     b4c:	e6 5a       	subi	r30, 0xA6	; 166
     b4e:	fe 4f       	sbci	r31, 0xFE	; 254
     b50:	e2 0f       	add	r30, r18
     b52:	f3 1f       	adc	r31, r19
     b54:	40 83       	st	Z, r20
			update_square_colour(x_for_flip, y_for_flip, board[x_for_flip][y_for_flip]);
     b56:	6c 2d       	mov	r22, r12
     b58:	8b 2d       	mov	r24, r11
     b5a:	0e 94 05 02 	call	0x40a	; 0x40a <update_square_colour>
			flip_piece_score(board[x][y]);
     b5e:	f8 01       	movw	r30, r16
     b60:	ee 0f       	add	r30, r30
     b62:	ff 1f       	adc	r31, r31
     b64:	ee 0f       	add	r30, r30
     b66:	ff 1f       	adc	r31, r31
     b68:	ee 0f       	add	r30, r30
     b6a:	ff 1f       	adc	r31, r31
     b6c:	e6 5a       	subi	r30, 0xA6	; 166
     b6e:	fe 4f       	sbci	r31, 0xFE	; 254
     b70:	ec 0f       	add	r30, r28
     b72:	fd 1f       	adc	r31, r29
     b74:	80 81       	ld	r24, Z
     b76:	0e 94 37 0a 	call	0x146e	; 0x146e <flip_piece_score>
			x_for_flip++;
     b7a:	b3 94       	inc	r11
			y_for_flip++;
     b7c:	c3 94       	inc	r12
	
	// flip the up-right
	if (valid_direction[x][y][1]) {
		x_for_flip = x + 1;
		y_for_flip = y + 1;
		while (board[x_for_flip][y_for_flip] == next_player_for_flip) {
     b7e:	8b 2d       	mov	r24, r11
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	2c 2d       	mov	r18, r12
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	fc 01       	movw	r30, r24
     b88:	ee 0f       	add	r30, r30
     b8a:	ff 1f       	adc	r31, r31
     b8c:	ee 0f       	add	r30, r30
     b8e:	ff 1f       	adc	r31, r31
     b90:	ee 0f       	add	r30, r30
     b92:	ff 1f       	adc	r31, r31
     b94:	e6 5a       	subi	r30, 0xA6	; 166
     b96:	fe 4f       	sbci	r31, 0xFE	; 254
     b98:	e2 0f       	add	r30, r18
     b9a:	f3 1f       	adc	r31, r19
     b9c:	40 81       	ld	r20, Z
     b9e:	f4 16       	cp	r15, r20
     ba0:	61 f2       	breq	.-104    	; 0xb3a <flip_piece+0xf2>
			y_for_flip++;
		}
	}
	
	// flip the right direction
	if (valid_direction[x][y][2]) {
     ba2:	f8 01       	movw	r30, r16
     ba4:	ee 0f       	add	r30, r30
     ba6:	ff 1f       	adc	r31, r31
     ba8:	ee 0f       	add	r30, r30
     baa:	ff 1f       	adc	r31, r31
     bac:	ee 0f       	add	r30, r30
     bae:	ff 1f       	adc	r31, r31
     bb0:	ec 0f       	add	r30, r28
     bb2:	fd 1f       	adc	r31, r29
     bb4:	ee 0f       	add	r30, r30
     bb6:	ff 1f       	adc	r31, r31
     bb8:	ee 0f       	add	r30, r30
     bba:	ff 1f       	adc	r31, r31
     bbc:	ee 0f       	add	r30, r30
     bbe:	ff 1f       	adc	r31, r31
     bc0:	e4 56       	subi	r30, 0x64	; 100
     bc2:	fe 4f       	sbci	r31, 0xFE	; 254
     bc4:	82 81       	ldd	r24, Z+2	; 0x02
     bc6:	88 23       	and	r24, r24
     bc8:	a9 f1       	breq	.+106    	; 0xc34 <flip_piece+0x1ec>
		x_for_flip = x + 1;
     bca:	cc 24       	eor	r12, r12
     bcc:	c3 94       	inc	r12
     bce:	cd 0c       	add	r12, r13
		y_for_flip = y;
		while (board[x_for_flip][y_for_flip] == next_player_for_flip) {
     bd0:	21 c0       	rjmp	.+66     	; 0xc14 <flip_piece+0x1cc>
			board[x_for_flip][y_for_flip] = current_player;
     bd2:	40 91 9a 01 	lds	r20, 0x019A	; 0x80019a <current_player>
     bd6:	fc 01       	movw	r30, r24
     bd8:	ee 0f       	add	r30, r30
     bda:	ff 1f       	adc	r31, r31
     bdc:	ee 0f       	add	r30, r30
     bde:	ff 1f       	adc	r31, r31
     be0:	ee 0f       	add	r30, r30
     be2:	ff 1f       	adc	r31, r31
     be4:	e6 5a       	subi	r30, 0xA6	; 166
     be6:	fe 4f       	sbci	r31, 0xFE	; 254
     be8:	ec 0f       	add	r30, r28
     bea:	fd 1f       	adc	r31, r29
     bec:	40 83       	st	Z, r20
			update_square_colour(x_for_flip, y_for_flip, board[x_for_flip][y_for_flip]);
     bee:	6e 2d       	mov	r22, r14
     bf0:	8c 2d       	mov	r24, r12
     bf2:	0e 94 05 02 	call	0x40a	; 0x40a <update_square_colour>
			flip_piece_score(board[x][y]);
     bf6:	f8 01       	movw	r30, r16
     bf8:	ee 0f       	add	r30, r30
     bfa:	ff 1f       	adc	r31, r31
     bfc:	ee 0f       	add	r30, r30
     bfe:	ff 1f       	adc	r31, r31
     c00:	ee 0f       	add	r30, r30
     c02:	ff 1f       	adc	r31, r31
     c04:	e6 5a       	subi	r30, 0xA6	; 166
     c06:	fe 4f       	sbci	r31, 0xFE	; 254
     c08:	ec 0f       	add	r30, r28
     c0a:	fd 1f       	adc	r31, r29
     c0c:	80 81       	ld	r24, Z
     c0e:	0e 94 37 0a 	call	0x146e	; 0x146e <flip_piece_score>
			x_for_flip++;
     c12:	c3 94       	inc	r12
	
	// flip the right direction
	if (valid_direction[x][y][2]) {
		x_for_flip = x + 1;
		y_for_flip = y;
		while (board[x_for_flip][y_for_flip] == next_player_for_flip) {
     c14:	8c 2d       	mov	r24, r12
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	fc 01       	movw	r30, r24
     c1a:	ee 0f       	add	r30, r30
     c1c:	ff 1f       	adc	r31, r31
     c1e:	ee 0f       	add	r30, r30
     c20:	ff 1f       	adc	r31, r31
     c22:	ee 0f       	add	r30, r30
     c24:	ff 1f       	adc	r31, r31
     c26:	e6 5a       	subi	r30, 0xA6	; 166
     c28:	fe 4f       	sbci	r31, 0xFE	; 254
     c2a:	ec 0f       	add	r30, r28
     c2c:	fd 1f       	adc	r31, r29
     c2e:	20 81       	ld	r18, Z
     c30:	f2 16       	cp	r15, r18
     c32:	79 f2       	breq	.-98     	; 0xbd2 <flip_piece+0x18a>
			x_for_flip++;
		}
	}
	
	// flip the down-right direction
	if (valid_direction[x][y][3]) {
     c34:	f8 01       	movw	r30, r16
     c36:	ee 0f       	add	r30, r30
     c38:	ff 1f       	adc	r31, r31
     c3a:	ee 0f       	add	r30, r30
     c3c:	ff 1f       	adc	r31, r31
     c3e:	ee 0f       	add	r30, r30
     c40:	ff 1f       	adc	r31, r31
     c42:	ec 0f       	add	r30, r28
     c44:	fd 1f       	adc	r31, r29
     c46:	ee 0f       	add	r30, r30
     c48:	ff 1f       	adc	r31, r31
     c4a:	ee 0f       	add	r30, r30
     c4c:	ff 1f       	adc	r31, r31
     c4e:	ee 0f       	add	r30, r30
     c50:	ff 1f       	adc	r31, r31
     c52:	e4 56       	subi	r30, 0x64	; 100
     c54:	fe 4f       	sbci	r31, 0xFE	; 254
     c56:	83 81       	ldd	r24, Z+3	; 0x03
     c58:	88 23       	and	r24, r24
     c5a:	d9 f1       	breq	.+118    	; 0xcd2 <flip_piece+0x28a>
		x_for_flip = x + 1;
     c5c:	bb 24       	eor	r11, r11
     c5e:	b3 94       	inc	r11
     c60:	bd 0c       	add	r11, r13
		y_for_flip = y - 1;
     c62:	cc 24       	eor	r12, r12
     c64:	ca 94       	dec	r12
     c66:	ce 0c       	add	r12, r14
		while (board[x_for_flip][y_for_flip] == next_player_for_flip) {
     c68:	22 c0       	rjmp	.+68     	; 0xcae <flip_piece+0x266>
			board[x_for_flip][y_for_flip] = current_player;
     c6a:	40 91 9a 01 	lds	r20, 0x019A	; 0x80019a <current_player>
     c6e:	fc 01       	movw	r30, r24
     c70:	ee 0f       	add	r30, r30
     c72:	ff 1f       	adc	r31, r31
     c74:	ee 0f       	add	r30, r30
     c76:	ff 1f       	adc	r31, r31
     c78:	ee 0f       	add	r30, r30
     c7a:	ff 1f       	adc	r31, r31
     c7c:	e6 5a       	subi	r30, 0xA6	; 166
     c7e:	fe 4f       	sbci	r31, 0xFE	; 254
     c80:	e2 0f       	add	r30, r18
     c82:	f3 1f       	adc	r31, r19
     c84:	40 83       	st	Z, r20
			update_square_colour(x_for_flip, y_for_flip, board[x_for_flip][y_for_flip]);
     c86:	6c 2d       	mov	r22, r12
     c88:	8b 2d       	mov	r24, r11
     c8a:	0e 94 05 02 	call	0x40a	; 0x40a <update_square_colour>
			flip_piece_score(board[x][y]);
     c8e:	f8 01       	movw	r30, r16
     c90:	ee 0f       	add	r30, r30
     c92:	ff 1f       	adc	r31, r31
     c94:	ee 0f       	add	r30, r30
     c96:	ff 1f       	adc	r31, r31
     c98:	ee 0f       	add	r30, r30
     c9a:	ff 1f       	adc	r31, r31
     c9c:	e6 5a       	subi	r30, 0xA6	; 166
     c9e:	fe 4f       	sbci	r31, 0xFE	; 254
     ca0:	ec 0f       	add	r30, r28
     ca2:	fd 1f       	adc	r31, r29
     ca4:	80 81       	ld	r24, Z
     ca6:	0e 94 37 0a 	call	0x146e	; 0x146e <flip_piece_score>
			x_for_flip++;
     caa:	b3 94       	inc	r11
			y_for_flip--;
     cac:	ca 94       	dec	r12
	
	// flip the down-right direction
	if (valid_direction[x][y][3]) {
		x_for_flip = x + 1;
		y_for_flip = y - 1;
		while (board[x_for_flip][y_for_flip] == next_player_for_flip) {
     cae:	8b 2d       	mov	r24, r11
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	2c 2d       	mov	r18, r12
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	fc 01       	movw	r30, r24
     cb8:	ee 0f       	add	r30, r30
     cba:	ff 1f       	adc	r31, r31
     cbc:	ee 0f       	add	r30, r30
     cbe:	ff 1f       	adc	r31, r31
     cc0:	ee 0f       	add	r30, r30
     cc2:	ff 1f       	adc	r31, r31
     cc4:	e6 5a       	subi	r30, 0xA6	; 166
     cc6:	fe 4f       	sbci	r31, 0xFE	; 254
     cc8:	e2 0f       	add	r30, r18
     cca:	f3 1f       	adc	r31, r19
     ccc:	40 81       	ld	r20, Z
     cce:	f4 16       	cp	r15, r20
     cd0:	61 f2       	breq	.-104    	; 0xc6a <flip_piece+0x222>
			y_for_flip--;
		}
	}
	
	// flip the down direction
	if (valid_direction[x][y][4]) {
     cd2:	f8 01       	movw	r30, r16
     cd4:	ee 0f       	add	r30, r30
     cd6:	ff 1f       	adc	r31, r31
     cd8:	ee 0f       	add	r30, r30
     cda:	ff 1f       	adc	r31, r31
     cdc:	ee 0f       	add	r30, r30
     cde:	ff 1f       	adc	r31, r31
     ce0:	ec 0f       	add	r30, r28
     ce2:	fd 1f       	adc	r31, r29
     ce4:	ee 0f       	add	r30, r30
     ce6:	ff 1f       	adc	r31, r31
     ce8:	ee 0f       	add	r30, r30
     cea:	ff 1f       	adc	r31, r31
     cec:	ee 0f       	add	r30, r30
     cee:	ff 1f       	adc	r31, r31
     cf0:	e4 56       	subi	r30, 0x64	; 100
     cf2:	fe 4f       	sbci	r31, 0xFE	; 254
     cf4:	84 81       	ldd	r24, Z+4	; 0x04
     cf6:	88 23       	and	r24, r24
     cf8:	81 f1       	breq	.+96     	; 0xd5a <flip_piece+0x312>
		x_for_flip = x;
		y_for_flip = y - 1;
     cfa:	cc 24       	eor	r12, r12
     cfc:	ca 94       	dec	r12
     cfe:	ce 0c       	add	r12, r14
		while (board[x_for_flip][y_for_flip] == next_player_for_flip) {
     d00:	1c c0       	rjmp	.+56     	; 0xd3a <flip_piece+0x2f2>
			board[x_for_flip][y_for_flip] = current_player;
     d02:	40 91 9a 01 	lds	r20, 0x019A	; 0x80019a <current_player>
     d06:	98 01       	movw	r18, r16
     d08:	22 0f       	add	r18, r18
     d0a:	33 1f       	adc	r19, r19
     d0c:	22 0f       	add	r18, r18
     d0e:	33 1f       	adc	r19, r19
     d10:	22 0f       	add	r18, r18
     d12:	33 1f       	adc	r19, r19
     d14:	b9 01       	movw	r22, r18
     d16:	66 5a       	subi	r22, 0xA6	; 166
     d18:	7e 4f       	sbci	r23, 0xFE	; 254
     d1a:	5b 01       	movw	r10, r22
     d1c:	fb 01       	movw	r30, r22
     d1e:	e8 0f       	add	r30, r24
     d20:	f9 1f       	adc	r31, r25
     d22:	40 83       	st	Z, r20
			update_square_colour(x_for_flip, y_for_flip, board[x_for_flip][y_for_flip]);
     d24:	6c 2d       	mov	r22, r12
     d26:	8d 2d       	mov	r24, r13
     d28:	0e 94 05 02 	call	0x40a	; 0x40a <update_square_colour>
			flip_piece_score(board[x][y]);
     d2c:	f5 01       	movw	r30, r10
     d2e:	ec 0f       	add	r30, r28
     d30:	fd 1f       	adc	r31, r29
     d32:	80 81       	ld	r24, Z
     d34:	0e 94 37 0a 	call	0x146e	; 0x146e <flip_piece_score>
			y_for_flip--;
     d38:	ca 94       	dec	r12
	
	// flip the down direction
	if (valid_direction[x][y][4]) {
		x_for_flip = x;
		y_for_flip = y - 1;
		while (board[x_for_flip][y_for_flip] == next_player_for_flip) {
     d3a:	8c 2d       	mov	r24, r12
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	f8 01       	movw	r30, r16
     d40:	ee 0f       	add	r30, r30
     d42:	ff 1f       	adc	r31, r31
     d44:	ee 0f       	add	r30, r30
     d46:	ff 1f       	adc	r31, r31
     d48:	ee 0f       	add	r30, r30
     d4a:	ff 1f       	adc	r31, r31
     d4c:	e6 5a       	subi	r30, 0xA6	; 166
     d4e:	fe 4f       	sbci	r31, 0xFE	; 254
     d50:	e8 0f       	add	r30, r24
     d52:	f9 1f       	adc	r31, r25
     d54:	20 81       	ld	r18, Z
     d56:	f2 16       	cp	r15, r18
     d58:	a1 f2       	breq	.-88     	; 0xd02 <flip_piece+0x2ba>
			y_for_flip--;
		}
	}
	
	// flip the down-left direction
	if (valid_direction[x][y][5]) {
     d5a:	f8 01       	movw	r30, r16
     d5c:	ee 0f       	add	r30, r30
     d5e:	ff 1f       	adc	r31, r31
     d60:	ee 0f       	add	r30, r30
     d62:	ff 1f       	adc	r31, r31
     d64:	ee 0f       	add	r30, r30
     d66:	ff 1f       	adc	r31, r31
     d68:	ec 0f       	add	r30, r28
     d6a:	fd 1f       	adc	r31, r29
     d6c:	ee 0f       	add	r30, r30
     d6e:	ff 1f       	adc	r31, r31
     d70:	ee 0f       	add	r30, r30
     d72:	ff 1f       	adc	r31, r31
     d74:	ee 0f       	add	r30, r30
     d76:	ff 1f       	adc	r31, r31
     d78:	e4 56       	subi	r30, 0x64	; 100
     d7a:	fe 4f       	sbci	r31, 0xFE	; 254
     d7c:	85 81       	ldd	r24, Z+5	; 0x05
     d7e:	88 23       	and	r24, r24
     d80:	d9 f1       	breq	.+118    	; 0xdf8 <flip_piece+0x3b0>
		x_for_flip = x - 1;
     d82:	bb 24       	eor	r11, r11
     d84:	ba 94       	dec	r11
     d86:	bd 0c       	add	r11, r13
		y_for_flip = y - 1;
     d88:	cc 24       	eor	r12, r12
     d8a:	ca 94       	dec	r12
     d8c:	ce 0c       	add	r12, r14
		while (board[x_for_flip][y_for_flip] == next_player_for_flip) {
     d8e:	22 c0       	rjmp	.+68     	; 0xdd4 <flip_piece+0x38c>
			board[x_for_flip][y_for_flip] = current_player;
     d90:	40 91 9a 01 	lds	r20, 0x019A	; 0x80019a <current_player>
     d94:	f9 01       	movw	r30, r18
     d96:	ee 0f       	add	r30, r30
     d98:	ff 1f       	adc	r31, r31
     d9a:	ee 0f       	add	r30, r30
     d9c:	ff 1f       	adc	r31, r31
     d9e:	ee 0f       	add	r30, r30
     da0:	ff 1f       	adc	r31, r31
     da2:	e6 5a       	subi	r30, 0xA6	; 166
     da4:	fe 4f       	sbci	r31, 0xFE	; 254
     da6:	e8 0f       	add	r30, r24
     da8:	f9 1f       	adc	r31, r25
     daa:	40 83       	st	Z, r20
			update_square_colour(x_for_flip, y_for_flip, board[x_for_flip][y_for_flip]);
     dac:	6c 2d       	mov	r22, r12
     dae:	8b 2d       	mov	r24, r11
     db0:	0e 94 05 02 	call	0x40a	; 0x40a <update_square_colour>
			flip_piece_score(board[x][y]);
     db4:	f8 01       	movw	r30, r16
     db6:	ee 0f       	add	r30, r30
     db8:	ff 1f       	adc	r31, r31
     dba:	ee 0f       	add	r30, r30
     dbc:	ff 1f       	adc	r31, r31
     dbe:	ee 0f       	add	r30, r30
     dc0:	ff 1f       	adc	r31, r31
     dc2:	e6 5a       	subi	r30, 0xA6	; 166
     dc4:	fe 4f       	sbci	r31, 0xFE	; 254
     dc6:	ec 0f       	add	r30, r28
     dc8:	fd 1f       	adc	r31, r29
     dca:	80 81       	ld	r24, Z
     dcc:	0e 94 37 0a 	call	0x146e	; 0x146e <flip_piece_score>
			x_for_flip--;
     dd0:	ba 94       	dec	r11
			y_for_flip--;
     dd2:	ca 94       	dec	r12
	
	// flip the down-left direction
	if (valid_direction[x][y][5]) {
		x_for_flip = x - 1;
		y_for_flip = y - 1;
		while (board[x_for_flip][y_for_flip] == next_player_for_flip) {
     dd4:	2b 2d       	mov	r18, r11
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	8c 2d       	mov	r24, r12
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	f9 01       	movw	r30, r18
     dde:	ee 0f       	add	r30, r30
     de0:	ff 1f       	adc	r31, r31
     de2:	ee 0f       	add	r30, r30
     de4:	ff 1f       	adc	r31, r31
     de6:	ee 0f       	add	r30, r30
     de8:	ff 1f       	adc	r31, r31
     dea:	e6 5a       	subi	r30, 0xA6	; 166
     dec:	fe 4f       	sbci	r31, 0xFE	; 254
     dee:	e8 0f       	add	r30, r24
     df0:	f9 1f       	adc	r31, r25
     df2:	40 81       	ld	r20, Z
     df4:	f4 16       	cp	r15, r20
     df6:	61 f2       	breq	.-104    	; 0xd90 <flip_piece+0x348>
			y_for_flip--;
		}
	}
	
	// flip the left direction
	if (valid_direction[x][y][6]) {
     df8:	f8 01       	movw	r30, r16
     dfa:	ee 0f       	add	r30, r30
     dfc:	ff 1f       	adc	r31, r31
     dfe:	ee 0f       	add	r30, r30
     e00:	ff 1f       	adc	r31, r31
     e02:	ee 0f       	add	r30, r30
     e04:	ff 1f       	adc	r31, r31
     e06:	ec 0f       	add	r30, r28
     e08:	fd 1f       	adc	r31, r29
     e0a:	ee 0f       	add	r30, r30
     e0c:	ff 1f       	adc	r31, r31
     e0e:	ee 0f       	add	r30, r30
     e10:	ff 1f       	adc	r31, r31
     e12:	ee 0f       	add	r30, r30
     e14:	ff 1f       	adc	r31, r31
     e16:	e4 56       	subi	r30, 0x64	; 100
     e18:	fe 4f       	sbci	r31, 0xFE	; 254
     e1a:	86 81       	ldd	r24, Z+6	; 0x06
     e1c:	88 23       	and	r24, r24
     e1e:	a9 f1       	breq	.+106    	; 0xe8a <flip_piece+0x442>
		x_for_flip = x - 1;
     e20:	cc 24       	eor	r12, r12
     e22:	ca 94       	dec	r12
     e24:	cd 0c       	add	r12, r13
		y_for_flip = y;
		while (board[x_for_flip][y_for_flip] == next_player_for_flip) {
     e26:	21 c0       	rjmp	.+66     	; 0xe6a <flip_piece+0x422>
			board[x_for_flip][y_for_flip] = current_player;
     e28:	40 91 9a 01 	lds	r20, 0x019A	; 0x80019a <current_player>
     e2c:	f9 01       	movw	r30, r18
     e2e:	ee 0f       	add	r30, r30
     e30:	ff 1f       	adc	r31, r31
     e32:	ee 0f       	add	r30, r30
     e34:	ff 1f       	adc	r31, r31
     e36:	ee 0f       	add	r30, r30
     e38:	ff 1f       	adc	r31, r31
     e3a:	e6 5a       	subi	r30, 0xA6	; 166
     e3c:	fe 4f       	sbci	r31, 0xFE	; 254
     e3e:	ec 0f       	add	r30, r28
     e40:	fd 1f       	adc	r31, r29
     e42:	40 83       	st	Z, r20
			update_square_colour(x_for_flip, y_for_flip, board[x_for_flip][y_for_flip]);
     e44:	6e 2d       	mov	r22, r14
     e46:	8c 2d       	mov	r24, r12
     e48:	0e 94 05 02 	call	0x40a	; 0x40a <update_square_colour>
			flip_piece_score(board[x][y]);
     e4c:	f8 01       	movw	r30, r16
     e4e:	ee 0f       	add	r30, r30
     e50:	ff 1f       	adc	r31, r31
     e52:	ee 0f       	add	r30, r30
     e54:	ff 1f       	adc	r31, r31
     e56:	ee 0f       	add	r30, r30
     e58:	ff 1f       	adc	r31, r31
     e5a:	e6 5a       	subi	r30, 0xA6	; 166
     e5c:	fe 4f       	sbci	r31, 0xFE	; 254
     e5e:	ec 0f       	add	r30, r28
     e60:	fd 1f       	adc	r31, r29
     e62:	80 81       	ld	r24, Z
     e64:	0e 94 37 0a 	call	0x146e	; 0x146e <flip_piece_score>
			x_for_flip--;
     e68:	ca 94       	dec	r12
	
	// flip the left direction
	if (valid_direction[x][y][6]) {
		x_for_flip = x - 1;
		y_for_flip = y;
		while (board[x_for_flip][y_for_flip] == next_player_for_flip) {
     e6a:	2c 2d       	mov	r18, r12
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	f9 01       	movw	r30, r18
     e70:	ee 0f       	add	r30, r30
     e72:	ff 1f       	adc	r31, r31
     e74:	ee 0f       	add	r30, r30
     e76:	ff 1f       	adc	r31, r31
     e78:	ee 0f       	add	r30, r30
     e7a:	ff 1f       	adc	r31, r31
     e7c:	e6 5a       	subi	r30, 0xA6	; 166
     e7e:	fe 4f       	sbci	r31, 0xFE	; 254
     e80:	ec 0f       	add	r30, r28
     e82:	fd 1f       	adc	r31, r29
     e84:	80 81       	ld	r24, Z
     e86:	f8 16       	cp	r15, r24
     e88:	79 f2       	breq	.-98     	; 0xe28 <flip_piece+0x3e0>
			x_for_flip--;
		}
	}
	
	// flip up-left direction
	if (valid_direction[x][y][7]) {
     e8a:	f8 01       	movw	r30, r16
     e8c:	ee 0f       	add	r30, r30
     e8e:	ff 1f       	adc	r31, r31
     e90:	ee 0f       	add	r30, r30
     e92:	ff 1f       	adc	r31, r31
     e94:	ee 0f       	add	r30, r30
     e96:	ff 1f       	adc	r31, r31
     e98:	ec 0f       	add	r30, r28
     e9a:	fd 1f       	adc	r31, r29
     e9c:	ee 0f       	add	r30, r30
     e9e:	ff 1f       	adc	r31, r31
     ea0:	ee 0f       	add	r30, r30
     ea2:	ff 1f       	adc	r31, r31
     ea4:	ee 0f       	add	r30, r30
     ea6:	ff 1f       	adc	r31, r31
     ea8:	e4 56       	subi	r30, 0x64	; 100
     eaa:	fe 4f       	sbci	r31, 0xFE	; 254
     eac:	87 81       	ldd	r24, Z+7	; 0x07
     eae:	88 23       	and	r24, r24
     eb0:	b1 f1       	breq	.+108    	; 0xf1e <flip_piece+0x4d6>
		x_for_flip = x - 1;
     eb2:	da 94       	dec	r13
		y_for_flip = y + 1;
     eb4:	e3 94       	inc	r14
		while(board[x_for_flip][y_for_flip] == next_player_for_flip) {
     eb6:	21 c0       	rjmp	.+66     	; 0xefa <flip_piece+0x4b2>
			board[x_for_flip][y_for_flip] = current_player;
     eb8:	40 91 9a 01 	lds	r20, 0x019A	; 0x80019a <current_player>
     ebc:	22 0f       	add	r18, r18
     ebe:	33 1f       	adc	r19, r19
     ec0:	22 0f       	add	r18, r18
     ec2:	33 1f       	adc	r19, r19
     ec4:	22 0f       	add	r18, r18
     ec6:	33 1f       	adc	r19, r19
     ec8:	26 5a       	subi	r18, 0xA6	; 166
     eca:	3e 4f       	sbci	r19, 0xFE	; 254
     ecc:	e2 0f       	add	r30, r18
     ece:	f3 1f       	adc	r31, r19
     ed0:	40 83       	st	Z, r20
			update_square_colour(x_for_flip, y_for_flip, board[x_for_flip][y_for_flip]);
     ed2:	6e 2d       	mov	r22, r14
     ed4:	8d 2d       	mov	r24, r13
     ed6:	0e 94 05 02 	call	0x40a	; 0x40a <update_square_colour>
			flip_piece_score(board[x][y]);
     eda:	f8 01       	movw	r30, r16
     edc:	ee 0f       	add	r30, r30
     ede:	ff 1f       	adc	r31, r31
     ee0:	ee 0f       	add	r30, r30
     ee2:	ff 1f       	adc	r31, r31
     ee4:	ee 0f       	add	r30, r30
     ee6:	ff 1f       	adc	r31, r31
     ee8:	e6 5a       	subi	r30, 0xA6	; 166
     eea:	fe 4f       	sbci	r31, 0xFE	; 254
     eec:	ec 0f       	add	r30, r28
     eee:	fd 1f       	adc	r31, r29
     ef0:	80 81       	ld	r24, Z
     ef2:	0e 94 37 0a 	call	0x146e	; 0x146e <flip_piece_score>
			x_for_flip--;
     ef6:	da 94       	dec	r13
			y_for_flip++;
     ef8:	e3 94       	inc	r14
	
	// flip up-left direction
	if (valid_direction[x][y][7]) {
		x_for_flip = x - 1;
		y_for_flip = y + 1;
		while(board[x_for_flip][y_for_flip] == next_player_for_flip) {
     efa:	2d 2d       	mov	r18, r13
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	ee 2d       	mov	r30, r14
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	d9 01       	movw	r26, r18
     f04:	aa 0f       	add	r26, r26
     f06:	bb 1f       	adc	r27, r27
     f08:	aa 0f       	add	r26, r26
     f0a:	bb 1f       	adc	r27, r27
     f0c:	aa 0f       	add	r26, r26
     f0e:	bb 1f       	adc	r27, r27
     f10:	a6 5a       	subi	r26, 0xA6	; 166
     f12:	be 4f       	sbci	r27, 0xFE	; 254
     f14:	ae 0f       	add	r26, r30
     f16:	bf 1f       	adc	r27, r31
     f18:	8c 91       	ld	r24, X
     f1a:	f8 16       	cp	r15, r24
     f1c:	69 f2       	breq	.-102    	; 0xeb8 <flip_piece+0x470>
			flip_piece_score(board[x][y]);
			x_for_flip--;
			y_for_flip++;
		}
	}
}
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	1f 91       	pop	r17
     f24:	0f 91       	pop	r16
     f26:	ff 90       	pop	r15
     f28:	ef 90       	pop	r14
     f2a:	df 90       	pop	r13
     f2c:	cf 90       	pop	r12
     f2e:	bf 90       	pop	r11
     f30:	af 90       	pop	r10
     f32:	08 95       	ret

00000f34 <check_available_move>:
			}
		} 
	}
}

uint8_t check_available_move(uint8_t player) {
     f34:	0f 93       	push	r16
     f36:	1f 93       	push	r17
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
	// check every place of board
	for (int i = 0; i <= 7; i++) {
     f3c:	00 e0       	ldi	r16, 0x00	; 0
     f3e:	10 e0       	ldi	r17, 0x00	; 0
     f40:	15 c0       	rjmp	.+42     	; 0xf6c <check_available_move+0x38>
		for (int j = 0; j <= 7; j++) {
			if (get_piece_at(i, j) == EMPTY_SQUARE && check_valid_place(i, j)) {
     f42:	6c 2f       	mov	r22, r28
     f44:	80 2f       	mov	r24, r16
     f46:	0e 94 a5 02 	call	0x54a	; 0x54a <get_piece_at>
     f4a:	81 11       	cpse	r24, r1
     f4c:	06 c0       	rjmp	.+12     	; 0xf5a <check_available_move+0x26>
     f4e:	6c 2f       	mov	r22, r28
     f50:	80 2f       	mov	r24, r16
     f52:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <check_valid_place>
     f56:	81 11       	cpse	r24, r1
     f58:	0e c0       	rjmp	.+28     	; 0xf76 <check_available_move+0x42>
}

uint8_t check_available_move(uint8_t player) {
	// check every place of board
	for (int i = 0; i <= 7; i++) {
		for (int j = 0; j <= 7; j++) {
     f5a:	21 96       	adiw	r28, 0x01	; 1
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <check_available_move+0x2e>
     f5e:	c0 e0       	ldi	r28, 0x00	; 0
     f60:	d0 e0       	ldi	r29, 0x00	; 0
     f62:	c8 30       	cpi	r28, 0x08	; 8
     f64:	d1 05       	cpc	r29, r1
     f66:	6c f3       	brlt	.-38     	; 0xf42 <check_available_move+0xe>
	}
}

uint8_t check_available_move(uint8_t player) {
	// check every place of board
	for (int i = 0; i <= 7; i++) {
     f68:	0f 5f       	subi	r16, 0xFF	; 255
     f6a:	1f 4f       	sbci	r17, 0xFF	; 255
     f6c:	08 30       	cpi	r16, 0x08	; 8
     f6e:	11 05       	cpc	r17, r1
     f70:	b4 f3       	brlt	.-20     	; 0xf5e <check_available_move+0x2a>
			if (get_piece_at(i, j) == EMPTY_SQUARE && check_valid_place(i, j)) {
				return 1;
			}
		}
	}
	return 0;
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	01 c0       	rjmp	.+2      	; 0xf78 <check_available_move+0x44>
uint8_t check_available_move(uint8_t player) {
	// check every place of board
	for (int i = 0; i <= 7; i++) {
		for (int j = 0; j <= 7; j++) {
			if (get_piece_at(i, j) == EMPTY_SQUARE && check_valid_place(i, j)) {
				return 1;
     f76:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}
	return 0;
}
     f78:	df 91       	pop	r29
     f7a:	cf 91       	pop	r28
     f7c:	1f 91       	pop	r17
     f7e:	0f 91       	pop	r16
     f80:	08 95       	ret

00000f82 <piece_placement>:
			y_for_flip++;
		}
	}
}

void piece_placement(void) {
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
	// check if the current position of cursor is empty
	if (get_piece_at(cursor_x, cursor_y) == EMPTY_SQUARE && check_valid_place(cursor_x, cursor_y)){
     f86:	d0 91 59 01 	lds	r29, 0x0159	; 0x800159 <cursor_y>
     f8a:	c0 91 9c 03 	lds	r28, 0x039C	; 0x80039c <cursor_x>
     f8e:	6d 2f       	mov	r22, r29
     f90:	8c 2f       	mov	r24, r28
     f92:	0e 94 a5 02 	call	0x54a	; 0x54a <get_piece_at>
     f96:	81 11       	cpse	r24, r1
     f98:	8e c0       	rjmp	.+284    	; 0x10b6 <piece_placement+0x134>
     f9a:	6d 2f       	mov	r22, r29
     f9c:	8c 2f       	mov	r24, r28
     f9e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <check_valid_place>
     fa2:	88 23       	and	r24, r24
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <piece_placement+0x26>
     fa6:	87 c0       	rjmp	.+270    	; 0x10b6 <piece_placement+0x134>
		
		board[cursor_x][cursor_y] = current_player;
     fa8:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <cursor_x>
     fac:	e8 2f       	mov	r30, r24
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <cursor_y>
     fb4:	ee 0f       	add	r30, r30
     fb6:	ff 1f       	adc	r31, r31
     fb8:	ee 0f       	add	r30, r30
     fba:	ff 1f       	adc	r31, r31
     fbc:	ee 0f       	add	r30, r30
     fbe:	ff 1f       	adc	r31, r31
     fc0:	e6 5a       	subi	r30, 0xA6	; 166
     fc2:	fe 4f       	sbci	r31, 0xFE	; 254
     fc4:	e6 0f       	add	r30, r22
     fc6:	f1 1d       	adc	r31, r1
     fc8:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <current_player>
     fcc:	90 83       	st	Z, r25
		flip_piece(cursor_x, cursor_y);
     fce:	0e 94 24 05 	call	0xa48	; 0xa48 <flip_piece>
		piece_placement_score(board[cursor_x][cursor_y]);
     fd2:	e0 91 9c 03 	lds	r30, 0x039C	; 0x80039c <cursor_x>
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <cursor_y>
     fdc:	ee 0f       	add	r30, r30
     fde:	ff 1f       	adc	r31, r31
     fe0:	ee 0f       	add	r30, r30
     fe2:	ff 1f       	adc	r31, r31
     fe4:	ee 0f       	add	r30, r30
     fe6:	ff 1f       	adc	r31, r31
     fe8:	e6 5a       	subi	r30, 0xA6	; 166
     fea:	fe 4f       	sbci	r31, 0xFE	; 254
     fec:	e8 0f       	add	r30, r24
     fee:	f1 1d       	adc	r31, r1
     ff0:	80 81       	ld	r24, Z
     ff2:	0e 94 d7 09 	call	0x13ae	; 0x13ae <piece_placement_score>
		// place the correct piece of each player
		update_square_colour(cursor_x, cursor_y, board[cursor_x][cursor_y]);
     ff6:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <cursor_x>
     ffa:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <cursor_y>
     ffe:	e8 2f       	mov	r30, r24
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	ee 0f       	add	r30, r30
    1004:	ff 1f       	adc	r31, r31
    1006:	ee 0f       	add	r30, r30
    1008:	ff 1f       	adc	r31, r31
    100a:	ee 0f       	add	r30, r30
    100c:	ff 1f       	adc	r31, r31
    100e:	e6 5a       	subi	r30, 0xA6	; 166
    1010:	fe 4f       	sbci	r31, 0xFE	; 254
    1012:	e6 0f       	add	r30, r22
    1014:	f1 1d       	adc	r31, r1
    1016:	40 81       	ld	r20, Z
    1018:	0e 94 05 02 	call	0x40a	; 0x40a <update_square_colour>
		
		
		// display the turn of players by LED
		if (current_player == PLAYER_1) {
    101c:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <current_player>
    1020:	81 30       	cpi	r24, 0x01	; 1
    1022:	39 f4       	brne	.+14     	; 0x1032 <piece_placement+0xb0>
			PORTB |= 1 << PORTB1;
    1024:	85 b1       	in	r24, 0x05	; 5
    1026:	82 60       	ori	r24, 0x02	; 2
    1028:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~(1 << PORTB0);
    102a:	85 b1       	in	r24, 0x05	; 5
    102c:	8e 7f       	andi	r24, 0xFE	; 254
    102e:	85 b9       	out	0x05, r24	; 5
    1030:	08 c0       	rjmp	.+16     	; 0x1042 <piece_placement+0xc0>
			} else if (current_player == PLAYER_2) {
    1032:	82 30       	cpi	r24, 0x02	; 2
    1034:	31 f4       	brne	.+12     	; 0x1042 <piece_placement+0xc0>
			PORTB |= 1 << PORTB0;
    1036:	85 b1       	in	r24, 0x05	; 5
    1038:	81 60       	ori	r24, 0x01	; 1
    103a:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~(1 << PORTB1);
    103c:	85 b1       	in	r24, 0x05	; 5
    103e:	8d 7f       	andi	r24, 0xFD	; 253
    1040:	85 b9       	out	0x05, r24	; 5
		}
		
		// switch play turn of players
		if (current_player == PLAYER_1) {
    1042:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <current_player>
    1046:	81 30       	cpi	r24, 0x01	; 1
    1048:	21 f4       	brne	.+8      	; 0x1052 <piece_placement+0xd0>
			current_player = PLAYER_2;
    104a:	82 e0       	ldi	r24, 0x02	; 2
    104c:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <current_player>
    1050:	03 c0       	rjmp	.+6      	; 0x1058 <piece_placement+0xd6>
		} else {
			current_player = PLAYER_1;
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <current_player>
		}
		
		// check if there is available move for players, if not, game over
		if (!check_available_move(current_player)) {
    1058:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <current_player>
    105c:	0e 94 9a 07 	call	0xf34	; 0xf34 <check_available_move>
    1060:	81 11       	cpse	r24, r1
    1062:	29 c0       	rjmp	.+82     	; 0x10b6 <piece_placement+0x134>
			if (current_player == PLAYER_1) {
    1064:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <current_player>
    1068:	81 30       	cpi	r24, 0x01	; 1
    106a:	99 f4       	brne	.+38     	; 0x1092 <piece_placement+0x110>
				current_player = PLAYER_2;
    106c:	82 e0       	ldi	r24, 0x02	; 2
    106e:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <current_player>
				PORTB |= 1 << PORTB1;
    1072:	85 b1       	in	r24, 0x05	; 5
    1074:	82 60       	ori	r24, 0x02	; 2
    1076:	85 b9       	out	0x05, r24	; 5
				PORTB &= ~(1 << PORTB0);
    1078:	85 b1       	in	r24, 0x05	; 5
    107a:	8e 7f       	andi	r24, 0xFE	; 254
    107c:	85 b9       	out	0x05, r24	; 5
				if (! check_available_move(current_player)) {
    107e:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <current_player>
    1082:	0e 94 9a 07 	call	0xf34	; 0xf34 <check_available_move>
    1086:	81 11       	cpse	r24, r1
    1088:	16 c0       	rjmp	.+44     	; 0x10b6 <piece_placement+0x134>
					no_move_game_over = 1;
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <no_move_game_over>
    1090:	12 c0       	rjmp	.+36     	; 0x10b6 <piece_placement+0x134>
				} 
			} else {
				current_player = PLAYER_1;
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <current_player>
				PORTB |= 1 << PORTB0;
    1098:	85 b1       	in	r24, 0x05	; 5
    109a:	81 60       	ori	r24, 0x01	; 1
    109c:	85 b9       	out	0x05, r24	; 5
				PORTB &= ~(1 << PORTB1);
    109e:	85 b1       	in	r24, 0x05	; 5
    10a0:	8d 7f       	andi	r24, 0xFD	; 253
    10a2:	85 b9       	out	0x05, r24	; 5
				if (! check_available_move(current_player)) {
    10a4:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <current_player>
    10a8:	0e 94 9a 07 	call	0xf34	; 0xf34 <check_available_move>
    10ac:	81 11       	cpse	r24, r1
    10ae:	03 c0       	rjmp	.+6      	; 0x10b6 <piece_placement+0x134>
					no_move_game_over = 1;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <no_move_game_over>
				}
			}
		} 
	}
}
    10b6:	df 91       	pop	r29
    10b8:	cf 91       	pop	r28
    10ba:	08 95       	ret

000010bc <no_available_move_game_over>:
	return 0;
}

uint8_t no_available_move_game_over(void) {
	return no_move_game_over;
}
    10bc:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <no_move_game_over>
    10c0:	08 95       	ret

000010c2 <is_game_over>:

uint8_t is_game_over(void) {
	// The game ends when every single square is filled
	// Check for any squares that are empty
	for (uint8_t x = 0; x < WIDTH; x++) {
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	15 c0       	rjmp	.+42     	; 0x10f0 <is_game_over+0x2e>
		for (uint8_t y = 0; y < HEIGHT; y++) {
			if (board[x][y] == EMPTY_SQUARE) {
    10c6:	e2 2f       	mov	r30, r18
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	ee 0f       	add	r30, r30
    10cc:	ff 1f       	adc	r31, r31
    10ce:	ee 0f       	add	r30, r30
    10d0:	ff 1f       	adc	r31, r31
    10d2:	ee 0f       	add	r30, r30
    10d4:	ff 1f       	adc	r31, r31
    10d6:	e6 5a       	subi	r30, 0xA6	; 166
    10d8:	fe 4f       	sbci	r31, 0xFE	; 254
    10da:	e9 0f       	add	r30, r25
    10dc:	f1 1d       	adc	r31, r1
    10de:	80 81       	ld	r24, Z
    10e0:	88 23       	and	r24, r24
    10e2:	59 f0       	breq	.+22     	; 0x10fa <is_game_over+0x38>

uint8_t is_game_over(void) {
	// The game ends when every single square is filled
	// Check for any squares that are empty
	for (uint8_t x = 0; x < WIDTH; x++) {
		for (uint8_t y = 0; y < HEIGHT; y++) {
    10e4:	9f 5f       	subi	r25, 0xFF	; 255
    10e6:	01 c0       	rjmp	.+2      	; 0x10ea <is_game_over+0x28>
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	98 30       	cpi	r25, 0x08	; 8
    10ec:	60 f3       	brcs	.-40     	; 0x10c6 <is_game_over+0x4>
}

uint8_t is_game_over(void) {
	// The game ends when every single square is filled
	// Check for any squares that are empty
	for (uint8_t x = 0; x < WIDTH; x++) {
    10ee:	2f 5f       	subi	r18, 0xFF	; 255
    10f0:	28 30       	cpi	r18, 0x08	; 8
    10f2:	d0 f3       	brcs	.-12     	; 0x10e8 <is_game_over+0x26>
				return 0;
			}
		}
	}
	// if we don't clear this variable, the game can't restart normally.
	no_move_game_over = 0;
    10f4:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <no_move_game_over>
	// every single position has been checked and no empty squares were found
	// the game is over
	return 1;
    10f8:	81 e0       	ldi	r24, 0x01	; 1
}
    10fa:	08 95       	ret

000010fc <get_current_player>:

uint8_t get_current_player(void) {
	if (current_player == PLAYER_1) {
    10fc:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <current_player>
    1100:	81 30       	cpi	r24, 0x01	; 1
    1102:	09 f0       	breq	.+2      	; 0x1106 <get_current_player+0xa>
		return PLAYER_1;
	} else {
		return PLAYER_2;
    1104:	82 e0       	ldi	r24, 0x02	; 2
	}
    1106:	08 95       	ret

00001108 <initialise_hardware>:
		handle_game_over();
	}
}

void initialise_hardware(void) {
	init_button_interrupts();
    1108:	0e 94 c0 00 	call	0x180	; 0x180 <init_button_interrupts>
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200,0);
    110c:	40 e0       	ldi	r20, 0x00	; 0
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	7b e4       	ldi	r23, 0x4B	; 75
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	0e 94 bf 0a 	call	0x157e	; 0x157e <init_serial_stdio>
	
	init_timer0();
    111a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <init_timer0>
	
	// Turn on global interrupts
	sei();
    111e:	78 94       	sei
    1120:	08 95       	ret

00001122 <start_screen>:
}

void start_screen(void) {
	// Clear terminal screen and output a message
	clear_terminal();
    1122:	0e 94 c1 0b 	call	0x1782	; 0x1782 <clear_terminal>
	move_terminal_cursor(10,10);
    1126:	6a e0       	ldi	r22, 0x0A	; 10
    1128:	70 e0       	ldi	r23, 0x00	; 0
    112a:	8a e0       	ldi	r24, 0x0A	; 10
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	0e 94 a7 0b 	call	0x174e	; 0x174e <move_terminal_cursor>
	printf_P(PSTR("Reversi"));
    1132:	8a e1       	ldi	r24, 0x1A	; 26
    1134:	91 e0       	ldi	r25, 0x01	; 1
    1136:	9f 93       	push	r25
    1138:	8f 93       	push	r24
    113a:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <printf_P>
	move_terminal_cursor(10,12);
    113e:	6c e0       	ldi	r22, 0x0C	; 12
    1140:	70 e0       	ldi	r23, 0x00	; 0
    1142:	8a e0       	ldi	r24, 0x0A	; 10
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	0e 94 a7 0b 	call	0x174e	; 0x174e <move_terminal_cursor>
	printf_P(PSTR("CSSE2010/7201 project by <Donghao Yang 45930032>"));
    114a:	89 ee       	ldi	r24, 0xE9	; 233
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	9f 93       	push	r25
    1150:	8f 93       	push	r24
    1152:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <printf_P>
	
	// Output the static start screen and wait for a push button 
	// to be pushed or a serial input of 's'
	start_display();
    1156:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <start_display>
    115a:	0f 90       	pop	r0
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
		if (serial_input_available()) {
    1162:	0e 94 06 0b 	call	0x160c	; 0x160c <serial_input_available>
    1166:	88 23       	and	r24, r24
    1168:	39 f0       	breq	.+14     	; 0x1178 <start_screen+0x56>
			serial_input = fgetc(stdin);
    116a:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <__iob>
    116e:	90 91 b4 04 	lds	r25, 0x04B4	; 0x8004b4 <__iob+0x1>
    1172:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <fgetc>
    1176:	01 c0       	rjmp	.+2      	; 0x117a <start_screen+0x58>
	while(1) {
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
    1178:	8f ef       	ldi	r24, 0xFF	; 255
		if (serial_input_available()) {
			serial_input = fgetc(stdin);
		}
		// If the serial input is 's', then exit the start screen
		if (serial_input == 's' || serial_input == 'S') {
    117a:	83 37       	cpi	r24, 0x73	; 115
    117c:	31 f0       	breq	.+12     	; 0x118a <start_screen+0x68>
    117e:	83 35       	cpi	r24, 0x53	; 83
    1180:	21 f0       	breq	.+8      	; 0x118a <start_screen+0x68>
			break;
		}
		// Next check for any button presses
		int8_t btn = button_pushed();
    1182:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <button_pushed>
		if (btn != NO_BUTTON_PUSHED) {
    1186:	8f 3f       	cpi	r24, 0xFF	; 255
    1188:	61 f3       	breq	.-40     	; 0x1162 <start_screen+0x40>
    118a:	08 95       	ret

0000118c <new_game>:
	}
}

void new_game(void) {
	// Clear the serial terminal
	clear_terminal();
    118c:	0e 94 c1 0b 	call	0x1782	; 0x1782 <clear_terminal>
	
	// Initialise the game and display
	initialise_board();
    1190:	0e 94 39 02 	call	0x472	; 0x472 <initialise_board>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
    1194:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <button_pushed>
	clear_serial_input_buffer();
    1198:	0e 94 0d 0b 	call	0x161a	; 0x161a <clear_serial_input_buffer>
	
	// Initialise scores
	init_score();
    119c:	0e 94 a9 09 	call	0x1352	; 0x1352 <init_score>
    11a0:	08 95       	ret

000011a2 <play_game>:
}

void play_game(void) {
    11a2:	8f 92       	push	r8
    11a4:	9f 92       	push	r9
    11a6:	af 92       	push	r10
    11a8:	bf 92       	push	r11
    11aa:	cf 92       	push	r12
    11ac:	df 92       	push	r13
    11ae:	ef 92       	push	r14
    11b0:	ff 92       	push	r15
    11b2:	cf 93       	push	r28
    11b4:	df 93       	push	r29
	
	uint32_t last_flash_time, current_time;
	uint8_t btn; //the button pushed
	
	last_flash_time = get_current_time();
    11b6:	0e 94 01 0c 	call	0x1802	; 0x1802 <get_current_time>
    11ba:	4b 01       	movw	r8, r22
    11bc:	5c 01       	movw	r10, r24
	
	// We play the game until it's over
	while(!is_game_over() && !no_available_move_game_over()) {
    11be:	89 c0       	rjmp	.+274    	; 0x12d2 <play_game+0x130>
		// First check for buttons pressed
		
		// We need to check if any button has been pushed, this will be
		// NO_BUTTON_PUSHED if no button has been pushed
		btn = button_pushed();
    11c0:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <button_pushed>
    11c4:	d8 2f       	mov	r29, r24
		
		if (btn == BUTTON2_PUSHED && pause == 0) {
    11c6:	82 30       	cpi	r24, 0x02	; 2
    11c8:	49 f4       	brne	.+18     	; 0x11dc <play_game+0x3a>
    11ca:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <pause>
    11ce:	81 11       	cpse	r24, r1
    11d0:	05 c0       	rjmp	.+10     	; 0x11dc <play_game+0x3a>
			// If button 2 is pushed, move left,
			// i.e decrease x by 1 and leave y the same
			move_display_cursor(-1, 0);
    11d2:	60 e0       	ldi	r22, 0x00	; 0
    11d4:	8f ef       	ldi	r24, 0xFF	; 255
    11d6:	0e 94 08 05 	call	0xa10	; 0xa10 <move_display_cursor>
    11da:	09 c0       	rjmp	.+18     	; 0x11ee <play_game+0x4c>
		} else if (btn == BUTTON1_PUSHED && pause == 0) {
    11dc:	d1 30       	cpi	r29, 0x01	; 1
    11de:	39 f4       	brne	.+14     	; 0x11ee <play_game+0x4c>
    11e0:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <pause>
    11e4:	81 11       	cpse	r24, r1
    11e6:	03 c0       	rjmp	.+6      	; 0x11ee <play_game+0x4c>
			// If button 1 is pushed, move upwards,
			// i.e leave x the same and increase y by 1
			move_display_cursor(0, 1);
    11e8:	61 e0       	ldi	r22, 0x01	; 1
    11ea:	0e 94 08 05 	call	0xa10	; 0xa10 <move_display_cursor>
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character
		// 'A', 'a', 'S', 's', 'D', 'd', 'W', 'w'
		char serial_input_game_play = -1;
		if (serial_input_available()) {
    11ee:	0e 94 06 0b 	call	0x160c	; 0x160c <serial_input_available>
    11f2:	88 23       	and	r24, r24
    11f4:	41 f0       	breq	.+16     	; 0x1206 <play_game+0x64>
			serial_input_game_play = fgetc(stdin);
    11f6:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <__iob>
    11fa:	90 91 b4 04 	lds	r25, 0x04B4	; 0x8004b4 <__iob+0x1>
    11fe:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <fgetc>
    1202:	c8 2f       	mov	r28, r24
    1204:	01 c0       	rjmp	.+2      	; 0x1208 <play_game+0x66>
		// check for if "A, a, S, s, D, d, W, w" pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character
		// 'A', 'a', 'S', 's', 'D', 'd', 'W', 'w'
		char serial_input_game_play = -1;
    1206:	cf ef       	ldi	r28, 0xFF	; 255
		if (serial_input_available()) {
			serial_input_game_play = fgetc(stdin);
		}
		// Check serial input and move the cursor
		if (serial_input_game_play == 's' || serial_input_game_play == 'S') {
    1208:	c3 37       	cpi	r28, 0x73	; 115
    120a:	11 f0       	breq	.+4      	; 0x1210 <play_game+0x6e>
    120c:	c3 35       	cpi	r28, 0x53	; 83
    120e:	41 f4       	brne	.+16     	; 0x1220 <play_game+0x7e>
			if (pause == 0) {
    1210:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <pause>
    1214:	81 11       	cpse	r24, r1
    1216:	3a c0       	rjmp	.+116    	; 0x128c <play_game+0xea>
				move_display_cursor(0, -1);
    1218:	6f ef       	ldi	r22, 0xFF	; 255
    121a:	0e 94 08 05 	call	0xa10	; 0xa10 <move_display_cursor>
    121e:	36 c0       	rjmp	.+108    	; 0x128c <play_game+0xea>
			}
		} else if (serial_input_game_play == 'w' || serial_input_game_play == 'W') {
    1220:	c7 37       	cpi	r28, 0x77	; 119
    1222:	11 f0       	breq	.+4      	; 0x1228 <play_game+0x86>
    1224:	c7 35       	cpi	r28, 0x57	; 87
    1226:	41 f4       	brne	.+16     	; 0x1238 <play_game+0x96>
			if (pause == 0) {
    1228:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <pause>
    122c:	81 11       	cpse	r24, r1
    122e:	2e c0       	rjmp	.+92     	; 0x128c <play_game+0xea>
				move_display_cursor(0, 1);
    1230:	61 e0       	ldi	r22, 0x01	; 1
    1232:	0e 94 08 05 	call	0xa10	; 0xa10 <move_display_cursor>
    1236:	2a c0       	rjmp	.+84     	; 0x128c <play_game+0xea>
			}
		} else if (serial_input_game_play == 'a' || serial_input_game_play == 'A') {
    1238:	c1 36       	cpi	r28, 0x61	; 97
    123a:	11 f0       	breq	.+4      	; 0x1240 <play_game+0x9e>
    123c:	c1 34       	cpi	r28, 0x41	; 65
    123e:	49 f4       	brne	.+18     	; 0x1252 <play_game+0xb0>
			if (pause == 0) {
    1240:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <pause>
    1244:	81 11       	cpse	r24, r1
    1246:	22 c0       	rjmp	.+68     	; 0x128c <play_game+0xea>
				move_display_cursor(-1, 0);
    1248:	60 e0       	ldi	r22, 0x00	; 0
    124a:	8f ef       	ldi	r24, 0xFF	; 255
    124c:	0e 94 08 05 	call	0xa10	; 0xa10 <move_display_cursor>
    1250:	1d c0       	rjmp	.+58     	; 0x128c <play_game+0xea>
			}
		} else if (serial_input_game_play == 'd' || serial_input_game_play == 'D') {
    1252:	c4 36       	cpi	r28, 0x64	; 100
    1254:	11 f0       	breq	.+4      	; 0x125a <play_game+0xb8>
    1256:	c4 34       	cpi	r28, 0x44	; 68
    1258:	49 f4       	brne	.+18     	; 0x126c <play_game+0xca>
			if (pause == 0) {
    125a:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <pause>
    125e:	81 11       	cpse	r24, r1
    1260:	15 c0       	rjmp	.+42     	; 0x128c <play_game+0xea>
				move_display_cursor(1, 0);
    1262:	60 e0       	ldi	r22, 0x00	; 0
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	0e 94 08 05 	call	0xa10	; 0xa10 <move_display_cursor>
    126a:	10 c0       	rjmp	.+32     	; 0x128c <play_game+0xea>
			}
		} else if (serial_input_game_play == 'p' || serial_input_game_play == 'P') {
    126c:	c0 37       	cpi	r28, 0x70	; 112
    126e:	11 f0       	breq	.+4      	; 0x1274 <play_game+0xd2>
    1270:	c0 35       	cpi	r28, 0x50	; 80
    1272:	61 f4       	brne	.+24     	; 0x128c <play_game+0xea>
			pause_game();
    1274:	0e 94 3e 0c 	call	0x187c	; 0x187c <pause_game>
			if (pause == 0) {
    1278:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <pause>
    127c:	81 11       	cpse	r24, r1
    127e:	04 c0       	rjmp	.+8      	; 0x1288 <play_game+0xe6>
				pause = 1;
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <pause>
    1286:	02 c0       	rjmp	.+4      	; 0x128c <play_game+0xea>
			} else {
				pause = 0;
    1288:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <pause>
		}
		
		// a piece can be placed at the current location of the cursor when button B0 or
		//space bar are pressed
		// check if button 0 is pressed
		if (btn == BUTTON0_PUSHED && pause == 0) {
    128c:	d1 11       	cpse	r29, r1
    128e:	06 c0       	rjmp	.+12     	; 0x129c <play_game+0xfa>
    1290:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <pause>
    1294:	81 11       	cpse	r24, r1
    1296:	02 c0       	rjmp	.+4      	; 0x129c <play_game+0xfa>
			piece_placement();
    1298:	0e 94 c1 07 	call	0xf82	; 0xf82 <piece_placement>
		}
		// check if space bar is pressed
		if (serial_input_game_play == ' ' && pause == 0) {
    129c:	c0 32       	cpi	r28, 0x20	; 32
    129e:	31 f4       	brne	.+12     	; 0x12ac <play_game+0x10a>
    12a0:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <pause>
    12a4:	81 11       	cpse	r24, r1
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <play_game+0x10a>
			piece_placement();
    12a8:	0e 94 c1 07 	call	0xf82	; 0xf82 <piece_placement>
		}
		
		current_time = get_current_time();
    12ac:	0e 94 01 0c 	call	0x1802	; 0x1802 <get_current_time>
    12b0:	6b 01       	movw	r12, r22
    12b2:	7c 01       	movw	r14, r24
		if(current_time >= last_flash_time + 500) {
    12b4:	d5 01       	movw	r26, r10
    12b6:	c4 01       	movw	r24, r8
    12b8:	8c 50       	subi	r24, 0x0C	; 12
    12ba:	9e 4f       	sbci	r25, 0xFE	; 254
    12bc:	af 4f       	sbci	r26, 0xFF	; 255
    12be:	bf 4f       	sbci	r27, 0xFF	; 255
    12c0:	c8 16       	cp	r12, r24
    12c2:	d9 06       	cpc	r13, r25
    12c4:	ea 06       	cpc	r14, r26
    12c6:	fb 06       	cpc	r15, r27
    12c8:	20 f0       	brcs	.+8      	; 0x12d2 <play_game+0x130>
			// 500ms (0.5 second) has passed since the last time we
			// flashed the cursor, so flash the cursor
			flash_cursor();
    12ca:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <flash_cursor>
			
			// Update the most recent time the cursor was flashed
			last_flash_time = current_time;
    12ce:	46 01       	movw	r8, r12
    12d0:	57 01       	movw	r10, r14
	uint8_t btn; //the button pushed
	
	last_flash_time = get_current_time();
	
	// We play the game until it's over
	while(!is_game_over() && !no_available_move_game_over()) {
    12d2:	0e 94 61 08 	call	0x10c2	; 0x10c2 <is_game_over>
    12d6:	81 11       	cpse	r24, r1
    12d8:	05 c0       	rjmp	.+10     	; 0x12e4 <play_game+0x142>
    12da:	0e 94 5e 08 	call	0x10bc	; 0x10bc <no_available_move_game_over>
    12de:	88 23       	and	r24, r24
    12e0:	09 f4       	brne	.+2      	; 0x12e4 <play_game+0x142>
    12e2:	6e cf       	rjmp	.-292    	; 0x11c0 <play_game+0x1e>
			// Update the most recent time the cursor was flashed
			last_flash_time = current_time;
		}
	}
	// We get here if the game is over.
}
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	ff 90       	pop	r15
    12ea:	ef 90       	pop	r14
    12ec:	df 90       	pop	r13
    12ee:	cf 90       	pop	r12
    12f0:	bf 90       	pop	r11
    12f2:	af 90       	pop	r10
    12f4:	9f 90       	pop	r9
    12f6:	8f 90       	pop	r8
    12f8:	08 95       	ret

000012fa <handle_game_over>:

void handle_game_over() {
	move_terminal_cursor(10,14);
    12fa:	6e e0       	ldi	r22, 0x0E	; 14
    12fc:	70 e0       	ldi	r23, 0x00	; 0
    12fe:	8a e0       	ldi	r24, 0x0A	; 10
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	0e 94 a7 0b 	call	0x174e	; 0x174e <move_terminal_cursor>
	printf_P(PSTR("GAME OVER"));
    1306:	8f ed       	ldi	r24, 0xDF	; 223
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	9f 93       	push	r25
    130c:	8f 93       	push	r24
    130e:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <printf_P>
	move_terminal_cursor(10,15);
    1312:	6f e0       	ldi	r22, 0x0F	; 15
    1314:	70 e0       	ldi	r23, 0x00	; 0
    1316:	8a e0       	ldi	r24, 0x0A	; 10
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	0e 94 a7 0b 	call	0x174e	; 0x174e <move_terminal_cursor>
	printf_P(PSTR("Press a button to start again"));
    131e:	81 ec       	ldi	r24, 0xC1	; 193
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	9f 93       	push	r25
    1324:	8f 93       	push	r24
    1326:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <printf_P>
	
	while(button_pushed() == NO_BUTTON_PUSHED) {
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <button_pushed>
    1336:	8f 3f       	cpi	r24, 0xFF	; 255
    1338:	e1 f3       	breq	.-8      	; 0x1332 <handle_game_over+0x38>
		; // wait
	}
}
    133a:	08 95       	ret

0000133c <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    133c:	0e 94 84 08 	call	0x1108	; 0x1108 <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete
	start_screen();
    1340:	0e 94 91 08 	call	0x1122	; 0x1122 <start_screen>
	
	// Loop forever,
	while(1) {
		new_game();
    1344:	0e 94 c6 08 	call	0x118c	; 0x118c <new_game>
		play_game();
    1348:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <play_game>
		handle_game_over();
    134c:	0e 94 7d 09 	call	0x12fa	; 0x12fa <handle_game_over>
    1350:	f9 cf       	rjmp	.-14     	; 0x1344 <main+0x8>

00001352 <init_score>:
uint8_t greenScore;

void init_score(void) {	
	
	// At the beginning of game, every players have two piece on board
	redScore = 2;
    1352:	82 e0       	ldi	r24, 0x02	; 2
    1354:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <redScore>
	greenScore = 2;
    1358:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <greenScore>
	
	// display scores of two players
	move_terminal_cursor(2, 2);
    135c:	62 e0       	ldi	r22, 0x02	; 2
    135e:	70 e0       	ldi	r23, 0x00	; 0
    1360:	82 e0       	ldi	r24, 0x02	; 2
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	0e 94 a7 0b 	call	0x174e	; 0x174e <move_terminal_cursor>
	printf("Red Score:%6d", (int)redScore);
    1368:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <redScore>
    136c:	1f 92       	push	r1
    136e:	8f 93       	push	r24
    1370:	80 e2       	ldi	r24, 0x20	; 32
    1372:	91 e0       	ldi	r25, 0x01	; 1
    1374:	9f 93       	push	r25
    1376:	8f 93       	push	r24
    1378:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <printf>
	move_terminal_cursor(2, 3);
    137c:	63 e0       	ldi	r22, 0x03	; 3
    137e:	70 e0       	ldi	r23, 0x00	; 0
    1380:	82 e0       	ldi	r24, 0x02	; 2
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	0e 94 a7 0b 	call	0x174e	; 0x174e <move_terminal_cursor>
	printf("Green score:%4d", (int)greenScore);
    1388:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <greenScore>
    138c:	1f 92       	push	r1
    138e:	8f 93       	push	r24
    1390:	8e e2       	ldi	r24, 0x2E	; 46
    1392:	91 e0       	ldi	r25, 0x01	; 1
    1394:	9f 93       	push	r25
    1396:	8f 93       	push	r24
    1398:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <printf>
}
    139c:	8d b7       	in	r24, 0x3d	; 61
    139e:	9e b7       	in	r25, 0x3e	; 62
    13a0:	08 96       	adiw	r24, 0x08	; 8
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	9e bf       	out	0x3e, r25	; 62
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	8d bf       	out	0x3d, r24	; 61
    13ac:	08 95       	ret

000013ae <piece_placement_score>:

void piece_placement_score(uint8_t player) {
	if (player == PLAYER_1) { // when player 1 places a piece successfully
    13ae:	81 30       	cpi	r24, 0x01	; 1
    13b0:	71 f5       	brne	.+92     	; 0x140e <piece_placement_score+0x60>
		redScore += 1;
    13b2:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <redScore>
    13b6:	8f 5f       	subi	r24, 0xFF	; 255
    13b8:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <redScore>
		move_terminal_cursor(2, 2);
    13bc:	62 e0       	ldi	r22, 0x02	; 2
    13be:	70 e0       	ldi	r23, 0x00	; 0
    13c0:	82 e0       	ldi	r24, 0x02	; 2
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	0e 94 a7 0b 	call	0x174e	; 0x174e <move_terminal_cursor>
		printf("Red Score:%6d", (int)redScore);
    13c8:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <redScore>
    13cc:	1f 92       	push	r1
    13ce:	8f 93       	push	r24
    13d0:	80 e2       	ldi	r24, 0x20	; 32
    13d2:	91 e0       	ldi	r25, 0x01	; 1
    13d4:	9f 93       	push	r25
    13d6:	8f 93       	push	r24
    13d8:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <printf>
		move_terminal_cursor(2, 3);
    13dc:	63 e0       	ldi	r22, 0x03	; 3
    13de:	70 e0       	ldi	r23, 0x00	; 0
    13e0:	82 e0       	ldi	r24, 0x02	; 2
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	0e 94 a7 0b 	call	0x174e	; 0x174e <move_terminal_cursor>
		printf("Green score:%4d", (int)greenScore);
    13e8:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <greenScore>
    13ec:	1f 92       	push	r1
    13ee:	8f 93       	push	r24
    13f0:	8e e2       	ldi	r24, 0x2E	; 46
    13f2:	91 e0       	ldi	r25, 0x01	; 1
    13f4:	9f 93       	push	r25
    13f6:	8f 93       	push	r24
    13f8:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <printf>
    13fc:	8d b7       	in	r24, 0x3d	; 61
    13fe:	9e b7       	in	r25, 0x3e	; 62
    1400:	08 96       	adiw	r24, 0x08	; 8
    1402:	0f b6       	in	r0, 0x3f	; 63
    1404:	f8 94       	cli
    1406:	9e bf       	out	0x3e, r25	; 62
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	8d bf       	out	0x3d, r24	; 61
    140c:	08 95       	ret
	} else if (player == PLAYER_2) { // when player 2 places a piece successfully
    140e:	82 30       	cpi	r24, 0x02	; 2
    1410:	69 f5       	brne	.+90     	; 0x146c <piece_placement_score+0xbe>
		greenScore += 1;
    1412:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <greenScore>
    1416:	8f 5f       	subi	r24, 0xFF	; 255
    1418:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <greenScore>
		move_terminal_cursor(2, 2);
    141c:	62 e0       	ldi	r22, 0x02	; 2
    141e:	70 e0       	ldi	r23, 0x00	; 0
    1420:	82 e0       	ldi	r24, 0x02	; 2
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	0e 94 a7 0b 	call	0x174e	; 0x174e <move_terminal_cursor>
		printf("Red Score:%6d", (int)redScore);
    1428:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <redScore>
    142c:	1f 92       	push	r1
    142e:	8f 93       	push	r24
    1430:	80 e2       	ldi	r24, 0x20	; 32
    1432:	91 e0       	ldi	r25, 0x01	; 1
    1434:	9f 93       	push	r25
    1436:	8f 93       	push	r24
    1438:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <printf>
		move_terminal_cursor(2, 3);
    143c:	63 e0       	ldi	r22, 0x03	; 3
    143e:	70 e0       	ldi	r23, 0x00	; 0
    1440:	82 e0       	ldi	r24, 0x02	; 2
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	0e 94 a7 0b 	call	0x174e	; 0x174e <move_terminal_cursor>
		printf("Green score:%4d", (int)greenScore);
    1448:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <greenScore>
    144c:	1f 92       	push	r1
    144e:	8f 93       	push	r24
    1450:	8e e2       	ldi	r24, 0x2E	; 46
    1452:	91 e0       	ldi	r25, 0x01	; 1
    1454:	9f 93       	push	r25
    1456:	8f 93       	push	r24
    1458:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <printf>
    145c:	8d b7       	in	r24, 0x3d	; 61
    145e:	9e b7       	in	r25, 0x3e	; 62
    1460:	08 96       	adiw	r24, 0x08	; 8
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	f8 94       	cli
    1466:	9e bf       	out	0x3e, r25	; 62
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	8d bf       	out	0x3d, r24	; 61
    146c:	08 95       	ret

0000146e <flip_piece_score>:
	}
	
}

void flip_piece_score(uint8_t player){
	if (player == PLAYER_1) {
    146e:	81 30       	cpi	r24, 0x01	; 1
    1470:	59 f4       	brne	.+22     	; 0x1488 <flip_piece_score+0x1a>
		redScore++;
    1472:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <redScore>
    1476:	8f 5f       	subi	r24, 0xFF	; 255
    1478:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <redScore>
		greenScore--;
    147c:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <greenScore>
    1480:	81 50       	subi	r24, 0x01	; 1
    1482:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <greenScore>
    1486:	08 95       	ret
	} else {
		redScore--;
    1488:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <redScore>
    148c:	81 50       	subi	r24, 0x01	; 1
    148e:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <redScore>
		greenScore++;
    1492:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <greenScore>
    1496:	8f 5f       	subi	r24, 0xFF	; 255
    1498:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <greenScore>
    149c:	08 95       	ret

0000149e <get_score>:
	}
}

uint8_t get_score(void) {
	if (get_current_player() == PLAYER_1) {
    149e:	0e 94 7e 08 	call	0x10fc	; 0x10fc <get_current_player>
    14a2:	81 30       	cpi	r24, 0x01	; 1
    14a4:	19 f4       	brne	.+6      	; 0x14ac <get_score+0xe>
		return redScore;
    14a6:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <redScore>
    14aa:	08 95       	ret
	} else {
		return greenScore;
    14ac:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <greenScore>
	}
    14b0:	08 95       	ret

000014b2 <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    14b2:	cf 93       	push	r28
    14b4:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
    14b6:	8a 30       	cpi	r24, 0x0A	; 10
    14b8:	19 f4       	brne	.+6      	; 0x14c0 <uart_put_char+0xe>
		uart_put_char('\r', stream);
    14ba:	8d e0       	ldi	r24, 0x0D	; 13
    14bc:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    14c0:	9f b7       	in	r25, 0x3f	; 63
    14c2:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <uart_put_char+0x18>
		if(!interrupts_enabled) {
    14c6:	99 23       	and	r25, r25
    14c8:	29 f1       	breq	.+74     	; 0x1514 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    14ca:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <bytes_in_out_buffer>
    14ce:	8f 3f       	cpi	r24, 0xFF	; 255
    14d0:	d1 f3       	breq	.-12     	; 0x14c6 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    14d2:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    14d4:	e0 91 9f 03 	lds	r30, 0x039F	; 0x80039f <out_insert_pos>
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	8e 0f       	add	r24, r30
    14dc:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <out_insert_pos>
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	ef 55       	subi	r30, 0x5F	; 95
    14e4:	fc 4f       	sbci	r31, 0xFC	; 252
    14e6:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    14e8:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <bytes_in_out_buffer>
    14ec:	8f 5f       	subi	r24, 0xFF	; 255
    14ee:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
    14f2:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <out_insert_pos>
    14f6:	8f 3f       	cpi	r24, 0xFF	; 255
    14f8:	11 f4       	brne	.+4      	; 0x14fe <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    14fa:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    14fe:	e1 ec       	ldi	r30, 0xC1	; 193
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	80 62       	ori	r24, 0x20	; 32
    1506:	80 83       	st	Z, r24
	if(interrupts_enabled) {
    1508:	99 23       	and	r25, r25
    150a:	39 f0       	breq	.+14     	; 0x151a <uart_put_char+0x68>
		sei();
    150c:	78 94       	sei
	}
	return 0;
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	05 c0       	rjmp	.+10     	; 0x151e <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	02 c0       	rjmp	.+4      	; 0x151e <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	90 e0       	ldi	r25, 0x00	; 0
}
    151e:	cf 91       	pop	r28
    1520:	08 95       	ret

00001522 <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    1522:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <bytes_in_input_buffer>
    1526:	88 23       	and	r24, r24
    1528:	e1 f3       	breq	.-8      	; 0x1522 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    152a:	2f b7       	in	r18, 0x3f	; 63
    152c:	20 78       	andi	r18, 0x80	; 128
	cli();
    152e:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    1530:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <input_insert_pos>
    1534:	30 91 b2 04 	lds	r19, 0x04B2	; 0x8004b2 <bytes_in_input_buffer>
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	83 1b       	sub	r24, r19
    153c:	91 09       	sbc	r25, r1
    153e:	5a f4       	brpl	.+22     	; 0x1556 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1540:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <input_insert_pos>
    1544:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <bytes_in_input_buffer>
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	e8 1b       	sub	r30, r24
    154c:	f1 09       	sbc	r31, r1
    154e:	ef 54       	subi	r30, 0x4F	; 79
    1550:	fb 4f       	sbci	r31, 0xFB	; 251
    1552:	80 81       	ld	r24, Z
    1554:	0a c0       	rjmp	.+20     	; 0x156a <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    1556:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <input_insert_pos>
    155a:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <bytes_in_input_buffer>
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	e8 1b       	sub	r30, r24
    1562:	f1 09       	sbc	r31, r1
    1564:	ef 55       	subi	r30, 0x5F	; 95
    1566:	fb 4f       	sbci	r31, 0xFB	; 251
    1568:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    156a:	90 91 b2 04 	lds	r25, 0x04B2	; 0x8004b2 <bytes_in_input_buffer>
    156e:	91 50       	subi	r25, 0x01	; 1
    1570:	90 93 b2 04 	sts	0x04B2, r25	; 0x8004b2 <bytes_in_input_buffer>
	if(interrupts_enabled) {
    1574:	22 23       	and	r18, r18
    1576:	09 f0       	breq	.+2      	; 0x157a <uart_get_char+0x58>
		sei();
    1578:	78 94       	sei
	}	
	return c;
}
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	08 95       	ret

0000157e <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    157e:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <out_insert_pos>
	bytes_in_out_buffer = 0;
    1582:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <bytes_in_out_buffer>
	input_insert_pos = 0;
    1586:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <input_insert_pos>
	bytes_in_input_buffer = 0;
    158a:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <bytes_in_input_buffer>
	input_overrun = 0;
    158e:	10 92 b1 04 	sts	0x04B1, r1	; 0x8004b1 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    1592:	40 93 52 01 	sts	0x0152, r20	; 0x800152 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	aa 1f       	adc	r26, r26
    15a0:	bb 1f       	adc	r27, r27
    15a2:	88 0f       	add	r24, r24
    15a4:	99 1f       	adc	r25, r25
    15a6:	aa 1f       	adc	r26, r26
    15a8:	bb 1f       	adc	r27, r27
    15aa:	9c 01       	movw	r18, r24
    15ac:	ad 01       	movw	r20, r26
    15ae:	22 0f       	add	r18, r18
    15b0:	33 1f       	adc	r19, r19
    15b2:	44 1f       	adc	r20, r20
    15b4:	55 1f       	adc	r21, r21
    15b6:	60 e0       	ldi	r22, 0x00	; 0
    15b8:	74 e2       	ldi	r23, 0x24	; 36
    15ba:	84 ef       	ldi	r24, 0xF4	; 244
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__divmodsi4>
    15c2:	ba 01       	movw	r22, r20
    15c4:	a9 01       	movw	r20, r18
    15c6:	4f 5f       	subi	r20, 0xFF	; 255
    15c8:	5f 4f       	sbci	r21, 0xFF	; 255
    15ca:	6f 4f       	sbci	r22, 0xFF	; 255
    15cc:	7f 4f       	sbci	r23, 0xFF	; 255
    15ce:	db 01       	movw	r26, r22
    15d0:	ca 01       	movw	r24, r20
    15d2:	1a f4       	brpl	.+6      	; 0x15da <init_serial_stdio+0x5c>
    15d4:	01 96       	adiw	r24, 0x01	; 1
    15d6:	a1 1d       	adc	r26, r1
    15d8:	b1 1d       	adc	r27, r1
    15da:	b5 95       	asr	r27
    15dc:	a7 95       	ror	r26
    15de:	97 95       	ror	r25
    15e0:	87 95       	ror	r24
    15e2:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    15e4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    15e8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    15ec:	e1 ec       	ldi	r30, 0xC1	; 193
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	88 e1       	ldi	r24, 0x18	; 24
    15f2:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    15f4:	80 81       	ld	r24, Z
    15f6:	80 68       	ori	r24, 0x80	; 128
    15f8:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    15fa:	e3 eb       	ldi	r30, 0xB3	; 179
    15fc:	f4 e0       	ldi	r31, 0x04	; 4
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	91 e0       	ldi	r25, 0x01	; 1
    1602:	93 83       	std	Z+3, r25	; 0x03
    1604:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    1606:	91 83       	std	Z+1, r25	; 0x01
    1608:	80 83       	st	Z, r24
    160a:	08 95       	ret

0000160c <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    160c:	90 91 b2 04 	lds	r25, 0x04B2	; 0x8004b2 <bytes_in_input_buffer>
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	91 11       	cpse	r25, r1
    1614:	01 c0       	rjmp	.+2      	; 0x1618 <serial_input_available+0xc>
    1616:	80 e0       	ldi	r24, 0x00	; 0
}
    1618:	08 95       	ret

0000161a <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    161a:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <input_insert_pos>
	bytes_in_input_buffer = 0;
    161e:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <bytes_in_input_buffer>
    1622:	08 95       	ret

00001624 <__vector_19>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART_UDRE_vect) 
{
    1624:	1f 92       	push	r1
    1626:	0f 92       	push	r0
    1628:	0f b6       	in	r0, 0x3f	; 63
    162a:	0f 92       	push	r0
    162c:	11 24       	eor	r1, r1
    162e:	2f 93       	push	r18
    1630:	8f 93       	push	r24
    1632:	9f 93       	push	r25
    1634:	ef 93       	push	r30
    1636:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    1638:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <bytes_in_out_buffer>
    163c:	88 23       	and	r24, r24
    163e:	29 f1       	breq	.+74     	; 0x168a <__vector_19+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    1640:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <out_insert_pos>
    1644:	20 91 a0 03 	lds	r18, 0x03A0	; 0x8003a0 <bytes_in_out_buffer>
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	82 1b       	sub	r24, r18
    164c:	91 09       	sbc	r25, r1
    164e:	5a f4       	brpl	.+22     	; 0x1666 <__vector_19+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1650:	e0 91 9f 03 	lds	r30, 0x039F	; 0x80039f <out_insert_pos>
    1654:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <bytes_in_out_buffer>
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	e8 1b       	sub	r30, r24
    165c:	f1 09       	sbc	r31, r1
    165e:	e0 56       	subi	r30, 0x60	; 96
    1660:	fb 4f       	sbci	r31, 0xFB	; 251
    1662:	90 81       	ld	r25, Z
    1664:	0a c0       	rjmp	.+20     	; 0x167a <__vector_19+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    1666:	e0 91 9f 03 	lds	r30, 0x039F	; 0x80039f <out_insert_pos>
    166a:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <bytes_in_out_buffer>
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	e8 1b       	sub	r30, r24
    1672:	f1 09       	sbc	r31, r1
    1674:	ef 55       	subi	r30, 0x5F	; 95
    1676:	fc 4f       	sbci	r31, 0xFC	; 252
    1678:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    167a:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <bytes_in_out_buffer>
    167e:	81 50       	subi	r24, 0x01	; 1
    1680:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    1684:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    1688:	05 c0       	rjmp	.+10     	; 0x1694 <__vector_19+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    168a:	e1 ec       	ldi	r30, 0xC1	; 193
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	8f 7d       	andi	r24, 0xDF	; 223
    1692:	80 83       	st	Z, r24
	}
}
    1694:	ff 91       	pop	r31
    1696:	ef 91       	pop	r30
    1698:	9f 91       	pop	r25
    169a:	8f 91       	pop	r24
    169c:	2f 91       	pop	r18
    169e:	0f 90       	pop	r0
    16a0:	0f be       	out	0x3f, r0	; 63
    16a2:	0f 90       	pop	r0
    16a4:	1f 90       	pop	r1
    16a6:	18 95       	reti

000016a8 <__vector_18>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART_RX_vect) 
{
    16a8:	1f 92       	push	r1
    16aa:	0f 92       	push	r0
    16ac:	0f b6       	in	r0, 0x3f	; 63
    16ae:	0f 92       	push	r0
    16b0:	11 24       	eor	r1, r1
    16b2:	2f 93       	push	r18
    16b4:	3f 93       	push	r19
    16b6:	4f 93       	push	r20
    16b8:	5f 93       	push	r21
    16ba:	6f 93       	push	r22
    16bc:	7f 93       	push	r23
    16be:	8f 93       	push	r24
    16c0:	9f 93       	push	r25
    16c2:	af 93       	push	r26
    16c4:	bf 93       	push	r27
    16c6:	cf 93       	push	r28
    16c8:	ef 93       	push	r30
    16ca:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    16cc:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    16d0:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <do_echo>
    16d4:	88 23       	and	r24, r24
    16d6:	49 f0       	breq	.+18     	; 0x16ea <__vector_18+0x42>
    16d8:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <bytes_in_out_buffer>
    16dc:	8f 3f       	cpi	r24, 0xFF	; 255
    16de:	29 f0       	breq	.+10     	; 0x16ea <__vector_18+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    16e0:	60 e0       	ldi	r22, 0x00	; 0
    16e2:	70 e0       	ldi	r23, 0x00	; 0
    16e4:	8c 2f       	mov	r24, r28
    16e6:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    16ea:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <bytes_in_input_buffer>
    16ee:	80 31       	cpi	r24, 0x10	; 16
    16f0:	20 f0       	brcs	.+8      	; 0x16fa <__vector_18+0x52>
		input_overrun = 1;
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <input_overrun>
    16f8:	18 c0       	rjmp	.+48     	; 0x172a <__vector_18+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    16fa:	cd 30       	cpi	r28, 0x0D	; 13
    16fc:	09 f4       	brne	.+2      	; 0x1700 <__vector_18+0x58>
			c = '\n';
    16fe:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    1700:	e0 91 a0 04 	lds	r30, 0x04A0	; 0x8004a0 <input_insert_pos>
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	8e 0f       	add	r24, r30
    1708:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <input_insert_pos>
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	ef 55       	subi	r30, 0x5F	; 95
    1710:	fb 4f       	sbci	r31, 0xFB	; 251
    1712:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    1714:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <bytes_in_input_buffer>
    1718:	8f 5f       	subi	r24, 0xFF	; 255
    171a:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    171e:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <input_insert_pos>
    1722:	80 31       	cpi	r24, 0x10	; 16
    1724:	11 f4       	brne	.+4      	; 0x172a <__vector_18+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    1726:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <input_insert_pos>
		}
	}
}
    172a:	ff 91       	pop	r31
    172c:	ef 91       	pop	r30
    172e:	cf 91       	pop	r28
    1730:	bf 91       	pop	r27
    1732:	af 91       	pop	r26
    1734:	9f 91       	pop	r25
    1736:	8f 91       	pop	r24
    1738:	7f 91       	pop	r23
    173a:	6f 91       	pop	r22
    173c:	5f 91       	pop	r21
    173e:	4f 91       	pop	r20
    1740:	3f 91       	pop	r19
    1742:	2f 91       	pop	r18
    1744:	0f 90       	pop	r0
    1746:	0f be       	out	0x3f, r0	; 63
    1748:	0f 90       	pop	r0
    174a:	1f 90       	pop	r1
    174c:	18 95       	reti

0000174e <move_terminal_cursor>:
	printf_P(PSTR("\x1b[2J"));
}

void clear_to_end_of_line(void) {
	printf_P(PSTR("\x1b[K"));
}
    174e:	9f 93       	push	r25
    1750:	8f 93       	push	r24
    1752:	7f 93       	push	r23
    1754:	6f 93       	push	r22
    1756:	89 e3       	ldi	r24, 0x39	; 57
    1758:	91 e0       	ldi	r25, 0x01	; 1
    175a:	9f 93       	push	r25
    175c:	8f 93       	push	r24
    175e:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <printf_P>
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0
    176e:	08 95       	ret

00001770 <normal_display_mode>:
    1770:	84 e3       	ldi	r24, 0x34	; 52
    1772:	91 e0       	ldi	r25, 0x01	; 1
    1774:	9f 93       	push	r25
    1776:	8f 93       	push	r24
    1778:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <printf_P>
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	08 95       	ret

00001782 <clear_terminal>:
    1782:	8f e2       	ldi	r24, 0x2F	; 47
    1784:	91 e0       	ldi	r25, 0x01	; 1
    1786:	9f 93       	push	r25
    1788:	8f 93       	push	r24
    178a:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <printf_P>
    178e:	0f 90       	pop	r0
    1790:	0f 90       	pop	r0
    1792:	08 95       	ret

00001794 <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter) {
	printf_P(PSTR("\x1b[%dm"), parameter);
    1794:	1f 92       	push	r1
    1796:	8f 93       	push	r24
    1798:	89 e2       	ldi	r24, 0x29	; 41
    179a:	91 e0       	ldi	r25, 0x01	; 1
    179c:	9f 93       	push	r25
    179e:	8f 93       	push	r24
    17a0:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <printf_P>
}
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	08 95       	ret

000017ae <hide_cursor>:

void hide_cursor() {
	printf_P(PSTR("\x1b[?25l"));
    17ae:	82 e2       	ldi	r24, 0x22	; 34
    17b0:	91 e0       	ldi	r25, 0x01	; 1
    17b2:	9f 93       	push	r25
    17b4:	8f 93       	push	r24
    17b6:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <printf_P>
}
    17ba:	0f 90       	pop	r0
    17bc:	0f 90       	pop	r0
    17be:	08 95       	ret

000017c0 <init_timer0>:
 */
void init_timer0(void) {
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clockTicks = 0L;
    17c0:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <clockTicks>
    17c4:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <clockTicks+0x1>
    17c8:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <clockTicks+0x2>
    17cc:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <clockTicks+0x3>
	
	/* Set port B (pins 3, 4 and 5) to be outputs */
	DDRB |= 0x38;
    17d0:	84 b1       	in	r24, 0x04	; 4
    17d2:	88 63       	ori	r24, 0x38	; 56
    17d4:	84 b9       	out	0x04, r24	; 4

	/* Set port C, pin 3 to be an output */
	DDRC |= (1 << DDC3);
    17d6:	87 b1       	in	r24, 0x07	; 7
    17d8:	88 60       	ori	r24, 0x08	; 8
    17da:	87 b9       	out	0x07, r24	; 7
	
	/* Set port D (pins 2 to 7) to be outputs */
	DDRD |= 0xFC;
    17dc:	8a b1       	in	r24, 0x0a	; 10
    17de:	8c 6f       	ori	r24, 0xFC	; 252
    17e0:	8a b9       	out	0x0a, r24	; 10
	
	/* Clear the timer */
	TCNT0 = 0;
    17e2:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 249;
    17e4:	89 ef       	ldi	r24, 0xF9	; 249
    17e6:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    17e8:	82 e0       	ldi	r24, 0x02	; 2
    17ea:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    17ec:	83 e0       	ldi	r24, 0x03	; 3
    17ee:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    17f0:	ee e6       	ldi	r30, 0x6E	; 110
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	82 60       	ori	r24, 0x02	; 2
    17f8:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    17fa:	85 b3       	in	r24, 0x15	; 21
    17fc:	82 70       	andi	r24, 0x02	; 2
    17fe:	85 bb       	out	0x15, r24	; 21
    1800:	08 95       	ret

00001802 <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interruptsOn = bit_is_set(SREG, SREG_I);
    1802:	8f b7       	in	r24, 0x3f	; 63
    1804:	28 2f       	mov	r18, r24
    1806:	20 78       	andi	r18, 0x80	; 128
	cli();
    1808:	f8 94       	cli
	returnValue = clockTicks;
    180a:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <clockTicks>
    180e:	70 91 56 01 	lds	r23, 0x0156	; 0x800156 <clockTicks+0x1>
    1812:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <clockTicks+0x2>
    1816:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <clockTicks+0x3>
	if(interruptsOn) {
    181a:	22 23       	and	r18, r18
    181c:	09 f0       	breq	.+2      	; 0x1820 <get_current_time+0x1e>
		sei();
    181e:	78 94       	sei
	}
	return returnValue;
}
    1820:	08 95       	ret

00001822 <display_digit>:

void display_digit(uint8_t number, uint8_t digit)
{
	// Right digit select is on port B, left is port C.
	PORTB |= (!digit << PORTB3);
    1822:	95 b1       	in	r25, 0x05	; 5
    1824:	61 11       	cpse	r22, r1
    1826:	02 c0       	rjmp	.+4      	; 0x182c <display_digit+0xa>
    1828:	28 e0       	ldi	r18, 0x08	; 8
    182a:	01 c0       	rjmp	.+2      	; 0x182e <display_digit+0xc>
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	92 2b       	or	r25, r18
    1830:	95 b9       	out	0x05, r25	; 5
	PORTC |= (digit << PORTC3);
    1832:	98 b1       	in	r25, 0x08	; 8
    1834:	70 e0       	ldi	r23, 0x00	; 0
    1836:	66 0f       	add	r22, r22
    1838:	77 1f       	adc	r23, r23
    183a:	66 0f       	add	r22, r22
    183c:	77 1f       	adc	r23, r23
    183e:	66 0f       	add	r22, r22
    1840:	77 1f       	adc	r23, r23
    1842:	69 2b       	or	r22, r25
    1844:	68 b9       	out	0x08, r22	; 8
	
	// We assume digit is in range 0 to 9
	// Note |= for PORTB since we do not want to overwrite the CC pin setting.
	PORTB |= ((seven_seg[number] & 0xC0) >> 6) << 4; // output upper 2 bits of SSD to Port B bits 4 and 5
    1846:	45 b1       	in	r20, 0x05	; 5
    1848:	e8 2f       	mov	r30, r24
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	e2 5f       	subi	r30, 0xF2	; 242
    184e:	fe 4f       	sbci	r31, 0xFE	; 254
    1850:	90 81       	ld	r25, Z
    1852:	92 95       	swap	r25
    1854:	96 95       	lsr	r25
    1856:	96 95       	lsr	r25
    1858:	93 70       	andi	r25, 0x03	; 3
    185a:	80 e1       	ldi	r24, 0x10	; 16
    185c:	98 9f       	mul	r25, r24
    185e:	90 01       	movw	r18, r0
    1860:	11 24       	eor	r1, r1
    1862:	24 2b       	or	r18, r20
    1864:	25 b9       	out	0x05, r18	; 5
	PORTD |= (seven_seg[number] & 0x3F) << 2; // output lower 6 bits of SSD to Port D.
    1866:	2b b1       	in	r18, 0x0b	; 11
    1868:	90 81       	ld	r25, Z
    186a:	89 2f       	mov	r24, r25
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	88 0f       	add	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	88 0f       	add	r24, r24
    1874:	99 1f       	adc	r25, r25
    1876:	82 2b       	or	r24, r18
    1878:	8b b9       	out	0x0b, r24	; 11
    187a:	08 95       	ret

0000187c <pause_game>:
}

void pause_game(void) {
	if (pause_state == 0) {
    187c:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <pause_state>
    1880:	81 11       	cpse	r24, r1
    1882:	04 c0       	rjmp	.+8      	; 0x188c <pause_game+0x10>
		pause_state = 1;
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <pause_state>
    188a:	08 95       	ret
	} else {
		pause_state = 0;
    188c:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <pause_state>
    1890:	08 95       	ret

00001892 <__vector_14>:
	}
}

ISR(TIMER0_COMPA_vect) {
    1892:	1f 92       	push	r1
    1894:	0f 92       	push	r0
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	0f 92       	push	r0
    189a:	11 24       	eor	r1, r1
    189c:	2f 93       	push	r18
    189e:	3f 93       	push	r19
    18a0:	4f 93       	push	r20
    18a2:	5f 93       	push	r21
    18a4:	6f 93       	push	r22
    18a6:	7f 93       	push	r23
    18a8:	8f 93       	push	r24
    18aa:	9f 93       	push	r25
    18ac:	af 93       	push	r26
    18ae:	bf 93       	push	r27
    18b0:	ef 93       	push	r30
    18b2:	ff 93       	push	r31
	/* Increment our clock tick count */
	if (pause_state == 0) {
    18b4:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <pause_state>
    18b8:	81 11       	cpse	r24, r1
    18ba:	14 c0       	rjmp	.+40     	; 0x18e4 <__vector_14+0x52>
		clockTicks++;
    18bc:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <clockTicks>
    18c0:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <clockTicks+0x1>
    18c4:	a0 91 57 01 	lds	r26, 0x0157	; 0x800157 <clockTicks+0x2>
    18c8:	b0 91 58 01 	lds	r27, 0x0158	; 0x800158 <clockTicks+0x3>
    18cc:	01 96       	adiw	r24, 0x01	; 1
    18ce:	a1 1d       	adc	r26, r1
    18d0:	b1 1d       	adc	r27, r1
    18d2:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <clockTicks>
    18d6:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <clockTicks+0x1>
    18da:	a0 93 57 01 	sts	0x0157, r26	; 0x800157 <clockTicks+0x2>
    18de:	b0 93 58 01 	sts	0x0158, r27	; 0x800158 <clockTicks+0x3>
    18e2:	10 c0       	rjmp	.+32     	; 0x1904 <__vector_14+0x72>
	} else {
		clockTicks = clockTicks;
    18e4:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <clockTicks>
    18e8:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <clockTicks+0x1>
    18ec:	a0 91 57 01 	lds	r26, 0x0157	; 0x800157 <clockTicks+0x2>
    18f0:	b0 91 58 01 	lds	r27, 0x0158	; 0x800158 <clockTicks+0x3>
    18f4:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <clockTicks>
    18f8:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <clockTicks+0x1>
    18fc:	a0 93 57 01 	sts	0x0157, r26	; 0x800157 <clockTicks+0x2>
    1900:	b0 93 58 01 	sts	0x0158, r27	; 0x800158 <clockTicks+0x3>
	}
	
	
	uint8_t value;
	
	if(digit == 0) {
    1904:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <digit>
    1908:	81 11       	cpse	r24, r1
    190a:	14 c0       	rjmp	.+40     	; 0x1934 <__vector_14+0xa2>
		/* Extract the ones place from the timer counter 0 value */
		/* HINT: Consider the modulus (%) operator. */
		value = get_score() % 10;
    190c:	0e 94 4f 0a 	call	0x149e	; 0x149e <get_score>
    1910:	38 2f       	mov	r19, r24
    1912:	9d ec       	ldi	r25, 0xCD	; 205
    1914:	89 9f       	mul	r24, r25
    1916:	91 2d       	mov	r25, r1
    1918:	11 24       	eor	r1, r1
    191a:	89 2f       	mov	r24, r25
    191c:	86 95       	lsr	r24
    191e:	86 95       	lsr	r24
    1920:	86 95       	lsr	r24
    1922:	98 2f       	mov	r25, r24
    1924:	99 0f       	add	r25, r25
    1926:	29 2f       	mov	r18, r25
    1928:	22 0f       	add	r18, r18
    192a:	22 0f       	add	r18, r18
    192c:	92 0f       	add	r25, r18
    192e:	83 2f       	mov	r24, r19
    1930:	89 1b       	sub	r24, r25
    1932:	16 c0       	rjmp	.+44     	; 0x1960 <__vector_14+0xce>
		} else {
		/* Extract the tens place from the timer counter 0 */
		value = (get_score() / 10) % 10;
    1934:	0e 94 4f 0a 	call	0x149e	; 0x149e <get_score>
    1938:	9d ec       	ldi	r25, 0xCD	; 205
    193a:	89 9f       	mul	r24, r25
    193c:	21 2d       	mov	r18, r1
    193e:	11 24       	eor	r1, r1
    1940:	26 95       	lsr	r18
    1942:	26 95       	lsr	r18
    1944:	26 95       	lsr	r18
    1946:	29 9f       	mul	r18, r25
    1948:	81 2d       	mov	r24, r1
    194a:	11 24       	eor	r1, r1
    194c:	86 95       	lsr	r24
    194e:	86 95       	lsr	r24
    1950:	86 95       	lsr	r24
    1952:	88 0f       	add	r24, r24
    1954:	98 2f       	mov	r25, r24
    1956:	99 0f       	add	r25, r25
    1958:	99 0f       	add	r25, r25
    195a:	89 0f       	add	r24, r25
    195c:	28 1b       	sub	r18, r24
    195e:	82 2f       	mov	r24, r18
	}
	display_digit(value, digit);
    1960:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <digit>
    1964:	0e 94 11 0c 	call	0x1822	; 0x1822 <display_digit>
	/* Change the digit flag for next time. if 0 becomes 1, if 1 becomes 0. */
	digit = 1 - digit;
    1968:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <digit>
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	89 1b       	sub	r24, r25
    1970:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <digit>
}
    1974:	ff 91       	pop	r31
    1976:	ef 91       	pop	r30
    1978:	bf 91       	pop	r27
    197a:	af 91       	pop	r26
    197c:	9f 91       	pop	r25
    197e:	8f 91       	pop	r24
    1980:	7f 91       	pop	r23
    1982:	6f 91       	pop	r22
    1984:	5f 91       	pop	r21
    1986:	4f 91       	pop	r20
    1988:	3f 91       	pop	r19
    198a:	2f 91       	pop	r18
    198c:	0f 90       	pop	r0
    198e:	0f be       	out	0x3f, r0	; 63
    1990:	0f 90       	pop	r0
    1992:	1f 90       	pop	r1
    1994:	18 95       	reti

00001996 <__divmodsi4>:
    1996:	05 2e       	mov	r0, r21
    1998:	97 fb       	bst	r25, 7
    199a:	1e f4       	brtc	.+6      	; 0x19a2 <__divmodsi4+0xc>
    199c:	00 94       	com	r0
    199e:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__negsi2>
    19a2:	57 fd       	sbrc	r21, 7
    19a4:	07 d0       	rcall	.+14     	; 0x19b4 <__divmodsi4_neg2>
    19a6:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__udivmodsi4>
    19aa:	07 fc       	sbrc	r0, 7
    19ac:	03 d0       	rcall	.+6      	; 0x19b4 <__divmodsi4_neg2>
    19ae:	4e f4       	brtc	.+18     	; 0x19c2 <__divmodsi4_exit>
    19b0:	0c 94 e2 0c 	jmp	0x19c4	; 0x19c4 <__negsi2>

000019b4 <__divmodsi4_neg2>:
    19b4:	50 95       	com	r21
    19b6:	40 95       	com	r20
    19b8:	30 95       	com	r19
    19ba:	21 95       	neg	r18
    19bc:	3f 4f       	sbci	r19, 0xFF	; 255
    19be:	4f 4f       	sbci	r20, 0xFF	; 255
    19c0:	5f 4f       	sbci	r21, 0xFF	; 255

000019c2 <__divmodsi4_exit>:
    19c2:	08 95       	ret

000019c4 <__negsi2>:
    19c4:	90 95       	com	r25
    19c6:	80 95       	com	r24
    19c8:	70 95       	com	r23
    19ca:	61 95       	neg	r22
    19cc:	7f 4f       	sbci	r23, 0xFF	; 255
    19ce:	8f 4f       	sbci	r24, 0xFF	; 255
    19d0:	9f 4f       	sbci	r25, 0xFF	; 255
    19d2:	08 95       	ret

000019d4 <__udivmodsi4>:
    19d4:	a1 e2       	ldi	r26, 0x21	; 33
    19d6:	1a 2e       	mov	r1, r26
    19d8:	aa 1b       	sub	r26, r26
    19da:	bb 1b       	sub	r27, r27
    19dc:	fd 01       	movw	r30, r26
    19de:	0d c0       	rjmp	.+26     	; 0x19fa <__udivmodsi4_ep>

000019e0 <__udivmodsi4_loop>:
    19e0:	aa 1f       	adc	r26, r26
    19e2:	bb 1f       	adc	r27, r27
    19e4:	ee 1f       	adc	r30, r30
    19e6:	ff 1f       	adc	r31, r31
    19e8:	a2 17       	cp	r26, r18
    19ea:	b3 07       	cpc	r27, r19
    19ec:	e4 07       	cpc	r30, r20
    19ee:	f5 07       	cpc	r31, r21
    19f0:	20 f0       	brcs	.+8      	; 0x19fa <__udivmodsi4_ep>
    19f2:	a2 1b       	sub	r26, r18
    19f4:	b3 0b       	sbc	r27, r19
    19f6:	e4 0b       	sbc	r30, r20
    19f8:	f5 0b       	sbc	r31, r21

000019fa <__udivmodsi4_ep>:
    19fa:	66 1f       	adc	r22, r22
    19fc:	77 1f       	adc	r23, r23
    19fe:	88 1f       	adc	r24, r24
    1a00:	99 1f       	adc	r25, r25
    1a02:	1a 94       	dec	r1
    1a04:	69 f7       	brne	.-38     	; 0x19e0 <__udivmodsi4_loop>
    1a06:	60 95       	com	r22
    1a08:	70 95       	com	r23
    1a0a:	80 95       	com	r24
    1a0c:	90 95       	com	r25
    1a0e:	9b 01       	movw	r18, r22
    1a10:	ac 01       	movw	r20, r24
    1a12:	bd 01       	movw	r22, r26
    1a14:	cf 01       	movw	r24, r30
    1a16:	08 95       	ret

00001a18 <fgetc>:
    1a18:	cf 93       	push	r28
    1a1a:	df 93       	push	r29
    1a1c:	ec 01       	movw	r28, r24
    1a1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a20:	20 ff       	sbrs	r18, 0
    1a22:	33 c0       	rjmp	.+102    	; 0x1a8a <fgetc+0x72>
    1a24:	26 ff       	sbrs	r18, 6
    1a26:	0a c0       	rjmp	.+20     	; 0x1a3c <fgetc+0x24>
    1a28:	2f 7b       	andi	r18, 0xBF	; 191
    1a2a:	2b 83       	std	Y+3, r18	; 0x03
    1a2c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a2e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a30:	01 96       	adiw	r24, 0x01	; 1
    1a32:	9f 83       	std	Y+7, r25	; 0x07
    1a34:	8e 83       	std	Y+6, r24	; 0x06
    1a36:	8a 81       	ldd	r24, Y+2	; 0x02
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	29 c0       	rjmp	.+82     	; 0x1a8e <fgetc+0x76>
    1a3c:	22 ff       	sbrs	r18, 2
    1a3e:	0f c0       	rjmp	.+30     	; 0x1a5e <fgetc+0x46>
    1a40:	e8 81       	ld	r30, Y
    1a42:	f9 81       	ldd	r31, Y+1	; 0x01
    1a44:	80 81       	ld	r24, Z
    1a46:	08 2e       	mov	r0, r24
    1a48:	00 0c       	add	r0, r0
    1a4a:	99 0b       	sbc	r25, r25
    1a4c:	00 97       	sbiw	r24, 0x00	; 0
    1a4e:	19 f4       	brne	.+6      	; 0x1a56 <fgetc+0x3e>
    1a50:	20 62       	ori	r18, 0x20	; 32
    1a52:	2b 83       	std	Y+3, r18	; 0x03
    1a54:	1a c0       	rjmp	.+52     	; 0x1a8a <fgetc+0x72>
    1a56:	31 96       	adiw	r30, 0x01	; 1
    1a58:	f9 83       	std	Y+1, r31	; 0x01
    1a5a:	e8 83       	st	Y, r30
    1a5c:	0e c0       	rjmp	.+28     	; 0x1a7a <fgetc+0x62>
    1a5e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1a60:	fb 85       	ldd	r31, Y+11	; 0x0b
    1a62:	09 95       	icall
    1a64:	97 ff       	sbrs	r25, 7
    1a66:	09 c0       	rjmp	.+18     	; 0x1a7a <fgetc+0x62>
    1a68:	2b 81       	ldd	r18, Y+3	; 0x03
    1a6a:	01 96       	adiw	r24, 0x01	; 1
    1a6c:	11 f0       	breq	.+4      	; 0x1a72 <fgetc+0x5a>
    1a6e:	80 e2       	ldi	r24, 0x20	; 32
    1a70:	01 c0       	rjmp	.+2      	; 0x1a74 <fgetc+0x5c>
    1a72:	80 e1       	ldi	r24, 0x10	; 16
    1a74:	82 2b       	or	r24, r18
    1a76:	8b 83       	std	Y+3, r24	; 0x03
    1a78:	08 c0       	rjmp	.+16     	; 0x1a8a <fgetc+0x72>
    1a7a:	2e 81       	ldd	r18, Y+6	; 0x06
    1a7c:	3f 81       	ldd	r19, Y+7	; 0x07
    1a7e:	2f 5f       	subi	r18, 0xFF	; 255
    1a80:	3f 4f       	sbci	r19, 0xFF	; 255
    1a82:	3f 83       	std	Y+7, r19	; 0x07
    1a84:	2e 83       	std	Y+6, r18	; 0x06
    1a86:	99 27       	eor	r25, r25
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <fgetc+0x76>
    1a8a:	8f ef       	ldi	r24, 0xFF	; 255
    1a8c:	9f ef       	ldi	r25, 0xFF	; 255
    1a8e:	df 91       	pop	r29
    1a90:	cf 91       	pop	r28
    1a92:	08 95       	ret

00001a94 <printf>:
    1a94:	a0 e0       	ldi	r26, 0x00	; 0
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	e0 e5       	ldi	r30, 0x50	; 80
    1a9a:	fd e0       	ldi	r31, 0x0D	; 13
    1a9c:	0c 94 27 10 	jmp	0x204e	; 0x204e <__prologue_saves__+0x20>
    1aa0:	ae 01       	movw	r20, r28
    1aa2:	4b 5f       	subi	r20, 0xFB	; 251
    1aa4:	5f 4f       	sbci	r21, 0xFF	; 255
    1aa6:	fa 01       	movw	r30, r20
    1aa8:	61 91       	ld	r22, Z+
    1aaa:	71 91       	ld	r23, Z+
    1aac:	af 01       	movw	r20, r30
    1aae:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <__iob+0x2>
    1ab2:	90 91 b6 04 	lds	r25, 0x04B6	; 0x8004b6 <__iob+0x3>
    1ab6:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <vfprintf>
    1aba:	e2 e0       	ldi	r30, 0x02	; 2
    1abc:	0c 94 43 10 	jmp	0x2086	; 0x2086 <__epilogue_restores__+0x20>

00001ac0 <printf_P>:
    1ac0:	a0 e0       	ldi	r26, 0x00	; 0
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	e6 e6       	ldi	r30, 0x66	; 102
    1ac6:	fd e0       	ldi	r31, 0x0D	; 13
    1ac8:	0c 94 25 10 	jmp	0x204a	; 0x204a <__prologue_saves__+0x1c>
    1acc:	ae 01       	movw	r20, r28
    1ace:	49 5f       	subi	r20, 0xF9	; 249
    1ad0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ad2:	da 01       	movw	r26, r20
    1ad4:	6d 91       	ld	r22, X+
    1ad6:	7d 91       	ld	r23, X+
    1ad8:	ad 01       	movw	r20, r26
    1ada:	03 eb       	ldi	r16, 0xB3	; 179
    1adc:	14 e0       	ldi	r17, 0x04	; 4
    1ade:	f8 01       	movw	r30, r16
    1ae0:	82 81       	ldd	r24, Z+2	; 0x02
    1ae2:	93 81       	ldd	r25, Z+3	; 0x03
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	13 96       	adiw	r26, 0x03	; 3
    1ae8:	2c 91       	ld	r18, X
    1aea:	13 97       	sbiw	r26, 0x03	; 3
    1aec:	28 60       	ori	r18, 0x08	; 8
    1aee:	13 96       	adiw	r26, 0x03	; 3
    1af0:	2c 93       	st	X, r18
    1af2:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <vfprintf>
    1af6:	d8 01       	movw	r26, r16
    1af8:	12 96       	adiw	r26, 0x02	; 2
    1afa:	ed 91       	ld	r30, X+
    1afc:	fc 91       	ld	r31, X
    1afe:	13 97       	sbiw	r26, 0x03	; 3
    1b00:	23 81       	ldd	r18, Z+3	; 0x03
    1b02:	27 7f       	andi	r18, 0xF7	; 247
    1b04:	23 83       	std	Z+3, r18	; 0x03
    1b06:	e4 e0       	ldi	r30, 0x04	; 4
    1b08:	0c 94 41 10 	jmp	0x2082	; 0x2082 <__epilogue_restores__+0x1c>

00001b0c <vfprintf>:
    1b0c:	ab e0       	ldi	r26, 0x0B	; 11
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	ec e8       	ldi	r30, 0x8C	; 140
    1b12:	fd e0       	ldi	r31, 0x0D	; 13
    1b14:	0c 94 17 10 	jmp	0x202e	; 0x202e <__prologue_saves__>
    1b18:	6c 01       	movw	r12, r24
    1b1a:	7b 01       	movw	r14, r22
    1b1c:	8a 01       	movw	r16, r20
    1b1e:	fc 01       	movw	r30, r24
    1b20:	17 82       	std	Z+7, r1	; 0x07
    1b22:	16 82       	std	Z+6, r1	; 0x06
    1b24:	83 81       	ldd	r24, Z+3	; 0x03
    1b26:	81 ff       	sbrs	r24, 1
    1b28:	cc c1       	rjmp	.+920    	; 0x1ec2 <vfprintf+0x3b6>
    1b2a:	ce 01       	movw	r24, r28
    1b2c:	01 96       	adiw	r24, 0x01	; 1
    1b2e:	3c 01       	movw	r6, r24
    1b30:	f6 01       	movw	r30, r12
    1b32:	93 81       	ldd	r25, Z+3	; 0x03
    1b34:	f7 01       	movw	r30, r14
    1b36:	93 fd       	sbrc	r25, 3
    1b38:	85 91       	lpm	r24, Z+
    1b3a:	93 ff       	sbrs	r25, 3
    1b3c:	81 91       	ld	r24, Z+
    1b3e:	7f 01       	movw	r14, r30
    1b40:	88 23       	and	r24, r24
    1b42:	09 f4       	brne	.+2      	; 0x1b46 <vfprintf+0x3a>
    1b44:	ba c1       	rjmp	.+884    	; 0x1eba <vfprintf+0x3ae>
    1b46:	85 32       	cpi	r24, 0x25	; 37
    1b48:	39 f4       	brne	.+14     	; 0x1b58 <vfprintf+0x4c>
    1b4a:	93 fd       	sbrc	r25, 3
    1b4c:	85 91       	lpm	r24, Z+
    1b4e:	93 ff       	sbrs	r25, 3
    1b50:	81 91       	ld	r24, Z+
    1b52:	7f 01       	movw	r14, r30
    1b54:	85 32       	cpi	r24, 0x25	; 37
    1b56:	29 f4       	brne	.+10     	; 0x1b62 <vfprintf+0x56>
    1b58:	b6 01       	movw	r22, r12
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <fputc>
    1b60:	e7 cf       	rjmp	.-50     	; 0x1b30 <vfprintf+0x24>
    1b62:	91 2c       	mov	r9, r1
    1b64:	21 2c       	mov	r2, r1
    1b66:	31 2c       	mov	r3, r1
    1b68:	ff e1       	ldi	r31, 0x1F	; 31
    1b6a:	f3 15       	cp	r31, r3
    1b6c:	d8 f0       	brcs	.+54     	; 0x1ba4 <vfprintf+0x98>
    1b6e:	8b 32       	cpi	r24, 0x2B	; 43
    1b70:	79 f0       	breq	.+30     	; 0x1b90 <vfprintf+0x84>
    1b72:	38 f4       	brcc	.+14     	; 0x1b82 <vfprintf+0x76>
    1b74:	80 32       	cpi	r24, 0x20	; 32
    1b76:	79 f0       	breq	.+30     	; 0x1b96 <vfprintf+0x8a>
    1b78:	83 32       	cpi	r24, 0x23	; 35
    1b7a:	a1 f4       	brne	.+40     	; 0x1ba4 <vfprintf+0x98>
    1b7c:	23 2d       	mov	r18, r3
    1b7e:	20 61       	ori	r18, 0x10	; 16
    1b80:	1d c0       	rjmp	.+58     	; 0x1bbc <vfprintf+0xb0>
    1b82:	8d 32       	cpi	r24, 0x2D	; 45
    1b84:	61 f0       	breq	.+24     	; 0x1b9e <vfprintf+0x92>
    1b86:	80 33       	cpi	r24, 0x30	; 48
    1b88:	69 f4       	brne	.+26     	; 0x1ba4 <vfprintf+0x98>
    1b8a:	23 2d       	mov	r18, r3
    1b8c:	21 60       	ori	r18, 0x01	; 1
    1b8e:	16 c0       	rjmp	.+44     	; 0x1bbc <vfprintf+0xb0>
    1b90:	83 2d       	mov	r24, r3
    1b92:	82 60       	ori	r24, 0x02	; 2
    1b94:	38 2e       	mov	r3, r24
    1b96:	e3 2d       	mov	r30, r3
    1b98:	e4 60       	ori	r30, 0x04	; 4
    1b9a:	3e 2e       	mov	r3, r30
    1b9c:	2a c0       	rjmp	.+84     	; 0x1bf2 <vfprintf+0xe6>
    1b9e:	f3 2d       	mov	r31, r3
    1ba0:	f8 60       	ori	r31, 0x08	; 8
    1ba2:	1d c0       	rjmp	.+58     	; 0x1bde <vfprintf+0xd2>
    1ba4:	37 fc       	sbrc	r3, 7
    1ba6:	2d c0       	rjmp	.+90     	; 0x1c02 <vfprintf+0xf6>
    1ba8:	20 ed       	ldi	r18, 0xD0	; 208
    1baa:	28 0f       	add	r18, r24
    1bac:	2a 30       	cpi	r18, 0x0A	; 10
    1bae:	40 f0       	brcs	.+16     	; 0x1bc0 <vfprintf+0xb4>
    1bb0:	8e 32       	cpi	r24, 0x2E	; 46
    1bb2:	b9 f4       	brne	.+46     	; 0x1be2 <vfprintf+0xd6>
    1bb4:	36 fc       	sbrc	r3, 6
    1bb6:	81 c1       	rjmp	.+770    	; 0x1eba <vfprintf+0x3ae>
    1bb8:	23 2d       	mov	r18, r3
    1bba:	20 64       	ori	r18, 0x40	; 64
    1bbc:	32 2e       	mov	r3, r18
    1bbe:	19 c0       	rjmp	.+50     	; 0x1bf2 <vfprintf+0xe6>
    1bc0:	36 fe       	sbrs	r3, 6
    1bc2:	06 c0       	rjmp	.+12     	; 0x1bd0 <vfprintf+0xc4>
    1bc4:	8a e0       	ldi	r24, 0x0A	; 10
    1bc6:	98 9e       	mul	r9, r24
    1bc8:	20 0d       	add	r18, r0
    1bca:	11 24       	eor	r1, r1
    1bcc:	92 2e       	mov	r9, r18
    1bce:	11 c0       	rjmp	.+34     	; 0x1bf2 <vfprintf+0xe6>
    1bd0:	ea e0       	ldi	r30, 0x0A	; 10
    1bd2:	2e 9e       	mul	r2, r30
    1bd4:	20 0d       	add	r18, r0
    1bd6:	11 24       	eor	r1, r1
    1bd8:	22 2e       	mov	r2, r18
    1bda:	f3 2d       	mov	r31, r3
    1bdc:	f0 62       	ori	r31, 0x20	; 32
    1bde:	3f 2e       	mov	r3, r31
    1be0:	08 c0       	rjmp	.+16     	; 0x1bf2 <vfprintf+0xe6>
    1be2:	8c 36       	cpi	r24, 0x6C	; 108
    1be4:	21 f4       	brne	.+8      	; 0x1bee <vfprintf+0xe2>
    1be6:	83 2d       	mov	r24, r3
    1be8:	80 68       	ori	r24, 0x80	; 128
    1bea:	38 2e       	mov	r3, r24
    1bec:	02 c0       	rjmp	.+4      	; 0x1bf2 <vfprintf+0xe6>
    1bee:	88 36       	cpi	r24, 0x68	; 104
    1bf0:	41 f4       	brne	.+16     	; 0x1c02 <vfprintf+0xf6>
    1bf2:	f7 01       	movw	r30, r14
    1bf4:	93 fd       	sbrc	r25, 3
    1bf6:	85 91       	lpm	r24, Z+
    1bf8:	93 ff       	sbrs	r25, 3
    1bfa:	81 91       	ld	r24, Z+
    1bfc:	7f 01       	movw	r14, r30
    1bfe:	81 11       	cpse	r24, r1
    1c00:	b3 cf       	rjmp	.-154    	; 0x1b68 <vfprintf+0x5c>
    1c02:	98 2f       	mov	r25, r24
    1c04:	9f 7d       	andi	r25, 0xDF	; 223
    1c06:	95 54       	subi	r25, 0x45	; 69
    1c08:	93 30       	cpi	r25, 0x03	; 3
    1c0a:	28 f4       	brcc	.+10     	; 0x1c16 <vfprintf+0x10a>
    1c0c:	0c 5f       	subi	r16, 0xFC	; 252
    1c0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c10:	9f e3       	ldi	r25, 0x3F	; 63
    1c12:	99 83       	std	Y+1, r25	; 0x01
    1c14:	0d c0       	rjmp	.+26     	; 0x1c30 <vfprintf+0x124>
    1c16:	83 36       	cpi	r24, 0x63	; 99
    1c18:	31 f0       	breq	.+12     	; 0x1c26 <vfprintf+0x11a>
    1c1a:	83 37       	cpi	r24, 0x73	; 115
    1c1c:	71 f0       	breq	.+28     	; 0x1c3a <vfprintf+0x12e>
    1c1e:	83 35       	cpi	r24, 0x53	; 83
    1c20:	09 f0       	breq	.+2      	; 0x1c24 <vfprintf+0x118>
    1c22:	59 c0       	rjmp	.+178    	; 0x1cd6 <vfprintf+0x1ca>
    1c24:	21 c0       	rjmp	.+66     	; 0x1c68 <vfprintf+0x15c>
    1c26:	f8 01       	movw	r30, r16
    1c28:	80 81       	ld	r24, Z
    1c2a:	89 83       	std	Y+1, r24	; 0x01
    1c2c:	0e 5f       	subi	r16, 0xFE	; 254
    1c2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c30:	88 24       	eor	r8, r8
    1c32:	83 94       	inc	r8
    1c34:	91 2c       	mov	r9, r1
    1c36:	53 01       	movw	r10, r6
    1c38:	13 c0       	rjmp	.+38     	; 0x1c60 <vfprintf+0x154>
    1c3a:	28 01       	movw	r4, r16
    1c3c:	f2 e0       	ldi	r31, 0x02	; 2
    1c3e:	4f 0e       	add	r4, r31
    1c40:	51 1c       	adc	r5, r1
    1c42:	f8 01       	movw	r30, r16
    1c44:	a0 80       	ld	r10, Z
    1c46:	b1 80       	ldd	r11, Z+1	; 0x01
    1c48:	36 fe       	sbrs	r3, 6
    1c4a:	03 c0       	rjmp	.+6      	; 0x1c52 <vfprintf+0x146>
    1c4c:	69 2d       	mov	r22, r9
    1c4e:	70 e0       	ldi	r23, 0x00	; 0
    1c50:	02 c0       	rjmp	.+4      	; 0x1c56 <vfprintf+0x14a>
    1c52:	6f ef       	ldi	r22, 0xFF	; 255
    1c54:	7f ef       	ldi	r23, 0xFF	; 255
    1c56:	c5 01       	movw	r24, r10
    1c58:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <strnlen>
    1c5c:	4c 01       	movw	r8, r24
    1c5e:	82 01       	movw	r16, r4
    1c60:	f3 2d       	mov	r31, r3
    1c62:	ff 77       	andi	r31, 0x7F	; 127
    1c64:	3f 2e       	mov	r3, r31
    1c66:	16 c0       	rjmp	.+44     	; 0x1c94 <vfprintf+0x188>
    1c68:	28 01       	movw	r4, r16
    1c6a:	22 e0       	ldi	r18, 0x02	; 2
    1c6c:	42 0e       	add	r4, r18
    1c6e:	51 1c       	adc	r5, r1
    1c70:	f8 01       	movw	r30, r16
    1c72:	a0 80       	ld	r10, Z
    1c74:	b1 80       	ldd	r11, Z+1	; 0x01
    1c76:	36 fe       	sbrs	r3, 6
    1c78:	03 c0       	rjmp	.+6      	; 0x1c80 <vfprintf+0x174>
    1c7a:	69 2d       	mov	r22, r9
    1c7c:	70 e0       	ldi	r23, 0x00	; 0
    1c7e:	02 c0       	rjmp	.+4      	; 0x1c84 <vfprintf+0x178>
    1c80:	6f ef       	ldi	r22, 0xFF	; 255
    1c82:	7f ef       	ldi	r23, 0xFF	; 255
    1c84:	c5 01       	movw	r24, r10
    1c86:	0e 94 67 0f 	call	0x1ece	; 0x1ece <strnlen_P>
    1c8a:	4c 01       	movw	r8, r24
    1c8c:	f3 2d       	mov	r31, r3
    1c8e:	f0 68       	ori	r31, 0x80	; 128
    1c90:	3f 2e       	mov	r3, r31
    1c92:	82 01       	movw	r16, r4
    1c94:	33 fc       	sbrc	r3, 3
    1c96:	1b c0       	rjmp	.+54     	; 0x1cce <vfprintf+0x1c2>
    1c98:	82 2d       	mov	r24, r2
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	88 16       	cp	r8, r24
    1c9e:	99 06       	cpc	r9, r25
    1ca0:	b0 f4       	brcc	.+44     	; 0x1cce <vfprintf+0x1c2>
    1ca2:	b6 01       	movw	r22, r12
    1ca4:	80 e2       	ldi	r24, 0x20	; 32
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <fputc>
    1cac:	2a 94       	dec	r2
    1cae:	f4 cf       	rjmp	.-24     	; 0x1c98 <vfprintf+0x18c>
    1cb0:	f5 01       	movw	r30, r10
    1cb2:	37 fc       	sbrc	r3, 7
    1cb4:	85 91       	lpm	r24, Z+
    1cb6:	37 fe       	sbrs	r3, 7
    1cb8:	81 91       	ld	r24, Z+
    1cba:	5f 01       	movw	r10, r30
    1cbc:	b6 01       	movw	r22, r12
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <fputc>
    1cc4:	21 10       	cpse	r2, r1
    1cc6:	2a 94       	dec	r2
    1cc8:	21 e0       	ldi	r18, 0x01	; 1
    1cca:	82 1a       	sub	r8, r18
    1ccc:	91 08       	sbc	r9, r1
    1cce:	81 14       	cp	r8, r1
    1cd0:	91 04       	cpc	r9, r1
    1cd2:	71 f7       	brne	.-36     	; 0x1cb0 <vfprintf+0x1a4>
    1cd4:	e8 c0       	rjmp	.+464    	; 0x1ea6 <vfprintf+0x39a>
    1cd6:	84 36       	cpi	r24, 0x64	; 100
    1cd8:	11 f0       	breq	.+4      	; 0x1cde <vfprintf+0x1d2>
    1cda:	89 36       	cpi	r24, 0x69	; 105
    1cdc:	41 f5       	brne	.+80     	; 0x1d2e <vfprintf+0x222>
    1cde:	f8 01       	movw	r30, r16
    1ce0:	37 fe       	sbrs	r3, 7
    1ce2:	07 c0       	rjmp	.+14     	; 0x1cf2 <vfprintf+0x1e6>
    1ce4:	60 81       	ld	r22, Z
    1ce6:	71 81       	ldd	r23, Z+1	; 0x01
    1ce8:	82 81       	ldd	r24, Z+2	; 0x02
    1cea:	93 81       	ldd	r25, Z+3	; 0x03
    1cec:	0c 5f       	subi	r16, 0xFC	; 252
    1cee:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf0:	08 c0       	rjmp	.+16     	; 0x1d02 <vfprintf+0x1f6>
    1cf2:	60 81       	ld	r22, Z
    1cf4:	71 81       	ldd	r23, Z+1	; 0x01
    1cf6:	07 2e       	mov	r0, r23
    1cf8:	00 0c       	add	r0, r0
    1cfa:	88 0b       	sbc	r24, r24
    1cfc:	99 0b       	sbc	r25, r25
    1cfe:	0e 5f       	subi	r16, 0xFE	; 254
    1d00:	1f 4f       	sbci	r17, 0xFF	; 255
    1d02:	f3 2d       	mov	r31, r3
    1d04:	ff 76       	andi	r31, 0x6F	; 111
    1d06:	3f 2e       	mov	r3, r31
    1d08:	97 ff       	sbrs	r25, 7
    1d0a:	09 c0       	rjmp	.+18     	; 0x1d1e <vfprintf+0x212>
    1d0c:	90 95       	com	r25
    1d0e:	80 95       	com	r24
    1d10:	70 95       	com	r23
    1d12:	61 95       	neg	r22
    1d14:	7f 4f       	sbci	r23, 0xFF	; 255
    1d16:	8f 4f       	sbci	r24, 0xFF	; 255
    1d18:	9f 4f       	sbci	r25, 0xFF	; 255
    1d1a:	f0 68       	ori	r31, 0x80	; 128
    1d1c:	3f 2e       	mov	r3, r31
    1d1e:	2a e0       	ldi	r18, 0x0A	; 10
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	a3 01       	movw	r20, r6
    1d24:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__ultoa_invert>
    1d28:	88 2e       	mov	r8, r24
    1d2a:	86 18       	sub	r8, r6
    1d2c:	45 c0       	rjmp	.+138    	; 0x1db8 <vfprintf+0x2ac>
    1d2e:	85 37       	cpi	r24, 0x75	; 117
    1d30:	31 f4       	brne	.+12     	; 0x1d3e <vfprintf+0x232>
    1d32:	23 2d       	mov	r18, r3
    1d34:	2f 7e       	andi	r18, 0xEF	; 239
    1d36:	b2 2e       	mov	r11, r18
    1d38:	2a e0       	ldi	r18, 0x0A	; 10
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	25 c0       	rjmp	.+74     	; 0x1d88 <vfprintf+0x27c>
    1d3e:	93 2d       	mov	r25, r3
    1d40:	99 7f       	andi	r25, 0xF9	; 249
    1d42:	b9 2e       	mov	r11, r25
    1d44:	8f 36       	cpi	r24, 0x6F	; 111
    1d46:	c1 f0       	breq	.+48     	; 0x1d78 <vfprintf+0x26c>
    1d48:	18 f4       	brcc	.+6      	; 0x1d50 <vfprintf+0x244>
    1d4a:	88 35       	cpi	r24, 0x58	; 88
    1d4c:	79 f0       	breq	.+30     	; 0x1d6c <vfprintf+0x260>
    1d4e:	b5 c0       	rjmp	.+362    	; 0x1eba <vfprintf+0x3ae>
    1d50:	80 37       	cpi	r24, 0x70	; 112
    1d52:	19 f0       	breq	.+6      	; 0x1d5a <vfprintf+0x24e>
    1d54:	88 37       	cpi	r24, 0x78	; 120
    1d56:	21 f0       	breq	.+8      	; 0x1d60 <vfprintf+0x254>
    1d58:	b0 c0       	rjmp	.+352    	; 0x1eba <vfprintf+0x3ae>
    1d5a:	e9 2f       	mov	r30, r25
    1d5c:	e0 61       	ori	r30, 0x10	; 16
    1d5e:	be 2e       	mov	r11, r30
    1d60:	b4 fe       	sbrs	r11, 4
    1d62:	0d c0       	rjmp	.+26     	; 0x1d7e <vfprintf+0x272>
    1d64:	fb 2d       	mov	r31, r11
    1d66:	f4 60       	ori	r31, 0x04	; 4
    1d68:	bf 2e       	mov	r11, r31
    1d6a:	09 c0       	rjmp	.+18     	; 0x1d7e <vfprintf+0x272>
    1d6c:	34 fe       	sbrs	r3, 4
    1d6e:	0a c0       	rjmp	.+20     	; 0x1d84 <vfprintf+0x278>
    1d70:	29 2f       	mov	r18, r25
    1d72:	26 60       	ori	r18, 0x06	; 6
    1d74:	b2 2e       	mov	r11, r18
    1d76:	06 c0       	rjmp	.+12     	; 0x1d84 <vfprintf+0x278>
    1d78:	28 e0       	ldi	r18, 0x08	; 8
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	05 c0       	rjmp	.+10     	; 0x1d88 <vfprintf+0x27c>
    1d7e:	20 e1       	ldi	r18, 0x10	; 16
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	02 c0       	rjmp	.+4      	; 0x1d88 <vfprintf+0x27c>
    1d84:	20 e1       	ldi	r18, 0x10	; 16
    1d86:	32 e0       	ldi	r19, 0x02	; 2
    1d88:	f8 01       	movw	r30, r16
    1d8a:	b7 fe       	sbrs	r11, 7
    1d8c:	07 c0       	rjmp	.+14     	; 0x1d9c <vfprintf+0x290>
    1d8e:	60 81       	ld	r22, Z
    1d90:	71 81       	ldd	r23, Z+1	; 0x01
    1d92:	82 81       	ldd	r24, Z+2	; 0x02
    1d94:	93 81       	ldd	r25, Z+3	; 0x03
    1d96:	0c 5f       	subi	r16, 0xFC	; 252
    1d98:	1f 4f       	sbci	r17, 0xFF	; 255
    1d9a:	06 c0       	rjmp	.+12     	; 0x1da8 <vfprintf+0x29c>
    1d9c:	60 81       	ld	r22, Z
    1d9e:	71 81       	ldd	r23, Z+1	; 0x01
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	0e 5f       	subi	r16, 0xFE	; 254
    1da6:	1f 4f       	sbci	r17, 0xFF	; 255
    1da8:	a3 01       	movw	r20, r6
    1daa:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__ultoa_invert>
    1dae:	88 2e       	mov	r8, r24
    1db0:	86 18       	sub	r8, r6
    1db2:	fb 2d       	mov	r31, r11
    1db4:	ff 77       	andi	r31, 0x7F	; 127
    1db6:	3f 2e       	mov	r3, r31
    1db8:	36 fe       	sbrs	r3, 6
    1dba:	0d c0       	rjmp	.+26     	; 0x1dd6 <vfprintf+0x2ca>
    1dbc:	23 2d       	mov	r18, r3
    1dbe:	2e 7f       	andi	r18, 0xFE	; 254
    1dc0:	a2 2e       	mov	r10, r18
    1dc2:	89 14       	cp	r8, r9
    1dc4:	58 f4       	brcc	.+22     	; 0x1ddc <vfprintf+0x2d0>
    1dc6:	34 fe       	sbrs	r3, 4
    1dc8:	0b c0       	rjmp	.+22     	; 0x1de0 <vfprintf+0x2d4>
    1dca:	32 fc       	sbrc	r3, 2
    1dcc:	09 c0       	rjmp	.+18     	; 0x1de0 <vfprintf+0x2d4>
    1dce:	83 2d       	mov	r24, r3
    1dd0:	8e 7e       	andi	r24, 0xEE	; 238
    1dd2:	a8 2e       	mov	r10, r24
    1dd4:	05 c0       	rjmp	.+10     	; 0x1de0 <vfprintf+0x2d4>
    1dd6:	b8 2c       	mov	r11, r8
    1dd8:	a3 2c       	mov	r10, r3
    1dda:	03 c0       	rjmp	.+6      	; 0x1de2 <vfprintf+0x2d6>
    1ddc:	b8 2c       	mov	r11, r8
    1dde:	01 c0       	rjmp	.+2      	; 0x1de2 <vfprintf+0x2d6>
    1de0:	b9 2c       	mov	r11, r9
    1de2:	a4 fe       	sbrs	r10, 4
    1de4:	0f c0       	rjmp	.+30     	; 0x1e04 <vfprintf+0x2f8>
    1de6:	fe 01       	movw	r30, r28
    1de8:	e8 0d       	add	r30, r8
    1dea:	f1 1d       	adc	r31, r1
    1dec:	80 81       	ld	r24, Z
    1dee:	80 33       	cpi	r24, 0x30	; 48
    1df0:	21 f4       	brne	.+8      	; 0x1dfa <vfprintf+0x2ee>
    1df2:	9a 2d       	mov	r25, r10
    1df4:	99 7e       	andi	r25, 0xE9	; 233
    1df6:	a9 2e       	mov	r10, r25
    1df8:	09 c0       	rjmp	.+18     	; 0x1e0c <vfprintf+0x300>
    1dfa:	a2 fe       	sbrs	r10, 2
    1dfc:	06 c0       	rjmp	.+12     	; 0x1e0a <vfprintf+0x2fe>
    1dfe:	b3 94       	inc	r11
    1e00:	b3 94       	inc	r11
    1e02:	04 c0       	rjmp	.+8      	; 0x1e0c <vfprintf+0x300>
    1e04:	8a 2d       	mov	r24, r10
    1e06:	86 78       	andi	r24, 0x86	; 134
    1e08:	09 f0       	breq	.+2      	; 0x1e0c <vfprintf+0x300>
    1e0a:	b3 94       	inc	r11
    1e0c:	a3 fc       	sbrc	r10, 3
    1e0e:	11 c0       	rjmp	.+34     	; 0x1e32 <vfprintf+0x326>
    1e10:	a0 fe       	sbrs	r10, 0
    1e12:	06 c0       	rjmp	.+12     	; 0x1e20 <vfprintf+0x314>
    1e14:	b2 14       	cp	r11, r2
    1e16:	88 f4       	brcc	.+34     	; 0x1e3a <vfprintf+0x32e>
    1e18:	28 0c       	add	r2, r8
    1e1a:	92 2c       	mov	r9, r2
    1e1c:	9b 18       	sub	r9, r11
    1e1e:	0e c0       	rjmp	.+28     	; 0x1e3c <vfprintf+0x330>
    1e20:	b2 14       	cp	r11, r2
    1e22:	60 f4       	brcc	.+24     	; 0x1e3c <vfprintf+0x330>
    1e24:	b6 01       	movw	r22, r12
    1e26:	80 e2       	ldi	r24, 0x20	; 32
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <fputc>
    1e2e:	b3 94       	inc	r11
    1e30:	f7 cf       	rjmp	.-18     	; 0x1e20 <vfprintf+0x314>
    1e32:	b2 14       	cp	r11, r2
    1e34:	18 f4       	brcc	.+6      	; 0x1e3c <vfprintf+0x330>
    1e36:	2b 18       	sub	r2, r11
    1e38:	02 c0       	rjmp	.+4      	; 0x1e3e <vfprintf+0x332>
    1e3a:	98 2c       	mov	r9, r8
    1e3c:	21 2c       	mov	r2, r1
    1e3e:	a4 fe       	sbrs	r10, 4
    1e40:	10 c0       	rjmp	.+32     	; 0x1e62 <vfprintf+0x356>
    1e42:	b6 01       	movw	r22, r12
    1e44:	80 e3       	ldi	r24, 0x30	; 48
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <fputc>
    1e4c:	a2 fe       	sbrs	r10, 2
    1e4e:	17 c0       	rjmp	.+46     	; 0x1e7e <vfprintf+0x372>
    1e50:	a1 fc       	sbrc	r10, 1
    1e52:	03 c0       	rjmp	.+6      	; 0x1e5a <vfprintf+0x34e>
    1e54:	88 e7       	ldi	r24, 0x78	; 120
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	02 c0       	rjmp	.+4      	; 0x1e5e <vfprintf+0x352>
    1e5a:	88 e5       	ldi	r24, 0x58	; 88
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	b6 01       	movw	r22, r12
    1e60:	0c c0       	rjmp	.+24     	; 0x1e7a <vfprintf+0x36e>
    1e62:	8a 2d       	mov	r24, r10
    1e64:	86 78       	andi	r24, 0x86	; 134
    1e66:	59 f0       	breq	.+22     	; 0x1e7e <vfprintf+0x372>
    1e68:	a1 fe       	sbrs	r10, 1
    1e6a:	02 c0       	rjmp	.+4      	; 0x1e70 <vfprintf+0x364>
    1e6c:	8b e2       	ldi	r24, 0x2B	; 43
    1e6e:	01 c0       	rjmp	.+2      	; 0x1e72 <vfprintf+0x366>
    1e70:	80 e2       	ldi	r24, 0x20	; 32
    1e72:	a7 fc       	sbrc	r10, 7
    1e74:	8d e2       	ldi	r24, 0x2D	; 45
    1e76:	b6 01       	movw	r22, r12
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <fputc>
    1e7e:	89 14       	cp	r8, r9
    1e80:	38 f4       	brcc	.+14     	; 0x1e90 <vfprintf+0x384>
    1e82:	b6 01       	movw	r22, r12
    1e84:	80 e3       	ldi	r24, 0x30	; 48
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <fputc>
    1e8c:	9a 94       	dec	r9
    1e8e:	f7 cf       	rjmp	.-18     	; 0x1e7e <vfprintf+0x372>
    1e90:	8a 94       	dec	r8
    1e92:	f3 01       	movw	r30, r6
    1e94:	e8 0d       	add	r30, r8
    1e96:	f1 1d       	adc	r31, r1
    1e98:	80 81       	ld	r24, Z
    1e9a:	b6 01       	movw	r22, r12
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <fputc>
    1ea2:	81 10       	cpse	r8, r1
    1ea4:	f5 cf       	rjmp	.-22     	; 0x1e90 <vfprintf+0x384>
    1ea6:	22 20       	and	r2, r2
    1ea8:	09 f4       	brne	.+2      	; 0x1eac <vfprintf+0x3a0>
    1eaa:	42 ce       	rjmp	.-892    	; 0x1b30 <vfprintf+0x24>
    1eac:	b6 01       	movw	r22, r12
    1eae:	80 e2       	ldi	r24, 0x20	; 32
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <fputc>
    1eb6:	2a 94       	dec	r2
    1eb8:	f6 cf       	rjmp	.-20     	; 0x1ea6 <vfprintf+0x39a>
    1eba:	f6 01       	movw	r30, r12
    1ebc:	86 81       	ldd	r24, Z+6	; 0x06
    1ebe:	97 81       	ldd	r25, Z+7	; 0x07
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <vfprintf+0x3ba>
    1ec2:	8f ef       	ldi	r24, 0xFF	; 255
    1ec4:	9f ef       	ldi	r25, 0xFF	; 255
    1ec6:	2b 96       	adiw	r28, 0x0b	; 11
    1ec8:	e2 e1       	ldi	r30, 0x12	; 18
    1eca:	0c 94 33 10 	jmp	0x2066	; 0x2066 <__epilogue_restores__>

00001ece <strnlen_P>:
    1ece:	fc 01       	movw	r30, r24
    1ed0:	05 90       	lpm	r0, Z+
    1ed2:	61 50       	subi	r22, 0x01	; 1
    1ed4:	70 40       	sbci	r23, 0x00	; 0
    1ed6:	01 10       	cpse	r0, r1
    1ed8:	d8 f7       	brcc	.-10     	; 0x1ed0 <strnlen_P+0x2>
    1eda:	80 95       	com	r24
    1edc:	90 95       	com	r25
    1ede:	8e 0f       	add	r24, r30
    1ee0:	9f 1f       	adc	r25, r31
    1ee2:	08 95       	ret

00001ee4 <strnlen>:
    1ee4:	fc 01       	movw	r30, r24
    1ee6:	61 50       	subi	r22, 0x01	; 1
    1ee8:	70 40       	sbci	r23, 0x00	; 0
    1eea:	01 90       	ld	r0, Z+
    1eec:	01 10       	cpse	r0, r1
    1eee:	d8 f7       	brcc	.-10     	; 0x1ee6 <strnlen+0x2>
    1ef0:	80 95       	com	r24
    1ef2:	90 95       	com	r25
    1ef4:	8e 0f       	add	r24, r30
    1ef6:	9f 1f       	adc	r25, r31
    1ef8:	08 95       	ret

00001efa <fputc>:
    1efa:	0f 93       	push	r16
    1efc:	1f 93       	push	r17
    1efe:	cf 93       	push	r28
    1f00:	df 93       	push	r29
    1f02:	fb 01       	movw	r30, r22
    1f04:	23 81       	ldd	r18, Z+3	; 0x03
    1f06:	21 fd       	sbrc	r18, 1
    1f08:	03 c0       	rjmp	.+6      	; 0x1f10 <fputc+0x16>
    1f0a:	8f ef       	ldi	r24, 0xFF	; 255
    1f0c:	9f ef       	ldi	r25, 0xFF	; 255
    1f0e:	2c c0       	rjmp	.+88     	; 0x1f68 <fputc+0x6e>
    1f10:	22 ff       	sbrs	r18, 2
    1f12:	16 c0       	rjmp	.+44     	; 0x1f40 <fputc+0x46>
    1f14:	46 81       	ldd	r20, Z+6	; 0x06
    1f16:	57 81       	ldd	r21, Z+7	; 0x07
    1f18:	24 81       	ldd	r18, Z+4	; 0x04
    1f1a:	35 81       	ldd	r19, Z+5	; 0x05
    1f1c:	42 17       	cp	r20, r18
    1f1e:	53 07       	cpc	r21, r19
    1f20:	44 f4       	brge	.+16     	; 0x1f32 <fputc+0x38>
    1f22:	a0 81       	ld	r26, Z
    1f24:	b1 81       	ldd	r27, Z+1	; 0x01
    1f26:	9d 01       	movw	r18, r26
    1f28:	2f 5f       	subi	r18, 0xFF	; 255
    1f2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f2c:	31 83       	std	Z+1, r19	; 0x01
    1f2e:	20 83       	st	Z, r18
    1f30:	8c 93       	st	X, r24
    1f32:	26 81       	ldd	r18, Z+6	; 0x06
    1f34:	37 81       	ldd	r19, Z+7	; 0x07
    1f36:	2f 5f       	subi	r18, 0xFF	; 255
    1f38:	3f 4f       	sbci	r19, 0xFF	; 255
    1f3a:	37 83       	std	Z+7, r19	; 0x07
    1f3c:	26 83       	std	Z+6, r18	; 0x06
    1f3e:	14 c0       	rjmp	.+40     	; 0x1f68 <fputc+0x6e>
    1f40:	8b 01       	movw	r16, r22
    1f42:	ec 01       	movw	r28, r24
    1f44:	fb 01       	movw	r30, r22
    1f46:	00 84       	ldd	r0, Z+8	; 0x08
    1f48:	f1 85       	ldd	r31, Z+9	; 0x09
    1f4a:	e0 2d       	mov	r30, r0
    1f4c:	09 95       	icall
    1f4e:	89 2b       	or	r24, r25
    1f50:	e1 f6       	brne	.-72     	; 0x1f0a <fputc+0x10>
    1f52:	d8 01       	movw	r26, r16
    1f54:	16 96       	adiw	r26, 0x06	; 6
    1f56:	8d 91       	ld	r24, X+
    1f58:	9c 91       	ld	r25, X
    1f5a:	17 97       	sbiw	r26, 0x07	; 7
    1f5c:	01 96       	adiw	r24, 0x01	; 1
    1f5e:	17 96       	adiw	r26, 0x07	; 7
    1f60:	9c 93       	st	X, r25
    1f62:	8e 93       	st	-X, r24
    1f64:	16 97       	sbiw	r26, 0x06	; 6
    1f66:	ce 01       	movw	r24, r28
    1f68:	df 91       	pop	r29
    1f6a:	cf 91       	pop	r28
    1f6c:	1f 91       	pop	r17
    1f6e:	0f 91       	pop	r16
    1f70:	08 95       	ret

00001f72 <__ultoa_invert>:
    1f72:	fa 01       	movw	r30, r20
    1f74:	aa 27       	eor	r26, r26
    1f76:	28 30       	cpi	r18, 0x08	; 8
    1f78:	51 f1       	breq	.+84     	; 0x1fce <__ultoa_invert+0x5c>
    1f7a:	20 31       	cpi	r18, 0x10	; 16
    1f7c:	81 f1       	breq	.+96     	; 0x1fde <__ultoa_invert+0x6c>
    1f7e:	e8 94       	clt
    1f80:	6f 93       	push	r22
    1f82:	6e 7f       	andi	r22, 0xFE	; 254
    1f84:	6e 5f       	subi	r22, 0xFE	; 254
    1f86:	7f 4f       	sbci	r23, 0xFF	; 255
    1f88:	8f 4f       	sbci	r24, 0xFF	; 255
    1f8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f8c:	af 4f       	sbci	r26, 0xFF	; 255
    1f8e:	b1 e0       	ldi	r27, 0x01	; 1
    1f90:	3e d0       	rcall	.+124    	; 0x200e <__ultoa_invert+0x9c>
    1f92:	b4 e0       	ldi	r27, 0x04	; 4
    1f94:	3c d0       	rcall	.+120    	; 0x200e <__ultoa_invert+0x9c>
    1f96:	67 0f       	add	r22, r23
    1f98:	78 1f       	adc	r23, r24
    1f9a:	89 1f       	adc	r24, r25
    1f9c:	9a 1f       	adc	r25, r26
    1f9e:	a1 1d       	adc	r26, r1
    1fa0:	68 0f       	add	r22, r24
    1fa2:	79 1f       	adc	r23, r25
    1fa4:	8a 1f       	adc	r24, r26
    1fa6:	91 1d       	adc	r25, r1
    1fa8:	a1 1d       	adc	r26, r1
    1faa:	6a 0f       	add	r22, r26
    1fac:	71 1d       	adc	r23, r1
    1fae:	81 1d       	adc	r24, r1
    1fb0:	91 1d       	adc	r25, r1
    1fb2:	a1 1d       	adc	r26, r1
    1fb4:	20 d0       	rcall	.+64     	; 0x1ff6 <__ultoa_invert+0x84>
    1fb6:	09 f4       	brne	.+2      	; 0x1fba <__ultoa_invert+0x48>
    1fb8:	68 94       	set
    1fba:	3f 91       	pop	r19
    1fbc:	2a e0       	ldi	r18, 0x0A	; 10
    1fbe:	26 9f       	mul	r18, r22
    1fc0:	11 24       	eor	r1, r1
    1fc2:	30 19       	sub	r19, r0
    1fc4:	30 5d       	subi	r19, 0xD0	; 208
    1fc6:	31 93       	st	Z+, r19
    1fc8:	de f6       	brtc	.-74     	; 0x1f80 <__ultoa_invert+0xe>
    1fca:	cf 01       	movw	r24, r30
    1fcc:	08 95       	ret
    1fce:	46 2f       	mov	r20, r22
    1fd0:	47 70       	andi	r20, 0x07	; 7
    1fd2:	40 5d       	subi	r20, 0xD0	; 208
    1fd4:	41 93       	st	Z+, r20
    1fd6:	b3 e0       	ldi	r27, 0x03	; 3
    1fd8:	0f d0       	rcall	.+30     	; 0x1ff8 <__ultoa_invert+0x86>
    1fda:	c9 f7       	brne	.-14     	; 0x1fce <__ultoa_invert+0x5c>
    1fdc:	f6 cf       	rjmp	.-20     	; 0x1fca <__ultoa_invert+0x58>
    1fde:	46 2f       	mov	r20, r22
    1fe0:	4f 70       	andi	r20, 0x0F	; 15
    1fe2:	40 5d       	subi	r20, 0xD0	; 208
    1fe4:	4a 33       	cpi	r20, 0x3A	; 58
    1fe6:	18 f0       	brcs	.+6      	; 0x1fee <__ultoa_invert+0x7c>
    1fe8:	49 5d       	subi	r20, 0xD9	; 217
    1fea:	31 fd       	sbrc	r19, 1
    1fec:	40 52       	subi	r20, 0x20	; 32
    1fee:	41 93       	st	Z+, r20
    1ff0:	02 d0       	rcall	.+4      	; 0x1ff6 <__ultoa_invert+0x84>
    1ff2:	a9 f7       	brne	.-22     	; 0x1fde <__ultoa_invert+0x6c>
    1ff4:	ea cf       	rjmp	.-44     	; 0x1fca <__ultoa_invert+0x58>
    1ff6:	b4 e0       	ldi	r27, 0x04	; 4
    1ff8:	a6 95       	lsr	r26
    1ffa:	97 95       	ror	r25
    1ffc:	87 95       	ror	r24
    1ffe:	77 95       	ror	r23
    2000:	67 95       	ror	r22
    2002:	ba 95       	dec	r27
    2004:	c9 f7       	brne	.-14     	; 0x1ff8 <__ultoa_invert+0x86>
    2006:	00 97       	sbiw	r24, 0x00	; 0
    2008:	61 05       	cpc	r22, r1
    200a:	71 05       	cpc	r23, r1
    200c:	08 95       	ret
    200e:	9b 01       	movw	r18, r22
    2010:	ac 01       	movw	r20, r24
    2012:	0a 2e       	mov	r0, r26
    2014:	06 94       	lsr	r0
    2016:	57 95       	ror	r21
    2018:	47 95       	ror	r20
    201a:	37 95       	ror	r19
    201c:	27 95       	ror	r18
    201e:	ba 95       	dec	r27
    2020:	c9 f7       	brne	.-14     	; 0x2014 <__ultoa_invert+0xa2>
    2022:	62 0f       	add	r22, r18
    2024:	73 1f       	adc	r23, r19
    2026:	84 1f       	adc	r24, r20
    2028:	95 1f       	adc	r25, r21
    202a:	a0 1d       	adc	r26, r0
    202c:	08 95       	ret

0000202e <__prologue_saves__>:
    202e:	2f 92       	push	r2
    2030:	3f 92       	push	r3
    2032:	4f 92       	push	r4
    2034:	5f 92       	push	r5
    2036:	6f 92       	push	r6
    2038:	7f 92       	push	r7
    203a:	8f 92       	push	r8
    203c:	9f 92       	push	r9
    203e:	af 92       	push	r10
    2040:	bf 92       	push	r11
    2042:	cf 92       	push	r12
    2044:	df 92       	push	r13
    2046:	ef 92       	push	r14
    2048:	ff 92       	push	r15
    204a:	0f 93       	push	r16
    204c:	1f 93       	push	r17
    204e:	cf 93       	push	r28
    2050:	df 93       	push	r29
    2052:	cd b7       	in	r28, 0x3d	; 61
    2054:	de b7       	in	r29, 0x3e	; 62
    2056:	ca 1b       	sub	r28, r26
    2058:	db 0b       	sbc	r29, r27
    205a:	0f b6       	in	r0, 0x3f	; 63
    205c:	f8 94       	cli
    205e:	de bf       	out	0x3e, r29	; 62
    2060:	0f be       	out	0x3f, r0	; 63
    2062:	cd bf       	out	0x3d, r28	; 61
    2064:	09 94       	ijmp

00002066 <__epilogue_restores__>:
    2066:	2a 88       	ldd	r2, Y+18	; 0x12
    2068:	39 88       	ldd	r3, Y+17	; 0x11
    206a:	48 88       	ldd	r4, Y+16	; 0x10
    206c:	5f 84       	ldd	r5, Y+15	; 0x0f
    206e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2070:	7d 84       	ldd	r7, Y+13	; 0x0d
    2072:	8c 84       	ldd	r8, Y+12	; 0x0c
    2074:	9b 84       	ldd	r9, Y+11	; 0x0b
    2076:	aa 84       	ldd	r10, Y+10	; 0x0a
    2078:	b9 84       	ldd	r11, Y+9	; 0x09
    207a:	c8 84       	ldd	r12, Y+8	; 0x08
    207c:	df 80       	ldd	r13, Y+7	; 0x07
    207e:	ee 80       	ldd	r14, Y+6	; 0x06
    2080:	fd 80       	ldd	r15, Y+5	; 0x05
    2082:	0c 81       	ldd	r16, Y+4	; 0x04
    2084:	1b 81       	ldd	r17, Y+3	; 0x03
    2086:	aa 81       	ldd	r26, Y+2	; 0x02
    2088:	b9 81       	ldd	r27, Y+1	; 0x01
    208a:	ce 0f       	add	r28, r30
    208c:	d1 1d       	adc	r29, r1
    208e:	0f b6       	in	r0, 0x3f	; 63
    2090:	f8 94       	cli
    2092:	de bf       	out	0x3e, r29	; 62
    2094:	0f be       	out	0x3f, r0	; 63
    2096:	cd bf       	out	0x3d, r28	; 61
    2098:	ed 01       	movw	r28, r26
    209a:	08 95       	ret

0000209c <_exit>:
    209c:	f8 94       	cli

0000209e <__stop_program>:
    209e:	ff cf       	rjmp	.-2      	; 0x209e <__stop_program>
